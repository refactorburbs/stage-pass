
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Team
 * 
 */
export type Team = $Result.DefaultSelection<Prisma.$TeamPayload>
/**
 * Model Game
 * 
 */
export type Game = $Result.DefaultSelection<Prisma.$GamePayload>
/**
 * Model GameTeam
 * 
 */
export type GameTeam = $Result.DefaultSelection<Prisma.$GameTeamPayload>
/**
 * Model InviteCode
 * 
 */
export type InviteCode = $Result.DefaultSelection<Prisma.$InviteCodePayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model GameOwner
 * 
 */
export type GameOwner = $Result.DefaultSelection<Prisma.$GameOwnerPayload>
/**
 * Model Asset
 * 
 */
export type Asset = $Result.DefaultSelection<Prisma.$AssetPayload>
/**
 * Model AssetFinalReviewTeam
 * 
 */
export type AssetFinalReviewTeam = $Result.DefaultSelection<Prisma.$AssetFinalReviewTeamPayload>
/**
 * Model AssetRevision
 * 
 */
export type AssetRevision = $Result.DefaultSelection<Prisma.$AssetRevisionPayload>
/**
 * Model AssetVote
 * 
 */
export type AssetVote = $Result.DefaultSelection<Prisma.$AssetVotePayload>
/**
 * Model UserAssetInteraction
 * 
 */
export type UserAssetInteraction = $Result.DefaultSelection<Prisma.$UserAssetInteractionPayload>
/**
 * Model AssetComment
 * 
 */
export type AssetComment = $Result.DefaultSelection<Prisma.$AssetCommentPayload>
/**
 * Model RevisionComment
 * 
 */
export type RevisionComment = $Result.DefaultSelection<Prisma.$RevisionCommentPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  LEAD: 'LEAD',
  ARTIST: 'ARTIST',
  VOTER: 'VOTER'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const AssetStatus: {
  PENDING: 'PENDING',
  PHASE1_APPROVED: 'PHASE1_APPROVED',
  PHASE1_REJECTED: 'PHASE1_REJECTED',
  PHASE2_APPROVED: 'PHASE2_APPROVED',
  PHASE2_REJECTED: 'PHASE2_REJECTED',
  ARCHIVED: 'ARCHIVED'
};

export type AssetStatus = (typeof AssetStatus)[keyof typeof AssetStatus]


export const VoteType: {
  APPROVE: 'APPROVE',
  REJECT: 'REJECT'
};

export type VoteType = (typeof VoteType)[keyof typeof VoteType]


export const VotePhase: {
  PHASE1: 'PHASE1',
  PHASE2: 'PHASE2'
};

export type VotePhase = (typeof VotePhase)[keyof typeof VotePhase]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type AssetStatus = $Enums.AssetStatus

export const AssetStatus: typeof $Enums.AssetStatus

export type VoteType = $Enums.VoteType

export const VoteType: typeof $Enums.VoteType

export type VotePhase = $Enums.VotePhase

export const VotePhase: typeof $Enums.VotePhase

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Teams
 * const teams = await prisma.team.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Teams
   * const teams = await prisma.team.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.team`: Exposes CRUD operations for the **Team** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teams
    * const teams = await prisma.team.findMany()
    * ```
    */
  get team(): Prisma.TeamDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.game`: Exposes CRUD operations for the **Game** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Games
    * const games = await prisma.game.findMany()
    * ```
    */
  get game(): Prisma.GameDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.gameTeam`: Exposes CRUD operations for the **GameTeam** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GameTeams
    * const gameTeams = await prisma.gameTeam.findMany()
    * ```
    */
  get gameTeam(): Prisma.GameTeamDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.inviteCode`: Exposes CRUD operations for the **InviteCode** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InviteCodes
    * const inviteCodes = await prisma.inviteCode.findMany()
    * ```
    */
  get inviteCode(): Prisma.InviteCodeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.gameOwner`: Exposes CRUD operations for the **GameOwner** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GameOwners
    * const gameOwners = await prisma.gameOwner.findMany()
    * ```
    */
  get gameOwner(): Prisma.GameOwnerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.asset`: Exposes CRUD operations for the **Asset** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Assets
    * const assets = await prisma.asset.findMany()
    * ```
    */
  get asset(): Prisma.AssetDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.assetFinalReviewTeam`: Exposes CRUD operations for the **AssetFinalReviewTeam** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AssetFinalReviewTeams
    * const assetFinalReviewTeams = await prisma.assetFinalReviewTeam.findMany()
    * ```
    */
  get assetFinalReviewTeam(): Prisma.AssetFinalReviewTeamDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.assetRevision`: Exposes CRUD operations for the **AssetRevision** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AssetRevisions
    * const assetRevisions = await prisma.assetRevision.findMany()
    * ```
    */
  get assetRevision(): Prisma.AssetRevisionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.assetVote`: Exposes CRUD operations for the **AssetVote** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AssetVotes
    * const assetVotes = await prisma.assetVote.findMany()
    * ```
    */
  get assetVote(): Prisma.AssetVoteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userAssetInteraction`: Exposes CRUD operations for the **UserAssetInteraction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserAssetInteractions
    * const userAssetInteractions = await prisma.userAssetInteraction.findMany()
    * ```
    */
  get userAssetInteraction(): Prisma.UserAssetInteractionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.assetComment`: Exposes CRUD operations for the **AssetComment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AssetComments
    * const assetComments = await prisma.assetComment.findMany()
    * ```
    */
  get assetComment(): Prisma.AssetCommentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.revisionComment`: Exposes CRUD operations for the **RevisionComment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RevisionComments
    * const revisionComments = await prisma.revisionComment.findMany()
    * ```
    */
  get revisionComment(): Prisma.RevisionCommentDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.15.0
   * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Team: 'Team',
    Game: 'Game',
    GameTeam: 'GameTeam',
    InviteCode: 'InviteCode',
    User: 'User',
    GameOwner: 'GameOwner',
    Asset: 'Asset',
    AssetFinalReviewTeam: 'AssetFinalReviewTeam',
    AssetRevision: 'AssetRevision',
    AssetVote: 'AssetVote',
    UserAssetInteraction: 'UserAssetInteraction',
    AssetComment: 'AssetComment',
    RevisionComment: 'RevisionComment'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "team" | "game" | "gameTeam" | "inviteCode" | "user" | "gameOwner" | "asset" | "assetFinalReviewTeam" | "assetRevision" | "assetVote" | "userAssetInteraction" | "assetComment" | "revisionComment"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Team: {
        payload: Prisma.$TeamPayload<ExtArgs>
        fields: Prisma.TeamFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findFirst: {
            args: Prisma.TeamFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findMany: {
            args: Prisma.TeamFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          create: {
            args: Prisma.TeamCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          createMany: {
            args: Prisma.TeamCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeamCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          delete: {
            args: Prisma.TeamDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          update: {
            args: Prisma.TeamUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          deleteMany: {
            args: Prisma.TeamDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeamUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TeamUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          upsert: {
            args: Prisma.TeamUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          aggregate: {
            args: Prisma.TeamAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeam>
          }
          groupBy: {
            args: Prisma.TeamGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamCountArgs<ExtArgs>
            result: $Utils.Optional<TeamCountAggregateOutputType> | number
          }
        }
      }
      Game: {
        payload: Prisma.$GamePayload<ExtArgs>
        fields: Prisma.GameFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          findFirst: {
            args: Prisma.GameFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          findMany: {
            args: Prisma.GameFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>[]
          }
          create: {
            args: Prisma.GameCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          createMany: {
            args: Prisma.GameCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GameCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>[]
          }
          delete: {
            args: Prisma.GameDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          update: {
            args: Prisma.GameUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          deleteMany: {
            args: Prisma.GameDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GameUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GameUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>[]
          }
          upsert: {
            args: Prisma.GameUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          aggregate: {
            args: Prisma.GameAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGame>
          }
          groupBy: {
            args: Prisma.GameGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameCountArgs<ExtArgs>
            result: $Utils.Optional<GameCountAggregateOutputType> | number
          }
        }
      }
      GameTeam: {
        payload: Prisma.$GameTeamPayload<ExtArgs>
        fields: Prisma.GameTeamFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameTeamFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameTeamPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameTeamFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameTeamPayload>
          }
          findFirst: {
            args: Prisma.GameTeamFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameTeamPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameTeamFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameTeamPayload>
          }
          findMany: {
            args: Prisma.GameTeamFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameTeamPayload>[]
          }
          create: {
            args: Prisma.GameTeamCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameTeamPayload>
          }
          createMany: {
            args: Prisma.GameTeamCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GameTeamCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameTeamPayload>[]
          }
          delete: {
            args: Prisma.GameTeamDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameTeamPayload>
          }
          update: {
            args: Prisma.GameTeamUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameTeamPayload>
          }
          deleteMany: {
            args: Prisma.GameTeamDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GameTeamUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GameTeamUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameTeamPayload>[]
          }
          upsert: {
            args: Prisma.GameTeamUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameTeamPayload>
          }
          aggregate: {
            args: Prisma.GameTeamAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGameTeam>
          }
          groupBy: {
            args: Prisma.GameTeamGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameTeamGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameTeamCountArgs<ExtArgs>
            result: $Utils.Optional<GameTeamCountAggregateOutputType> | number
          }
        }
      }
      InviteCode: {
        payload: Prisma.$InviteCodePayload<ExtArgs>
        fields: Prisma.InviteCodeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InviteCodeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InviteCodePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InviteCodeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InviteCodePayload>
          }
          findFirst: {
            args: Prisma.InviteCodeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InviteCodePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InviteCodeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InviteCodePayload>
          }
          findMany: {
            args: Prisma.InviteCodeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InviteCodePayload>[]
          }
          create: {
            args: Prisma.InviteCodeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InviteCodePayload>
          }
          createMany: {
            args: Prisma.InviteCodeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InviteCodeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InviteCodePayload>[]
          }
          delete: {
            args: Prisma.InviteCodeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InviteCodePayload>
          }
          update: {
            args: Prisma.InviteCodeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InviteCodePayload>
          }
          deleteMany: {
            args: Prisma.InviteCodeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InviteCodeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InviteCodeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InviteCodePayload>[]
          }
          upsert: {
            args: Prisma.InviteCodeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InviteCodePayload>
          }
          aggregate: {
            args: Prisma.InviteCodeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInviteCode>
          }
          groupBy: {
            args: Prisma.InviteCodeGroupByArgs<ExtArgs>
            result: $Utils.Optional<InviteCodeGroupByOutputType>[]
          }
          count: {
            args: Prisma.InviteCodeCountArgs<ExtArgs>
            result: $Utils.Optional<InviteCodeCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      GameOwner: {
        payload: Prisma.$GameOwnerPayload<ExtArgs>
        fields: Prisma.GameOwnerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameOwnerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameOwnerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameOwnerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameOwnerPayload>
          }
          findFirst: {
            args: Prisma.GameOwnerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameOwnerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameOwnerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameOwnerPayload>
          }
          findMany: {
            args: Prisma.GameOwnerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameOwnerPayload>[]
          }
          create: {
            args: Prisma.GameOwnerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameOwnerPayload>
          }
          createMany: {
            args: Prisma.GameOwnerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GameOwnerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameOwnerPayload>[]
          }
          delete: {
            args: Prisma.GameOwnerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameOwnerPayload>
          }
          update: {
            args: Prisma.GameOwnerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameOwnerPayload>
          }
          deleteMany: {
            args: Prisma.GameOwnerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GameOwnerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GameOwnerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameOwnerPayload>[]
          }
          upsert: {
            args: Prisma.GameOwnerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameOwnerPayload>
          }
          aggregate: {
            args: Prisma.GameOwnerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGameOwner>
          }
          groupBy: {
            args: Prisma.GameOwnerGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameOwnerGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameOwnerCountArgs<ExtArgs>
            result: $Utils.Optional<GameOwnerCountAggregateOutputType> | number
          }
        }
      }
      Asset: {
        payload: Prisma.$AssetPayload<ExtArgs>
        fields: Prisma.AssetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AssetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AssetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>
          }
          findFirst: {
            args: Prisma.AssetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AssetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>
          }
          findMany: {
            args: Prisma.AssetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>[]
          }
          create: {
            args: Prisma.AssetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>
          }
          createMany: {
            args: Prisma.AssetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AssetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>[]
          }
          delete: {
            args: Prisma.AssetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>
          }
          update: {
            args: Prisma.AssetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>
          }
          deleteMany: {
            args: Prisma.AssetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AssetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AssetUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>[]
          }
          upsert: {
            args: Prisma.AssetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>
          }
          aggregate: {
            args: Prisma.AssetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAsset>
          }
          groupBy: {
            args: Prisma.AssetGroupByArgs<ExtArgs>
            result: $Utils.Optional<AssetGroupByOutputType>[]
          }
          count: {
            args: Prisma.AssetCountArgs<ExtArgs>
            result: $Utils.Optional<AssetCountAggregateOutputType> | number
          }
        }
      }
      AssetFinalReviewTeam: {
        payload: Prisma.$AssetFinalReviewTeamPayload<ExtArgs>
        fields: Prisma.AssetFinalReviewTeamFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AssetFinalReviewTeamFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetFinalReviewTeamPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AssetFinalReviewTeamFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetFinalReviewTeamPayload>
          }
          findFirst: {
            args: Prisma.AssetFinalReviewTeamFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetFinalReviewTeamPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AssetFinalReviewTeamFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetFinalReviewTeamPayload>
          }
          findMany: {
            args: Prisma.AssetFinalReviewTeamFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetFinalReviewTeamPayload>[]
          }
          create: {
            args: Prisma.AssetFinalReviewTeamCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetFinalReviewTeamPayload>
          }
          createMany: {
            args: Prisma.AssetFinalReviewTeamCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AssetFinalReviewTeamCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetFinalReviewTeamPayload>[]
          }
          delete: {
            args: Prisma.AssetFinalReviewTeamDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetFinalReviewTeamPayload>
          }
          update: {
            args: Prisma.AssetFinalReviewTeamUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetFinalReviewTeamPayload>
          }
          deleteMany: {
            args: Prisma.AssetFinalReviewTeamDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AssetFinalReviewTeamUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AssetFinalReviewTeamUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetFinalReviewTeamPayload>[]
          }
          upsert: {
            args: Prisma.AssetFinalReviewTeamUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetFinalReviewTeamPayload>
          }
          aggregate: {
            args: Prisma.AssetFinalReviewTeamAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAssetFinalReviewTeam>
          }
          groupBy: {
            args: Prisma.AssetFinalReviewTeamGroupByArgs<ExtArgs>
            result: $Utils.Optional<AssetFinalReviewTeamGroupByOutputType>[]
          }
          count: {
            args: Prisma.AssetFinalReviewTeamCountArgs<ExtArgs>
            result: $Utils.Optional<AssetFinalReviewTeamCountAggregateOutputType> | number
          }
        }
      }
      AssetRevision: {
        payload: Prisma.$AssetRevisionPayload<ExtArgs>
        fields: Prisma.AssetRevisionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AssetRevisionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetRevisionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AssetRevisionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetRevisionPayload>
          }
          findFirst: {
            args: Prisma.AssetRevisionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetRevisionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AssetRevisionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetRevisionPayload>
          }
          findMany: {
            args: Prisma.AssetRevisionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetRevisionPayload>[]
          }
          create: {
            args: Prisma.AssetRevisionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetRevisionPayload>
          }
          createMany: {
            args: Prisma.AssetRevisionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AssetRevisionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetRevisionPayload>[]
          }
          delete: {
            args: Prisma.AssetRevisionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetRevisionPayload>
          }
          update: {
            args: Prisma.AssetRevisionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetRevisionPayload>
          }
          deleteMany: {
            args: Prisma.AssetRevisionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AssetRevisionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AssetRevisionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetRevisionPayload>[]
          }
          upsert: {
            args: Prisma.AssetRevisionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetRevisionPayload>
          }
          aggregate: {
            args: Prisma.AssetRevisionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAssetRevision>
          }
          groupBy: {
            args: Prisma.AssetRevisionGroupByArgs<ExtArgs>
            result: $Utils.Optional<AssetRevisionGroupByOutputType>[]
          }
          count: {
            args: Prisma.AssetRevisionCountArgs<ExtArgs>
            result: $Utils.Optional<AssetRevisionCountAggregateOutputType> | number
          }
        }
      }
      AssetVote: {
        payload: Prisma.$AssetVotePayload<ExtArgs>
        fields: Prisma.AssetVoteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AssetVoteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetVotePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AssetVoteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetVotePayload>
          }
          findFirst: {
            args: Prisma.AssetVoteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetVotePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AssetVoteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetVotePayload>
          }
          findMany: {
            args: Prisma.AssetVoteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetVotePayload>[]
          }
          create: {
            args: Prisma.AssetVoteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetVotePayload>
          }
          createMany: {
            args: Prisma.AssetVoteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AssetVoteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetVotePayload>[]
          }
          delete: {
            args: Prisma.AssetVoteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetVotePayload>
          }
          update: {
            args: Prisma.AssetVoteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetVotePayload>
          }
          deleteMany: {
            args: Prisma.AssetVoteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AssetVoteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AssetVoteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetVotePayload>[]
          }
          upsert: {
            args: Prisma.AssetVoteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetVotePayload>
          }
          aggregate: {
            args: Prisma.AssetVoteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAssetVote>
          }
          groupBy: {
            args: Prisma.AssetVoteGroupByArgs<ExtArgs>
            result: $Utils.Optional<AssetVoteGroupByOutputType>[]
          }
          count: {
            args: Prisma.AssetVoteCountArgs<ExtArgs>
            result: $Utils.Optional<AssetVoteCountAggregateOutputType> | number
          }
        }
      }
      UserAssetInteraction: {
        payload: Prisma.$UserAssetInteractionPayload<ExtArgs>
        fields: Prisma.UserAssetInteractionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserAssetInteractionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAssetInteractionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserAssetInteractionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAssetInteractionPayload>
          }
          findFirst: {
            args: Prisma.UserAssetInteractionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAssetInteractionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserAssetInteractionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAssetInteractionPayload>
          }
          findMany: {
            args: Prisma.UserAssetInteractionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAssetInteractionPayload>[]
          }
          create: {
            args: Prisma.UserAssetInteractionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAssetInteractionPayload>
          }
          createMany: {
            args: Prisma.UserAssetInteractionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserAssetInteractionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAssetInteractionPayload>[]
          }
          delete: {
            args: Prisma.UserAssetInteractionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAssetInteractionPayload>
          }
          update: {
            args: Prisma.UserAssetInteractionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAssetInteractionPayload>
          }
          deleteMany: {
            args: Prisma.UserAssetInteractionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserAssetInteractionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserAssetInteractionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAssetInteractionPayload>[]
          }
          upsert: {
            args: Prisma.UserAssetInteractionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAssetInteractionPayload>
          }
          aggregate: {
            args: Prisma.UserAssetInteractionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserAssetInteraction>
          }
          groupBy: {
            args: Prisma.UserAssetInteractionGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserAssetInteractionGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserAssetInteractionCountArgs<ExtArgs>
            result: $Utils.Optional<UserAssetInteractionCountAggregateOutputType> | number
          }
        }
      }
      AssetComment: {
        payload: Prisma.$AssetCommentPayload<ExtArgs>
        fields: Prisma.AssetCommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AssetCommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetCommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AssetCommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetCommentPayload>
          }
          findFirst: {
            args: Prisma.AssetCommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetCommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AssetCommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetCommentPayload>
          }
          findMany: {
            args: Prisma.AssetCommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetCommentPayload>[]
          }
          create: {
            args: Prisma.AssetCommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetCommentPayload>
          }
          createMany: {
            args: Prisma.AssetCommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AssetCommentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetCommentPayload>[]
          }
          delete: {
            args: Prisma.AssetCommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetCommentPayload>
          }
          update: {
            args: Prisma.AssetCommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetCommentPayload>
          }
          deleteMany: {
            args: Prisma.AssetCommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AssetCommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AssetCommentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetCommentPayload>[]
          }
          upsert: {
            args: Prisma.AssetCommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetCommentPayload>
          }
          aggregate: {
            args: Prisma.AssetCommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAssetComment>
          }
          groupBy: {
            args: Prisma.AssetCommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<AssetCommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AssetCommentCountArgs<ExtArgs>
            result: $Utils.Optional<AssetCommentCountAggregateOutputType> | number
          }
        }
      }
      RevisionComment: {
        payload: Prisma.$RevisionCommentPayload<ExtArgs>
        fields: Prisma.RevisionCommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RevisionCommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RevisionCommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RevisionCommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RevisionCommentPayload>
          }
          findFirst: {
            args: Prisma.RevisionCommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RevisionCommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RevisionCommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RevisionCommentPayload>
          }
          findMany: {
            args: Prisma.RevisionCommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RevisionCommentPayload>[]
          }
          create: {
            args: Prisma.RevisionCommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RevisionCommentPayload>
          }
          createMany: {
            args: Prisma.RevisionCommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RevisionCommentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RevisionCommentPayload>[]
          }
          delete: {
            args: Prisma.RevisionCommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RevisionCommentPayload>
          }
          update: {
            args: Prisma.RevisionCommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RevisionCommentPayload>
          }
          deleteMany: {
            args: Prisma.RevisionCommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RevisionCommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RevisionCommentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RevisionCommentPayload>[]
          }
          upsert: {
            args: Prisma.RevisionCommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RevisionCommentPayload>
          }
          aggregate: {
            args: Prisma.RevisionCommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRevisionComment>
          }
          groupBy: {
            args: Prisma.RevisionCommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<RevisionCommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.RevisionCommentCountArgs<ExtArgs>
            result: $Utils.Optional<RevisionCommentCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    team?: TeamOmit
    game?: GameOmit
    gameTeam?: GameTeamOmit
    inviteCode?: InviteCodeOmit
    user?: UserOmit
    gameOwner?: GameOwnerOmit
    asset?: AssetOmit
    assetFinalReviewTeam?: AssetFinalReviewTeamOmit
    assetRevision?: AssetRevisionOmit
    assetVote?: AssetVoteOmit
    userAssetInteraction?: UserAssetInteractionOmit
    assetComment?: AssetCommentOmit
    revisionComment?: RevisionCommentOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type TeamCountOutputType
   */

  export type TeamCountOutputType = {
    users: number
    gameTeams: number
    inviteCodes: number
    finalReviewAssets: number
  }

  export type TeamCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | TeamCountOutputTypeCountUsersArgs
    gameTeams?: boolean | TeamCountOutputTypeCountGameTeamsArgs
    inviteCodes?: boolean | TeamCountOutputTypeCountInviteCodesArgs
    finalReviewAssets?: boolean | TeamCountOutputTypeCountFinalReviewAssetsArgs
  }

  // Custom InputTypes
  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamCountOutputType
     */
    select?: TeamCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountGameTeamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameTeamWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountInviteCodesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InviteCodeWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountFinalReviewAssetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetFinalReviewTeamWhereInput
  }


  /**
   * Count Type GameCountOutputType
   */

  export type GameCountOutputType = {
    gameTeams: number
    gameOwners: number
    assets: number
    userInteractions: number
  }

  export type GameCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gameTeams?: boolean | GameCountOutputTypeCountGameTeamsArgs
    gameOwners?: boolean | GameCountOutputTypeCountGameOwnersArgs
    assets?: boolean | GameCountOutputTypeCountAssetsArgs
    userInteractions?: boolean | GameCountOutputTypeCountUserInteractionsArgs
  }

  // Custom InputTypes
  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCountOutputType
     */
    select?: GameCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeCountGameTeamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameTeamWhereInput
  }

  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeCountGameOwnersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameOwnerWhereInput
  }

  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeCountAssetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetWhereInput
  }

  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeCountUserInteractionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserAssetInteractionWhereInput
  }


  /**
   * Count Type InviteCodeCountOutputType
   */

  export type InviteCodeCountOutputType = {
    users: number
  }

  export type InviteCodeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | InviteCodeCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * InviteCodeCountOutputType without action
   */
  export type InviteCodeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InviteCodeCountOutputType
     */
    select?: InviteCodeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InviteCodeCountOutputType without action
   */
  export type InviteCodeCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    gameOwners: number
    uploadedAssets: number
    assetRevisions: number
    assetVotes: number
    assetComments: number
    revisionComments: number
    assetInteractions: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gameOwners?: boolean | UserCountOutputTypeCountGameOwnersArgs
    uploadedAssets?: boolean | UserCountOutputTypeCountUploadedAssetsArgs
    assetRevisions?: boolean | UserCountOutputTypeCountAssetRevisionsArgs
    assetVotes?: boolean | UserCountOutputTypeCountAssetVotesArgs
    assetComments?: boolean | UserCountOutputTypeCountAssetCommentsArgs
    revisionComments?: boolean | UserCountOutputTypeCountRevisionCommentsArgs
    assetInteractions?: boolean | UserCountOutputTypeCountAssetInteractionsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGameOwnersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameOwnerWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUploadedAssetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssetRevisionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetRevisionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssetVotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetVoteWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssetCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetCommentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRevisionCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RevisionCommentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssetInteractionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserAssetInteractionWhereInput
  }


  /**
   * Count Type AssetCountOutputType
   */

  export type AssetCountOutputType = {
    revisions: number
    votes: number
    comments: number
    userInteractions: number
    finalReviewTeams: number
  }

  export type AssetCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    revisions?: boolean | AssetCountOutputTypeCountRevisionsArgs
    votes?: boolean | AssetCountOutputTypeCountVotesArgs
    comments?: boolean | AssetCountOutputTypeCountCommentsArgs
    userInteractions?: boolean | AssetCountOutputTypeCountUserInteractionsArgs
    finalReviewTeams?: boolean | AssetCountOutputTypeCountFinalReviewTeamsArgs
  }

  // Custom InputTypes
  /**
   * AssetCountOutputType without action
   */
  export type AssetCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetCountOutputType
     */
    select?: AssetCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AssetCountOutputType without action
   */
  export type AssetCountOutputTypeCountRevisionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetRevisionWhereInput
  }

  /**
   * AssetCountOutputType without action
   */
  export type AssetCountOutputTypeCountVotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetVoteWhereInput
  }

  /**
   * AssetCountOutputType without action
   */
  export type AssetCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetCommentWhereInput
  }

  /**
   * AssetCountOutputType without action
   */
  export type AssetCountOutputTypeCountUserInteractionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserAssetInteractionWhereInput
  }

  /**
   * AssetCountOutputType without action
   */
  export type AssetCountOutputTypeCountFinalReviewTeamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetFinalReviewTeamWhereInput
  }


  /**
   * Count Type AssetRevisionCountOutputType
   */

  export type AssetRevisionCountOutputType = {
    votes: number
    comments: number
    userInteractions: number
  }

  export type AssetRevisionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    votes?: boolean | AssetRevisionCountOutputTypeCountVotesArgs
    comments?: boolean | AssetRevisionCountOutputTypeCountCommentsArgs
    userInteractions?: boolean | AssetRevisionCountOutputTypeCountUserInteractionsArgs
  }

  // Custom InputTypes
  /**
   * AssetRevisionCountOutputType without action
   */
  export type AssetRevisionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetRevisionCountOutputType
     */
    select?: AssetRevisionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AssetRevisionCountOutputType without action
   */
  export type AssetRevisionCountOutputTypeCountVotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetVoteWhereInput
  }

  /**
   * AssetRevisionCountOutputType without action
   */
  export type AssetRevisionCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RevisionCommentWhereInput
  }

  /**
   * AssetRevisionCountOutputType without action
   */
  export type AssetRevisionCountOutputTypeCountUserInteractionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserAssetInteractionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Team
   */

  export type AggregateTeam = {
    _count: TeamCountAggregateOutputType | null
    _avg: TeamAvgAggregateOutputType | null
    _sum: TeamSumAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  export type TeamAvgAggregateOutputType = {
    id: number | null
  }

  export type TeamSumAggregateOutputType = {
    id: number | null
  }

  export type TeamMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TeamMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TeamCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TeamAvgAggregateInputType = {
    id?: true
  }

  export type TeamSumAggregateInputType = {
    id?: true
  }

  export type TeamMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TeamMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TeamCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TeamAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Team to aggregate.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teams
    **/
    _count?: true | TeamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeamAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeamSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamMaxAggregateInputType
  }

  export type GetTeamAggregateType<T extends TeamAggregateArgs> = {
        [P in keyof T & keyof AggregateTeam]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeam[P]>
      : GetScalarType<T[P], AggregateTeam[P]>
  }




  export type TeamGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamWhereInput
    orderBy?: TeamOrderByWithAggregationInput | TeamOrderByWithAggregationInput[]
    by: TeamScalarFieldEnum[] | TeamScalarFieldEnum
    having?: TeamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamCountAggregateInputType | true
    _avg?: TeamAvgAggregateInputType
    _sum?: TeamSumAggregateInputType
    _min?: TeamMinAggregateInputType
    _max?: TeamMaxAggregateInputType
  }

  export type TeamGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    updatedAt: Date
    _count: TeamCountAggregateOutputType | null
    _avg: TeamAvgAggregateOutputType | null
    _sum: TeamSumAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  type GetTeamGroupByPayload<T extends TeamGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamGroupByOutputType[P]>
            : GetScalarType<T[P], TeamGroupByOutputType[P]>
        }
      >
    >


  export type TeamSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    users?: boolean | Team$usersArgs<ExtArgs>
    gameTeams?: boolean | Team$gameTeamsArgs<ExtArgs>
    inviteCodes?: boolean | Team$inviteCodesArgs<ExtArgs>
    finalReviewAssets?: boolean | Team$finalReviewAssetsArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["team"]>

  export type TeamSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["team"]>

  export type TeamSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["team"]>

  export type TeamSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TeamOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "createdAt" | "updatedAt", ExtArgs["result"]["team"]>
  export type TeamInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Team$usersArgs<ExtArgs>
    gameTeams?: boolean | Team$gameTeamsArgs<ExtArgs>
    inviteCodes?: boolean | Team$inviteCodesArgs<ExtArgs>
    finalReviewAssets?: boolean | Team$finalReviewAssetsArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TeamIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type TeamIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TeamPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Team"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
      gameTeams: Prisma.$GameTeamPayload<ExtArgs>[]
      inviteCodes: Prisma.$InviteCodePayload<ExtArgs>[]
      finalReviewAssets: Prisma.$AssetFinalReviewTeamPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["team"]>
    composites: {}
  }

  type TeamGetPayload<S extends boolean | null | undefined | TeamDefaultArgs> = $Result.GetResult<Prisma.$TeamPayload, S>

  type TeamCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeamFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeamCountAggregateInputType | true
    }

  export interface TeamDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Team'], meta: { name: 'Team' } }
    /**
     * Find zero or one Team that matches the filter.
     * @param {TeamFindUniqueArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeamFindUniqueArgs>(args: SelectSubset<T, TeamFindUniqueArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Team that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeamFindUniqueOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeamFindUniqueOrThrowArgs>(args: SelectSubset<T, TeamFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Team that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeamFindFirstArgs>(args?: SelectSubset<T, TeamFindFirstArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Team that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeamFindFirstOrThrowArgs>(args?: SelectSubset<T, TeamFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Teams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teams
     * const teams = await prisma.team.findMany()
     * 
     * // Get first 10 Teams
     * const teams = await prisma.team.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamWithIdOnly = await prisma.team.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeamFindManyArgs>(args?: SelectSubset<T, TeamFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Team.
     * @param {TeamCreateArgs} args - Arguments to create a Team.
     * @example
     * // Create one Team
     * const Team = await prisma.team.create({
     *   data: {
     *     // ... data to create a Team
     *   }
     * })
     * 
     */
    create<T extends TeamCreateArgs>(args: SelectSubset<T, TeamCreateArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Teams.
     * @param {TeamCreateManyArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const team = await prisma.team.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeamCreateManyArgs>(args?: SelectSubset<T, TeamCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Teams and returns the data saved in the database.
     * @param {TeamCreateManyAndReturnArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const team = await prisma.team.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Teams and only return the `id`
     * const teamWithIdOnly = await prisma.team.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeamCreateManyAndReturnArgs>(args?: SelectSubset<T, TeamCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Team.
     * @param {TeamDeleteArgs} args - Arguments to delete one Team.
     * @example
     * // Delete one Team
     * const Team = await prisma.team.delete({
     *   where: {
     *     // ... filter to delete one Team
     *   }
     * })
     * 
     */
    delete<T extends TeamDeleteArgs>(args: SelectSubset<T, TeamDeleteArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Team.
     * @param {TeamUpdateArgs} args - Arguments to update one Team.
     * @example
     * // Update one Team
     * const team = await prisma.team.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeamUpdateArgs>(args: SelectSubset<T, TeamUpdateArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Teams.
     * @param {TeamDeleteManyArgs} args - Arguments to filter Teams to delete.
     * @example
     * // Delete a few Teams
     * const { count } = await prisma.team.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeamDeleteManyArgs>(args?: SelectSubset<T, TeamDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teams
     * const team = await prisma.team.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeamUpdateManyArgs>(args: SelectSubset<T, TeamUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams and returns the data updated in the database.
     * @param {TeamUpdateManyAndReturnArgs} args - Arguments to update many Teams.
     * @example
     * // Update many Teams
     * const team = await prisma.team.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Teams and only return the `id`
     * const teamWithIdOnly = await prisma.team.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TeamUpdateManyAndReturnArgs>(args: SelectSubset<T, TeamUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Team.
     * @param {TeamUpsertArgs} args - Arguments to update or create a Team.
     * @example
     * // Update or create a Team
     * const team = await prisma.team.upsert({
     *   create: {
     *     // ... data to create a Team
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Team we want to update
     *   }
     * })
     */
    upsert<T extends TeamUpsertArgs>(args: SelectSubset<T, TeamUpsertArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamCountArgs} args - Arguments to filter Teams to count.
     * @example
     * // Count the number of Teams
     * const count = await prisma.team.count({
     *   where: {
     *     // ... the filter for the Teams we want to count
     *   }
     * })
    **/
    count<T extends TeamCountArgs>(
      args?: Subset<T, TeamCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamAggregateArgs>(args: Subset<T, TeamAggregateArgs>): Prisma.PrismaPromise<GetTeamAggregateType<T>>

    /**
     * Group by Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamGroupByArgs['orderBy'] }
        : { orderBy?: TeamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Team model
   */
  readonly fields: TeamFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Team.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Team$usersArgs<ExtArgs> = {}>(args?: Subset<T, Team$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    gameTeams<T extends Team$gameTeamsArgs<ExtArgs> = {}>(args?: Subset<T, Team$gameTeamsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameTeamPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    inviteCodes<T extends Team$inviteCodesArgs<ExtArgs> = {}>(args?: Subset<T, Team$inviteCodesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InviteCodePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    finalReviewAssets<T extends Team$finalReviewAssetsArgs<ExtArgs> = {}>(args?: Subset<T, Team$finalReviewAssetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetFinalReviewTeamPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Team model
   */
  interface TeamFieldRefs {
    readonly id: FieldRef<"Team", 'Int'>
    readonly name: FieldRef<"Team", 'String'>
    readonly createdAt: FieldRef<"Team", 'DateTime'>
    readonly updatedAt: FieldRef<"Team", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Team findUnique
   */
  export type TeamFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team findUniqueOrThrow
   */
  export type TeamFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team findFirst
   */
  export type TeamFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team findFirstOrThrow
   */
  export type TeamFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team findMany
   */
  export type TeamFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Teams to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team create
   */
  export type TeamCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to create a Team.
     */
    data: XOR<TeamCreateInput, TeamUncheckedCreateInput>
  }

  /**
   * Team createMany
   */
  export type TeamCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Teams.
     */
    data: TeamCreateManyInput | TeamCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Team createManyAndReturn
   */
  export type TeamCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * The data used to create many Teams.
     */
    data: TeamCreateManyInput | TeamCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Team update
   */
  export type TeamUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to update a Team.
     */
    data: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
    /**
     * Choose, which Team to update.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team updateMany
   */
  export type TeamUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Teams.
     */
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyInput>
    /**
     * Filter which Teams to update
     */
    where?: TeamWhereInput
    /**
     * Limit how many Teams to update.
     */
    limit?: number
  }

  /**
   * Team updateManyAndReturn
   */
  export type TeamUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * The data used to update Teams.
     */
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyInput>
    /**
     * Filter which Teams to update
     */
    where?: TeamWhereInput
    /**
     * Limit how many Teams to update.
     */
    limit?: number
  }

  /**
   * Team upsert
   */
  export type TeamUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The filter to search for the Team to update in case it exists.
     */
    where: TeamWhereUniqueInput
    /**
     * In case the Team found by the `where` argument doesn't exist, create a new Team with this data.
     */
    create: XOR<TeamCreateInput, TeamUncheckedCreateInput>
    /**
     * In case the Team was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
  }

  /**
   * Team delete
   */
  export type TeamDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter which Team to delete.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team deleteMany
   */
  export type TeamDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teams to delete
     */
    where?: TeamWhereInput
    /**
     * Limit how many Teams to delete.
     */
    limit?: number
  }

  /**
   * Team.users
   */
  export type Team$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Team.gameTeams
   */
  export type Team$gameTeamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameTeam
     */
    select?: GameTeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameTeam
     */
    omit?: GameTeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameTeamInclude<ExtArgs> | null
    where?: GameTeamWhereInput
    orderBy?: GameTeamOrderByWithRelationInput | GameTeamOrderByWithRelationInput[]
    cursor?: GameTeamWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameTeamScalarFieldEnum | GameTeamScalarFieldEnum[]
  }

  /**
   * Team.inviteCodes
   */
  export type Team$inviteCodesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InviteCode
     */
    select?: InviteCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InviteCode
     */
    omit?: InviteCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteCodeInclude<ExtArgs> | null
    where?: InviteCodeWhereInput
    orderBy?: InviteCodeOrderByWithRelationInput | InviteCodeOrderByWithRelationInput[]
    cursor?: InviteCodeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InviteCodeScalarFieldEnum | InviteCodeScalarFieldEnum[]
  }

  /**
   * Team.finalReviewAssets
   */
  export type Team$finalReviewAssetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetFinalReviewTeam
     */
    select?: AssetFinalReviewTeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetFinalReviewTeam
     */
    omit?: AssetFinalReviewTeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetFinalReviewTeamInclude<ExtArgs> | null
    where?: AssetFinalReviewTeamWhereInput
    orderBy?: AssetFinalReviewTeamOrderByWithRelationInput | AssetFinalReviewTeamOrderByWithRelationInput[]
    cursor?: AssetFinalReviewTeamWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssetFinalReviewTeamScalarFieldEnum | AssetFinalReviewTeamScalarFieldEnum[]
  }

  /**
   * Team without action
   */
  export type TeamDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
  }


  /**
   * Model Game
   */

  export type AggregateGame = {
    _count: GameCountAggregateOutputType | null
    _avg: GameAvgAggregateOutputType | null
    _sum: GameSumAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  export type GameAvgAggregateOutputType = {
    id: number | null
    eligiblePhase1Voters: number | null
    eligiblePhase2Voters: number | null
  }

  export type GameSumAggregateOutputType = {
    id: number | null
    eligiblePhase1Voters: number | null
    eligiblePhase2Voters: number | null
  }

  export type GameMinAggregateOutputType = {
    id: number | null
    name: string | null
    eligiblePhase1Voters: number | null
    eligiblePhase2Voters: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GameMaxAggregateOutputType = {
    id: number | null
    name: string | null
    eligiblePhase1Voters: number | null
    eligiblePhase2Voters: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GameCountAggregateOutputType = {
    id: number
    name: number
    assetCategories: number
    eligiblePhase1Voters: number
    eligiblePhase2Voters: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GameAvgAggregateInputType = {
    id?: true
    eligiblePhase1Voters?: true
    eligiblePhase2Voters?: true
  }

  export type GameSumAggregateInputType = {
    id?: true
    eligiblePhase1Voters?: true
    eligiblePhase2Voters?: true
  }

  export type GameMinAggregateInputType = {
    id?: true
    name?: true
    eligiblePhase1Voters?: true
    eligiblePhase2Voters?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GameMaxAggregateInputType = {
    id?: true
    name?: true
    eligiblePhase1Voters?: true
    eligiblePhase2Voters?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GameCountAggregateInputType = {
    id?: true
    name?: true
    assetCategories?: true
    eligiblePhase1Voters?: true
    eligiblePhase2Voters?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GameAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Game to aggregate.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Games
    **/
    _count?: true | GameCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameMaxAggregateInputType
  }

  export type GetGameAggregateType<T extends GameAggregateArgs> = {
        [P in keyof T & keyof AggregateGame]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGame[P]>
      : GetScalarType<T[P], AggregateGame[P]>
  }




  export type GameGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameWhereInput
    orderBy?: GameOrderByWithAggregationInput | GameOrderByWithAggregationInput[]
    by: GameScalarFieldEnum[] | GameScalarFieldEnum
    having?: GameScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameCountAggregateInputType | true
    _avg?: GameAvgAggregateInputType
    _sum?: GameSumAggregateInputType
    _min?: GameMinAggregateInputType
    _max?: GameMaxAggregateInputType
  }

  export type GameGroupByOutputType = {
    id: number
    name: string
    assetCategories: string[]
    eligiblePhase1Voters: number
    eligiblePhase2Voters: number
    createdAt: Date
    updatedAt: Date
    _count: GameCountAggregateOutputType | null
    _avg: GameAvgAggregateOutputType | null
    _sum: GameSumAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  type GetGameGroupByPayload<T extends GameGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameGroupByOutputType[P]>
            : GetScalarType<T[P], GameGroupByOutputType[P]>
        }
      >
    >


  export type GameSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    assetCategories?: boolean
    eligiblePhase1Voters?: boolean
    eligiblePhase2Voters?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    gameTeams?: boolean | Game$gameTeamsArgs<ExtArgs>
    gameOwners?: boolean | Game$gameOwnersArgs<ExtArgs>
    assets?: boolean | Game$assetsArgs<ExtArgs>
    userInteractions?: boolean | Game$userInteractionsArgs<ExtArgs>
    _count?: boolean | GameCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["game"]>

  export type GameSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    assetCategories?: boolean
    eligiblePhase1Voters?: boolean
    eligiblePhase2Voters?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["game"]>

  export type GameSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    assetCategories?: boolean
    eligiblePhase1Voters?: boolean
    eligiblePhase2Voters?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["game"]>

  export type GameSelectScalar = {
    id?: boolean
    name?: boolean
    assetCategories?: boolean
    eligiblePhase1Voters?: boolean
    eligiblePhase2Voters?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type GameOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "assetCategories" | "eligiblePhase1Voters" | "eligiblePhase2Voters" | "createdAt" | "updatedAt", ExtArgs["result"]["game"]>
  export type GameInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gameTeams?: boolean | Game$gameTeamsArgs<ExtArgs>
    gameOwners?: boolean | Game$gameOwnersArgs<ExtArgs>
    assets?: boolean | Game$assetsArgs<ExtArgs>
    userInteractions?: boolean | Game$userInteractionsArgs<ExtArgs>
    _count?: boolean | GameCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GameIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type GameIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $GamePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Game"
    objects: {
      gameTeams: Prisma.$GameTeamPayload<ExtArgs>[]
      gameOwners: Prisma.$GameOwnerPayload<ExtArgs>[]
      assets: Prisma.$AssetPayload<ExtArgs>[]
      userInteractions: Prisma.$UserAssetInteractionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      assetCategories: string[]
      eligiblePhase1Voters: number
      eligiblePhase2Voters: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["game"]>
    composites: {}
  }

  type GameGetPayload<S extends boolean | null | undefined | GameDefaultArgs> = $Result.GetResult<Prisma.$GamePayload, S>

  type GameCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GameFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GameCountAggregateInputType | true
    }

  export interface GameDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Game'], meta: { name: 'Game' } }
    /**
     * Find zero or one Game that matches the filter.
     * @param {GameFindUniqueArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GameFindUniqueArgs>(args: SelectSubset<T, GameFindUniqueArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Game that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GameFindUniqueOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GameFindUniqueOrThrowArgs>(args: SelectSubset<T, GameFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Game that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindFirstArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GameFindFirstArgs>(args?: SelectSubset<T, GameFindFirstArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Game that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindFirstOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GameFindFirstOrThrowArgs>(args?: SelectSubset<T, GameFindFirstOrThrowArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Games that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Games
     * const games = await prisma.game.findMany()
     * 
     * // Get first 10 Games
     * const games = await prisma.game.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameWithIdOnly = await prisma.game.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GameFindManyArgs>(args?: SelectSubset<T, GameFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Game.
     * @param {GameCreateArgs} args - Arguments to create a Game.
     * @example
     * // Create one Game
     * const Game = await prisma.game.create({
     *   data: {
     *     // ... data to create a Game
     *   }
     * })
     * 
     */
    create<T extends GameCreateArgs>(args: SelectSubset<T, GameCreateArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Games.
     * @param {GameCreateManyArgs} args - Arguments to create many Games.
     * @example
     * // Create many Games
     * const game = await prisma.game.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GameCreateManyArgs>(args?: SelectSubset<T, GameCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Games and returns the data saved in the database.
     * @param {GameCreateManyAndReturnArgs} args - Arguments to create many Games.
     * @example
     * // Create many Games
     * const game = await prisma.game.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Games and only return the `id`
     * const gameWithIdOnly = await prisma.game.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GameCreateManyAndReturnArgs>(args?: SelectSubset<T, GameCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Game.
     * @param {GameDeleteArgs} args - Arguments to delete one Game.
     * @example
     * // Delete one Game
     * const Game = await prisma.game.delete({
     *   where: {
     *     // ... filter to delete one Game
     *   }
     * })
     * 
     */
    delete<T extends GameDeleteArgs>(args: SelectSubset<T, GameDeleteArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Game.
     * @param {GameUpdateArgs} args - Arguments to update one Game.
     * @example
     * // Update one Game
     * const game = await prisma.game.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GameUpdateArgs>(args: SelectSubset<T, GameUpdateArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Games.
     * @param {GameDeleteManyArgs} args - Arguments to filter Games to delete.
     * @example
     * // Delete a few Games
     * const { count } = await prisma.game.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GameDeleteManyArgs>(args?: SelectSubset<T, GameDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Games
     * const game = await prisma.game.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GameUpdateManyArgs>(args: SelectSubset<T, GameUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Games and returns the data updated in the database.
     * @param {GameUpdateManyAndReturnArgs} args - Arguments to update many Games.
     * @example
     * // Update many Games
     * const game = await prisma.game.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Games and only return the `id`
     * const gameWithIdOnly = await prisma.game.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GameUpdateManyAndReturnArgs>(args: SelectSubset<T, GameUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Game.
     * @param {GameUpsertArgs} args - Arguments to update or create a Game.
     * @example
     * // Update or create a Game
     * const game = await prisma.game.upsert({
     *   create: {
     *     // ... data to create a Game
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Game we want to update
     *   }
     * })
     */
    upsert<T extends GameUpsertArgs>(args: SelectSubset<T, GameUpsertArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameCountArgs} args - Arguments to filter Games to count.
     * @example
     * // Count the number of Games
     * const count = await prisma.game.count({
     *   where: {
     *     // ... the filter for the Games we want to count
     *   }
     * })
    **/
    count<T extends GameCountArgs>(
      args?: Subset<T, GameCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameAggregateArgs>(args: Subset<T, GameAggregateArgs>): Prisma.PrismaPromise<GetGameAggregateType<T>>

    /**
     * Group by Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameGroupByArgs['orderBy'] }
        : { orderBy?: GameGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Game model
   */
  readonly fields: GameFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Game.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    gameTeams<T extends Game$gameTeamsArgs<ExtArgs> = {}>(args?: Subset<T, Game$gameTeamsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameTeamPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    gameOwners<T extends Game$gameOwnersArgs<ExtArgs> = {}>(args?: Subset<T, Game$gameOwnersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameOwnerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assets<T extends Game$assetsArgs<ExtArgs> = {}>(args?: Subset<T, Game$assetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userInteractions<T extends Game$userInteractionsArgs<ExtArgs> = {}>(args?: Subset<T, Game$userInteractionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAssetInteractionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Game model
   */
  interface GameFieldRefs {
    readonly id: FieldRef<"Game", 'Int'>
    readonly name: FieldRef<"Game", 'String'>
    readonly assetCategories: FieldRef<"Game", 'String[]'>
    readonly eligiblePhase1Voters: FieldRef<"Game", 'Int'>
    readonly eligiblePhase2Voters: FieldRef<"Game", 'Int'>
    readonly createdAt: FieldRef<"Game", 'DateTime'>
    readonly updatedAt: FieldRef<"Game", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Game findUnique
   */
  export type GameFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game findUniqueOrThrow
   */
  export type GameFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game findFirst
   */
  export type GameFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games.
     */
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Game findFirstOrThrow
   */
  export type GameFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games.
     */
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Game findMany
   */
  export type GameFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Games to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Game create
   */
  export type GameCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The data needed to create a Game.
     */
    data: XOR<GameCreateInput, GameUncheckedCreateInput>
  }

  /**
   * Game createMany
   */
  export type GameCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Games.
     */
    data: GameCreateManyInput | GameCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Game createManyAndReturn
   */
  export type GameCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * The data used to create many Games.
     */
    data: GameCreateManyInput | GameCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Game update
   */
  export type GameUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The data needed to update a Game.
     */
    data: XOR<GameUpdateInput, GameUncheckedUpdateInput>
    /**
     * Choose, which Game to update.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game updateMany
   */
  export type GameUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Games.
     */
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyInput>
    /**
     * Filter which Games to update
     */
    where?: GameWhereInput
    /**
     * Limit how many Games to update.
     */
    limit?: number
  }

  /**
   * Game updateManyAndReturn
   */
  export type GameUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * The data used to update Games.
     */
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyInput>
    /**
     * Filter which Games to update
     */
    where?: GameWhereInput
    /**
     * Limit how many Games to update.
     */
    limit?: number
  }

  /**
   * Game upsert
   */
  export type GameUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The filter to search for the Game to update in case it exists.
     */
    where: GameWhereUniqueInput
    /**
     * In case the Game found by the `where` argument doesn't exist, create a new Game with this data.
     */
    create: XOR<GameCreateInput, GameUncheckedCreateInput>
    /**
     * In case the Game was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameUpdateInput, GameUncheckedUpdateInput>
  }

  /**
   * Game delete
   */
  export type GameDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter which Game to delete.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game deleteMany
   */
  export type GameDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Games to delete
     */
    where?: GameWhereInput
    /**
     * Limit how many Games to delete.
     */
    limit?: number
  }

  /**
   * Game.gameTeams
   */
  export type Game$gameTeamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameTeam
     */
    select?: GameTeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameTeam
     */
    omit?: GameTeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameTeamInclude<ExtArgs> | null
    where?: GameTeamWhereInput
    orderBy?: GameTeamOrderByWithRelationInput | GameTeamOrderByWithRelationInput[]
    cursor?: GameTeamWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameTeamScalarFieldEnum | GameTeamScalarFieldEnum[]
  }

  /**
   * Game.gameOwners
   */
  export type Game$gameOwnersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameOwner
     */
    select?: GameOwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameOwner
     */
    omit?: GameOwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameOwnerInclude<ExtArgs> | null
    where?: GameOwnerWhereInput
    orderBy?: GameOwnerOrderByWithRelationInput | GameOwnerOrderByWithRelationInput[]
    cursor?: GameOwnerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameOwnerScalarFieldEnum | GameOwnerScalarFieldEnum[]
  }

  /**
   * Game.assets
   */
  export type Game$assetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    where?: AssetWhereInput
    orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
    cursor?: AssetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssetScalarFieldEnum | AssetScalarFieldEnum[]
  }

  /**
   * Game.userInteractions
   */
  export type Game$userInteractionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAssetInteraction
     */
    select?: UserAssetInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAssetInteraction
     */
    omit?: UserAssetInteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAssetInteractionInclude<ExtArgs> | null
    where?: UserAssetInteractionWhereInput
    orderBy?: UserAssetInteractionOrderByWithRelationInput | UserAssetInteractionOrderByWithRelationInput[]
    cursor?: UserAssetInteractionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserAssetInteractionScalarFieldEnum | UserAssetInteractionScalarFieldEnum[]
  }

  /**
   * Game without action
   */
  export type GameDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
  }


  /**
   * Model GameTeam
   */

  export type AggregateGameTeam = {
    _count: GameTeamCountAggregateOutputType | null
    _avg: GameTeamAvgAggregateOutputType | null
    _sum: GameTeamSumAggregateOutputType | null
    _min: GameTeamMinAggregateOutputType | null
    _max: GameTeamMaxAggregateOutputType | null
  }

  export type GameTeamAvgAggregateOutputType = {
    id: number | null
    game_id: number | null
    team_id: number | null
  }

  export type GameTeamSumAggregateOutputType = {
    id: number | null
    game_id: number | null
    team_id: number | null
  }

  export type GameTeamMinAggregateOutputType = {
    id: number | null
    game_id: number | null
    team_id: number | null
    startedAt: Date | null
    endedAt: Date | null
  }

  export type GameTeamMaxAggregateOutputType = {
    id: number | null
    game_id: number | null
    team_id: number | null
    startedAt: Date | null
    endedAt: Date | null
  }

  export type GameTeamCountAggregateOutputType = {
    id: number
    game_id: number
    team_id: number
    startedAt: number
    endedAt: number
    _all: number
  }


  export type GameTeamAvgAggregateInputType = {
    id?: true
    game_id?: true
    team_id?: true
  }

  export type GameTeamSumAggregateInputType = {
    id?: true
    game_id?: true
    team_id?: true
  }

  export type GameTeamMinAggregateInputType = {
    id?: true
    game_id?: true
    team_id?: true
    startedAt?: true
    endedAt?: true
  }

  export type GameTeamMaxAggregateInputType = {
    id?: true
    game_id?: true
    team_id?: true
    startedAt?: true
    endedAt?: true
  }

  export type GameTeamCountAggregateInputType = {
    id?: true
    game_id?: true
    team_id?: true
    startedAt?: true
    endedAt?: true
    _all?: true
  }

  export type GameTeamAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameTeam to aggregate.
     */
    where?: GameTeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameTeams to fetch.
     */
    orderBy?: GameTeamOrderByWithRelationInput | GameTeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameTeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameTeams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameTeams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GameTeams
    **/
    _count?: true | GameTeamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameTeamAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameTeamSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameTeamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameTeamMaxAggregateInputType
  }

  export type GetGameTeamAggregateType<T extends GameTeamAggregateArgs> = {
        [P in keyof T & keyof AggregateGameTeam]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGameTeam[P]>
      : GetScalarType<T[P], AggregateGameTeam[P]>
  }




  export type GameTeamGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameTeamWhereInput
    orderBy?: GameTeamOrderByWithAggregationInput | GameTeamOrderByWithAggregationInput[]
    by: GameTeamScalarFieldEnum[] | GameTeamScalarFieldEnum
    having?: GameTeamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameTeamCountAggregateInputType | true
    _avg?: GameTeamAvgAggregateInputType
    _sum?: GameTeamSumAggregateInputType
    _min?: GameTeamMinAggregateInputType
    _max?: GameTeamMaxAggregateInputType
  }

  export type GameTeamGroupByOutputType = {
    id: number
    game_id: number
    team_id: number
    startedAt: Date
    endedAt: Date | null
    _count: GameTeamCountAggregateOutputType | null
    _avg: GameTeamAvgAggregateOutputType | null
    _sum: GameTeamSumAggregateOutputType | null
    _min: GameTeamMinAggregateOutputType | null
    _max: GameTeamMaxAggregateOutputType | null
  }

  type GetGameTeamGroupByPayload<T extends GameTeamGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameTeamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameTeamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameTeamGroupByOutputType[P]>
            : GetScalarType<T[P], GameTeamGroupByOutputType[P]>
        }
      >
    >


  export type GameTeamSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    game_id?: boolean
    team_id?: boolean
    startedAt?: boolean
    endedAt?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameTeam"]>

  export type GameTeamSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    game_id?: boolean
    team_id?: boolean
    startedAt?: boolean
    endedAt?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameTeam"]>

  export type GameTeamSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    game_id?: boolean
    team_id?: boolean
    startedAt?: boolean
    endedAt?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameTeam"]>

  export type GameTeamSelectScalar = {
    id?: boolean
    game_id?: boolean
    team_id?: boolean
    startedAt?: boolean
    endedAt?: boolean
  }

  export type GameTeamOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "game_id" | "team_id" | "startedAt" | "endedAt", ExtArgs["result"]["gameTeam"]>
  export type GameTeamInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }
  export type GameTeamIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }
  export type GameTeamIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }

  export type $GameTeamPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GameTeam"
    objects: {
      game: Prisma.$GamePayload<ExtArgs>
      team: Prisma.$TeamPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      game_id: number
      team_id: number
      startedAt: Date
      endedAt: Date | null
    }, ExtArgs["result"]["gameTeam"]>
    composites: {}
  }

  type GameTeamGetPayload<S extends boolean | null | undefined | GameTeamDefaultArgs> = $Result.GetResult<Prisma.$GameTeamPayload, S>

  type GameTeamCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GameTeamFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GameTeamCountAggregateInputType | true
    }

  export interface GameTeamDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GameTeam'], meta: { name: 'GameTeam' } }
    /**
     * Find zero or one GameTeam that matches the filter.
     * @param {GameTeamFindUniqueArgs} args - Arguments to find a GameTeam
     * @example
     * // Get one GameTeam
     * const gameTeam = await prisma.gameTeam.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GameTeamFindUniqueArgs>(args: SelectSubset<T, GameTeamFindUniqueArgs<ExtArgs>>): Prisma__GameTeamClient<$Result.GetResult<Prisma.$GameTeamPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GameTeam that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GameTeamFindUniqueOrThrowArgs} args - Arguments to find a GameTeam
     * @example
     * // Get one GameTeam
     * const gameTeam = await prisma.gameTeam.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GameTeamFindUniqueOrThrowArgs>(args: SelectSubset<T, GameTeamFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GameTeamClient<$Result.GetResult<Prisma.$GameTeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameTeam that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameTeamFindFirstArgs} args - Arguments to find a GameTeam
     * @example
     * // Get one GameTeam
     * const gameTeam = await prisma.gameTeam.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GameTeamFindFirstArgs>(args?: SelectSubset<T, GameTeamFindFirstArgs<ExtArgs>>): Prisma__GameTeamClient<$Result.GetResult<Prisma.$GameTeamPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameTeam that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameTeamFindFirstOrThrowArgs} args - Arguments to find a GameTeam
     * @example
     * // Get one GameTeam
     * const gameTeam = await prisma.gameTeam.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GameTeamFindFirstOrThrowArgs>(args?: SelectSubset<T, GameTeamFindFirstOrThrowArgs<ExtArgs>>): Prisma__GameTeamClient<$Result.GetResult<Prisma.$GameTeamPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GameTeams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameTeamFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GameTeams
     * const gameTeams = await prisma.gameTeam.findMany()
     * 
     * // Get first 10 GameTeams
     * const gameTeams = await prisma.gameTeam.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameTeamWithIdOnly = await prisma.gameTeam.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GameTeamFindManyArgs>(args?: SelectSubset<T, GameTeamFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameTeamPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GameTeam.
     * @param {GameTeamCreateArgs} args - Arguments to create a GameTeam.
     * @example
     * // Create one GameTeam
     * const GameTeam = await prisma.gameTeam.create({
     *   data: {
     *     // ... data to create a GameTeam
     *   }
     * })
     * 
     */
    create<T extends GameTeamCreateArgs>(args: SelectSubset<T, GameTeamCreateArgs<ExtArgs>>): Prisma__GameTeamClient<$Result.GetResult<Prisma.$GameTeamPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GameTeams.
     * @param {GameTeamCreateManyArgs} args - Arguments to create many GameTeams.
     * @example
     * // Create many GameTeams
     * const gameTeam = await prisma.gameTeam.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GameTeamCreateManyArgs>(args?: SelectSubset<T, GameTeamCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GameTeams and returns the data saved in the database.
     * @param {GameTeamCreateManyAndReturnArgs} args - Arguments to create many GameTeams.
     * @example
     * // Create many GameTeams
     * const gameTeam = await prisma.gameTeam.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GameTeams and only return the `id`
     * const gameTeamWithIdOnly = await prisma.gameTeam.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GameTeamCreateManyAndReturnArgs>(args?: SelectSubset<T, GameTeamCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameTeamPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GameTeam.
     * @param {GameTeamDeleteArgs} args - Arguments to delete one GameTeam.
     * @example
     * // Delete one GameTeam
     * const GameTeam = await prisma.gameTeam.delete({
     *   where: {
     *     // ... filter to delete one GameTeam
     *   }
     * })
     * 
     */
    delete<T extends GameTeamDeleteArgs>(args: SelectSubset<T, GameTeamDeleteArgs<ExtArgs>>): Prisma__GameTeamClient<$Result.GetResult<Prisma.$GameTeamPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GameTeam.
     * @param {GameTeamUpdateArgs} args - Arguments to update one GameTeam.
     * @example
     * // Update one GameTeam
     * const gameTeam = await prisma.gameTeam.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GameTeamUpdateArgs>(args: SelectSubset<T, GameTeamUpdateArgs<ExtArgs>>): Prisma__GameTeamClient<$Result.GetResult<Prisma.$GameTeamPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GameTeams.
     * @param {GameTeamDeleteManyArgs} args - Arguments to filter GameTeams to delete.
     * @example
     * // Delete a few GameTeams
     * const { count } = await prisma.gameTeam.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GameTeamDeleteManyArgs>(args?: SelectSubset<T, GameTeamDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameTeams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameTeamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GameTeams
     * const gameTeam = await prisma.gameTeam.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GameTeamUpdateManyArgs>(args: SelectSubset<T, GameTeamUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameTeams and returns the data updated in the database.
     * @param {GameTeamUpdateManyAndReturnArgs} args - Arguments to update many GameTeams.
     * @example
     * // Update many GameTeams
     * const gameTeam = await prisma.gameTeam.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GameTeams and only return the `id`
     * const gameTeamWithIdOnly = await prisma.gameTeam.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GameTeamUpdateManyAndReturnArgs>(args: SelectSubset<T, GameTeamUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameTeamPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GameTeam.
     * @param {GameTeamUpsertArgs} args - Arguments to update or create a GameTeam.
     * @example
     * // Update or create a GameTeam
     * const gameTeam = await prisma.gameTeam.upsert({
     *   create: {
     *     // ... data to create a GameTeam
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GameTeam we want to update
     *   }
     * })
     */
    upsert<T extends GameTeamUpsertArgs>(args: SelectSubset<T, GameTeamUpsertArgs<ExtArgs>>): Prisma__GameTeamClient<$Result.GetResult<Prisma.$GameTeamPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GameTeams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameTeamCountArgs} args - Arguments to filter GameTeams to count.
     * @example
     * // Count the number of GameTeams
     * const count = await prisma.gameTeam.count({
     *   where: {
     *     // ... the filter for the GameTeams we want to count
     *   }
     * })
    **/
    count<T extends GameTeamCountArgs>(
      args?: Subset<T, GameTeamCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameTeamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GameTeam.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameTeamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameTeamAggregateArgs>(args: Subset<T, GameTeamAggregateArgs>): Prisma.PrismaPromise<GetGameTeamAggregateType<T>>

    /**
     * Group by GameTeam.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameTeamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameTeamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameTeamGroupByArgs['orderBy'] }
        : { orderBy?: GameTeamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameTeamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameTeamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GameTeam model
   */
  readonly fields: GameTeamFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GameTeam.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameTeamClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    game<T extends GameDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GameDefaultArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    team<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GameTeam model
   */
  interface GameTeamFieldRefs {
    readonly id: FieldRef<"GameTeam", 'Int'>
    readonly game_id: FieldRef<"GameTeam", 'Int'>
    readonly team_id: FieldRef<"GameTeam", 'Int'>
    readonly startedAt: FieldRef<"GameTeam", 'DateTime'>
    readonly endedAt: FieldRef<"GameTeam", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GameTeam findUnique
   */
  export type GameTeamFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameTeam
     */
    select?: GameTeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameTeam
     */
    omit?: GameTeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameTeamInclude<ExtArgs> | null
    /**
     * Filter, which GameTeam to fetch.
     */
    where: GameTeamWhereUniqueInput
  }

  /**
   * GameTeam findUniqueOrThrow
   */
  export type GameTeamFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameTeam
     */
    select?: GameTeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameTeam
     */
    omit?: GameTeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameTeamInclude<ExtArgs> | null
    /**
     * Filter, which GameTeam to fetch.
     */
    where: GameTeamWhereUniqueInput
  }

  /**
   * GameTeam findFirst
   */
  export type GameTeamFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameTeam
     */
    select?: GameTeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameTeam
     */
    omit?: GameTeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameTeamInclude<ExtArgs> | null
    /**
     * Filter, which GameTeam to fetch.
     */
    where?: GameTeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameTeams to fetch.
     */
    orderBy?: GameTeamOrderByWithRelationInput | GameTeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameTeams.
     */
    cursor?: GameTeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameTeams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameTeams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameTeams.
     */
    distinct?: GameTeamScalarFieldEnum | GameTeamScalarFieldEnum[]
  }

  /**
   * GameTeam findFirstOrThrow
   */
  export type GameTeamFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameTeam
     */
    select?: GameTeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameTeam
     */
    omit?: GameTeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameTeamInclude<ExtArgs> | null
    /**
     * Filter, which GameTeam to fetch.
     */
    where?: GameTeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameTeams to fetch.
     */
    orderBy?: GameTeamOrderByWithRelationInput | GameTeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameTeams.
     */
    cursor?: GameTeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameTeams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameTeams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameTeams.
     */
    distinct?: GameTeamScalarFieldEnum | GameTeamScalarFieldEnum[]
  }

  /**
   * GameTeam findMany
   */
  export type GameTeamFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameTeam
     */
    select?: GameTeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameTeam
     */
    omit?: GameTeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameTeamInclude<ExtArgs> | null
    /**
     * Filter, which GameTeams to fetch.
     */
    where?: GameTeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameTeams to fetch.
     */
    orderBy?: GameTeamOrderByWithRelationInput | GameTeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GameTeams.
     */
    cursor?: GameTeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameTeams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameTeams.
     */
    skip?: number
    distinct?: GameTeamScalarFieldEnum | GameTeamScalarFieldEnum[]
  }

  /**
   * GameTeam create
   */
  export type GameTeamCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameTeam
     */
    select?: GameTeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameTeam
     */
    omit?: GameTeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameTeamInclude<ExtArgs> | null
    /**
     * The data needed to create a GameTeam.
     */
    data: XOR<GameTeamCreateInput, GameTeamUncheckedCreateInput>
  }

  /**
   * GameTeam createMany
   */
  export type GameTeamCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GameTeams.
     */
    data: GameTeamCreateManyInput | GameTeamCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GameTeam createManyAndReturn
   */
  export type GameTeamCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameTeam
     */
    select?: GameTeamSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GameTeam
     */
    omit?: GameTeamOmit<ExtArgs> | null
    /**
     * The data used to create many GameTeams.
     */
    data: GameTeamCreateManyInput | GameTeamCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameTeamIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GameTeam update
   */
  export type GameTeamUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameTeam
     */
    select?: GameTeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameTeam
     */
    omit?: GameTeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameTeamInclude<ExtArgs> | null
    /**
     * The data needed to update a GameTeam.
     */
    data: XOR<GameTeamUpdateInput, GameTeamUncheckedUpdateInput>
    /**
     * Choose, which GameTeam to update.
     */
    where: GameTeamWhereUniqueInput
  }

  /**
   * GameTeam updateMany
   */
  export type GameTeamUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GameTeams.
     */
    data: XOR<GameTeamUpdateManyMutationInput, GameTeamUncheckedUpdateManyInput>
    /**
     * Filter which GameTeams to update
     */
    where?: GameTeamWhereInput
    /**
     * Limit how many GameTeams to update.
     */
    limit?: number
  }

  /**
   * GameTeam updateManyAndReturn
   */
  export type GameTeamUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameTeam
     */
    select?: GameTeamSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GameTeam
     */
    omit?: GameTeamOmit<ExtArgs> | null
    /**
     * The data used to update GameTeams.
     */
    data: XOR<GameTeamUpdateManyMutationInput, GameTeamUncheckedUpdateManyInput>
    /**
     * Filter which GameTeams to update
     */
    where?: GameTeamWhereInput
    /**
     * Limit how many GameTeams to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameTeamIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * GameTeam upsert
   */
  export type GameTeamUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameTeam
     */
    select?: GameTeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameTeam
     */
    omit?: GameTeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameTeamInclude<ExtArgs> | null
    /**
     * The filter to search for the GameTeam to update in case it exists.
     */
    where: GameTeamWhereUniqueInput
    /**
     * In case the GameTeam found by the `where` argument doesn't exist, create a new GameTeam with this data.
     */
    create: XOR<GameTeamCreateInput, GameTeamUncheckedCreateInput>
    /**
     * In case the GameTeam was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameTeamUpdateInput, GameTeamUncheckedUpdateInput>
  }

  /**
   * GameTeam delete
   */
  export type GameTeamDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameTeam
     */
    select?: GameTeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameTeam
     */
    omit?: GameTeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameTeamInclude<ExtArgs> | null
    /**
     * Filter which GameTeam to delete.
     */
    where: GameTeamWhereUniqueInput
  }

  /**
   * GameTeam deleteMany
   */
  export type GameTeamDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameTeams to delete
     */
    where?: GameTeamWhereInput
    /**
     * Limit how many GameTeams to delete.
     */
    limit?: number
  }

  /**
   * GameTeam without action
   */
  export type GameTeamDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameTeam
     */
    select?: GameTeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameTeam
     */
    omit?: GameTeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameTeamInclude<ExtArgs> | null
  }


  /**
   * Model InviteCode
   */

  export type AggregateInviteCode = {
    _count: InviteCodeCountAggregateOutputType | null
    _avg: InviteCodeAvgAggregateOutputType | null
    _sum: InviteCodeSumAggregateOutputType | null
    _min: InviteCodeMinAggregateOutputType | null
    _max: InviteCodeMaxAggregateOutputType | null
  }

  export type InviteCodeAvgAggregateOutputType = {
    id: number | null
    team_id: number | null
    ownedGameIds: number | null
  }

  export type InviteCodeSumAggregateOutputType = {
    id: number | null
    team_id: number | null
    ownedGameIds: number[]
  }

  export type InviteCodeMinAggregateOutputType = {
    id: number | null
    code: string | null
    team_id: number | null
    role: $Enums.UserRole | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InviteCodeMaxAggregateOutputType = {
    id: number | null
    code: string | null
    team_id: number | null
    role: $Enums.UserRole | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InviteCodeCountAggregateOutputType = {
    id: number
    code: number
    team_id: number
    role: number
    description: number
    ownedGameIds: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type InviteCodeAvgAggregateInputType = {
    id?: true
    team_id?: true
    ownedGameIds?: true
  }

  export type InviteCodeSumAggregateInputType = {
    id?: true
    team_id?: true
    ownedGameIds?: true
  }

  export type InviteCodeMinAggregateInputType = {
    id?: true
    code?: true
    team_id?: true
    role?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InviteCodeMaxAggregateInputType = {
    id?: true
    code?: true
    team_id?: true
    role?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InviteCodeCountAggregateInputType = {
    id?: true
    code?: true
    team_id?: true
    role?: true
    description?: true
    ownedGameIds?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type InviteCodeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InviteCode to aggregate.
     */
    where?: InviteCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InviteCodes to fetch.
     */
    orderBy?: InviteCodeOrderByWithRelationInput | InviteCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InviteCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InviteCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InviteCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InviteCodes
    **/
    _count?: true | InviteCodeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InviteCodeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InviteCodeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InviteCodeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InviteCodeMaxAggregateInputType
  }

  export type GetInviteCodeAggregateType<T extends InviteCodeAggregateArgs> = {
        [P in keyof T & keyof AggregateInviteCode]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInviteCode[P]>
      : GetScalarType<T[P], AggregateInviteCode[P]>
  }




  export type InviteCodeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InviteCodeWhereInput
    orderBy?: InviteCodeOrderByWithAggregationInput | InviteCodeOrderByWithAggregationInput[]
    by: InviteCodeScalarFieldEnum[] | InviteCodeScalarFieldEnum
    having?: InviteCodeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InviteCodeCountAggregateInputType | true
    _avg?: InviteCodeAvgAggregateInputType
    _sum?: InviteCodeSumAggregateInputType
    _min?: InviteCodeMinAggregateInputType
    _max?: InviteCodeMaxAggregateInputType
  }

  export type InviteCodeGroupByOutputType = {
    id: number
    code: string
    team_id: number
    role: $Enums.UserRole
    description: string | null
    ownedGameIds: number[]
    createdAt: Date
    updatedAt: Date
    _count: InviteCodeCountAggregateOutputType | null
    _avg: InviteCodeAvgAggregateOutputType | null
    _sum: InviteCodeSumAggregateOutputType | null
    _min: InviteCodeMinAggregateOutputType | null
    _max: InviteCodeMaxAggregateOutputType | null
  }

  type GetInviteCodeGroupByPayload<T extends InviteCodeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InviteCodeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InviteCodeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InviteCodeGroupByOutputType[P]>
            : GetScalarType<T[P], InviteCodeGroupByOutputType[P]>
        }
      >
    >


  export type InviteCodeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    team_id?: boolean
    role?: boolean
    description?: boolean
    ownedGameIds?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
    users?: boolean | InviteCode$usersArgs<ExtArgs>
    _count?: boolean | InviteCodeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inviteCode"]>

  export type InviteCodeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    team_id?: boolean
    role?: boolean
    description?: boolean
    ownedGameIds?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inviteCode"]>

  export type InviteCodeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    team_id?: boolean
    role?: boolean
    description?: boolean
    ownedGameIds?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inviteCode"]>

  export type InviteCodeSelectScalar = {
    id?: boolean
    code?: boolean
    team_id?: boolean
    role?: boolean
    description?: boolean
    ownedGameIds?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type InviteCodeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "code" | "team_id" | "role" | "description" | "ownedGameIds" | "createdAt" | "updatedAt", ExtArgs["result"]["inviteCode"]>
  export type InviteCodeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
    users?: boolean | InviteCode$usersArgs<ExtArgs>
    _count?: boolean | InviteCodeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type InviteCodeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }
  export type InviteCodeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }

  export type $InviteCodePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InviteCode"
    objects: {
      team: Prisma.$TeamPayload<ExtArgs>
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      code: string
      team_id: number
      role: $Enums.UserRole
      description: string | null
      ownedGameIds: number[]
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["inviteCode"]>
    composites: {}
  }

  type InviteCodeGetPayload<S extends boolean | null | undefined | InviteCodeDefaultArgs> = $Result.GetResult<Prisma.$InviteCodePayload, S>

  type InviteCodeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InviteCodeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InviteCodeCountAggregateInputType | true
    }

  export interface InviteCodeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InviteCode'], meta: { name: 'InviteCode' } }
    /**
     * Find zero or one InviteCode that matches the filter.
     * @param {InviteCodeFindUniqueArgs} args - Arguments to find a InviteCode
     * @example
     * // Get one InviteCode
     * const inviteCode = await prisma.inviteCode.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InviteCodeFindUniqueArgs>(args: SelectSubset<T, InviteCodeFindUniqueArgs<ExtArgs>>): Prisma__InviteCodeClient<$Result.GetResult<Prisma.$InviteCodePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one InviteCode that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InviteCodeFindUniqueOrThrowArgs} args - Arguments to find a InviteCode
     * @example
     * // Get one InviteCode
     * const inviteCode = await prisma.inviteCode.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InviteCodeFindUniqueOrThrowArgs>(args: SelectSubset<T, InviteCodeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InviteCodeClient<$Result.GetResult<Prisma.$InviteCodePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InviteCode that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteCodeFindFirstArgs} args - Arguments to find a InviteCode
     * @example
     * // Get one InviteCode
     * const inviteCode = await prisma.inviteCode.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InviteCodeFindFirstArgs>(args?: SelectSubset<T, InviteCodeFindFirstArgs<ExtArgs>>): Prisma__InviteCodeClient<$Result.GetResult<Prisma.$InviteCodePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InviteCode that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteCodeFindFirstOrThrowArgs} args - Arguments to find a InviteCode
     * @example
     * // Get one InviteCode
     * const inviteCode = await prisma.inviteCode.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InviteCodeFindFirstOrThrowArgs>(args?: SelectSubset<T, InviteCodeFindFirstOrThrowArgs<ExtArgs>>): Prisma__InviteCodeClient<$Result.GetResult<Prisma.$InviteCodePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more InviteCodes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteCodeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InviteCodes
     * const inviteCodes = await prisma.inviteCode.findMany()
     * 
     * // Get first 10 InviteCodes
     * const inviteCodes = await prisma.inviteCode.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inviteCodeWithIdOnly = await prisma.inviteCode.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InviteCodeFindManyArgs>(args?: SelectSubset<T, InviteCodeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InviteCodePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a InviteCode.
     * @param {InviteCodeCreateArgs} args - Arguments to create a InviteCode.
     * @example
     * // Create one InviteCode
     * const InviteCode = await prisma.inviteCode.create({
     *   data: {
     *     // ... data to create a InviteCode
     *   }
     * })
     * 
     */
    create<T extends InviteCodeCreateArgs>(args: SelectSubset<T, InviteCodeCreateArgs<ExtArgs>>): Prisma__InviteCodeClient<$Result.GetResult<Prisma.$InviteCodePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many InviteCodes.
     * @param {InviteCodeCreateManyArgs} args - Arguments to create many InviteCodes.
     * @example
     * // Create many InviteCodes
     * const inviteCode = await prisma.inviteCode.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InviteCodeCreateManyArgs>(args?: SelectSubset<T, InviteCodeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InviteCodes and returns the data saved in the database.
     * @param {InviteCodeCreateManyAndReturnArgs} args - Arguments to create many InviteCodes.
     * @example
     * // Create many InviteCodes
     * const inviteCode = await prisma.inviteCode.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InviteCodes and only return the `id`
     * const inviteCodeWithIdOnly = await prisma.inviteCode.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InviteCodeCreateManyAndReturnArgs>(args?: SelectSubset<T, InviteCodeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InviteCodePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a InviteCode.
     * @param {InviteCodeDeleteArgs} args - Arguments to delete one InviteCode.
     * @example
     * // Delete one InviteCode
     * const InviteCode = await prisma.inviteCode.delete({
     *   where: {
     *     // ... filter to delete one InviteCode
     *   }
     * })
     * 
     */
    delete<T extends InviteCodeDeleteArgs>(args: SelectSubset<T, InviteCodeDeleteArgs<ExtArgs>>): Prisma__InviteCodeClient<$Result.GetResult<Prisma.$InviteCodePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one InviteCode.
     * @param {InviteCodeUpdateArgs} args - Arguments to update one InviteCode.
     * @example
     * // Update one InviteCode
     * const inviteCode = await prisma.inviteCode.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InviteCodeUpdateArgs>(args: SelectSubset<T, InviteCodeUpdateArgs<ExtArgs>>): Prisma__InviteCodeClient<$Result.GetResult<Prisma.$InviteCodePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more InviteCodes.
     * @param {InviteCodeDeleteManyArgs} args - Arguments to filter InviteCodes to delete.
     * @example
     * // Delete a few InviteCodes
     * const { count } = await prisma.inviteCode.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InviteCodeDeleteManyArgs>(args?: SelectSubset<T, InviteCodeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InviteCodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteCodeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InviteCodes
     * const inviteCode = await prisma.inviteCode.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InviteCodeUpdateManyArgs>(args: SelectSubset<T, InviteCodeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InviteCodes and returns the data updated in the database.
     * @param {InviteCodeUpdateManyAndReturnArgs} args - Arguments to update many InviteCodes.
     * @example
     * // Update many InviteCodes
     * const inviteCode = await prisma.inviteCode.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more InviteCodes and only return the `id`
     * const inviteCodeWithIdOnly = await prisma.inviteCode.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InviteCodeUpdateManyAndReturnArgs>(args: SelectSubset<T, InviteCodeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InviteCodePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one InviteCode.
     * @param {InviteCodeUpsertArgs} args - Arguments to update or create a InviteCode.
     * @example
     * // Update or create a InviteCode
     * const inviteCode = await prisma.inviteCode.upsert({
     *   create: {
     *     // ... data to create a InviteCode
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InviteCode we want to update
     *   }
     * })
     */
    upsert<T extends InviteCodeUpsertArgs>(args: SelectSubset<T, InviteCodeUpsertArgs<ExtArgs>>): Prisma__InviteCodeClient<$Result.GetResult<Prisma.$InviteCodePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of InviteCodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteCodeCountArgs} args - Arguments to filter InviteCodes to count.
     * @example
     * // Count the number of InviteCodes
     * const count = await prisma.inviteCode.count({
     *   where: {
     *     // ... the filter for the InviteCodes we want to count
     *   }
     * })
    **/
    count<T extends InviteCodeCountArgs>(
      args?: Subset<T, InviteCodeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InviteCodeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InviteCode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteCodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InviteCodeAggregateArgs>(args: Subset<T, InviteCodeAggregateArgs>): Prisma.PrismaPromise<GetInviteCodeAggregateType<T>>

    /**
     * Group by InviteCode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteCodeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InviteCodeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InviteCodeGroupByArgs['orderBy'] }
        : { orderBy?: InviteCodeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InviteCodeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInviteCodeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InviteCode model
   */
  readonly fields: InviteCodeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InviteCode.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InviteCodeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    team<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    users<T extends InviteCode$usersArgs<ExtArgs> = {}>(args?: Subset<T, InviteCode$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InviteCode model
   */
  interface InviteCodeFieldRefs {
    readonly id: FieldRef<"InviteCode", 'Int'>
    readonly code: FieldRef<"InviteCode", 'String'>
    readonly team_id: FieldRef<"InviteCode", 'Int'>
    readonly role: FieldRef<"InviteCode", 'UserRole'>
    readonly description: FieldRef<"InviteCode", 'String'>
    readonly ownedGameIds: FieldRef<"InviteCode", 'Int[]'>
    readonly createdAt: FieldRef<"InviteCode", 'DateTime'>
    readonly updatedAt: FieldRef<"InviteCode", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * InviteCode findUnique
   */
  export type InviteCodeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InviteCode
     */
    select?: InviteCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InviteCode
     */
    omit?: InviteCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteCodeInclude<ExtArgs> | null
    /**
     * Filter, which InviteCode to fetch.
     */
    where: InviteCodeWhereUniqueInput
  }

  /**
   * InviteCode findUniqueOrThrow
   */
  export type InviteCodeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InviteCode
     */
    select?: InviteCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InviteCode
     */
    omit?: InviteCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteCodeInclude<ExtArgs> | null
    /**
     * Filter, which InviteCode to fetch.
     */
    where: InviteCodeWhereUniqueInput
  }

  /**
   * InviteCode findFirst
   */
  export type InviteCodeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InviteCode
     */
    select?: InviteCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InviteCode
     */
    omit?: InviteCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteCodeInclude<ExtArgs> | null
    /**
     * Filter, which InviteCode to fetch.
     */
    where?: InviteCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InviteCodes to fetch.
     */
    orderBy?: InviteCodeOrderByWithRelationInput | InviteCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InviteCodes.
     */
    cursor?: InviteCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InviteCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InviteCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InviteCodes.
     */
    distinct?: InviteCodeScalarFieldEnum | InviteCodeScalarFieldEnum[]
  }

  /**
   * InviteCode findFirstOrThrow
   */
  export type InviteCodeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InviteCode
     */
    select?: InviteCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InviteCode
     */
    omit?: InviteCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteCodeInclude<ExtArgs> | null
    /**
     * Filter, which InviteCode to fetch.
     */
    where?: InviteCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InviteCodes to fetch.
     */
    orderBy?: InviteCodeOrderByWithRelationInput | InviteCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InviteCodes.
     */
    cursor?: InviteCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InviteCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InviteCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InviteCodes.
     */
    distinct?: InviteCodeScalarFieldEnum | InviteCodeScalarFieldEnum[]
  }

  /**
   * InviteCode findMany
   */
  export type InviteCodeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InviteCode
     */
    select?: InviteCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InviteCode
     */
    omit?: InviteCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteCodeInclude<ExtArgs> | null
    /**
     * Filter, which InviteCodes to fetch.
     */
    where?: InviteCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InviteCodes to fetch.
     */
    orderBy?: InviteCodeOrderByWithRelationInput | InviteCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InviteCodes.
     */
    cursor?: InviteCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InviteCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InviteCodes.
     */
    skip?: number
    distinct?: InviteCodeScalarFieldEnum | InviteCodeScalarFieldEnum[]
  }

  /**
   * InviteCode create
   */
  export type InviteCodeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InviteCode
     */
    select?: InviteCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InviteCode
     */
    omit?: InviteCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteCodeInclude<ExtArgs> | null
    /**
     * The data needed to create a InviteCode.
     */
    data: XOR<InviteCodeCreateInput, InviteCodeUncheckedCreateInput>
  }

  /**
   * InviteCode createMany
   */
  export type InviteCodeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InviteCodes.
     */
    data: InviteCodeCreateManyInput | InviteCodeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InviteCode createManyAndReturn
   */
  export type InviteCodeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InviteCode
     */
    select?: InviteCodeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InviteCode
     */
    omit?: InviteCodeOmit<ExtArgs> | null
    /**
     * The data used to create many InviteCodes.
     */
    data: InviteCodeCreateManyInput | InviteCodeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteCodeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * InviteCode update
   */
  export type InviteCodeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InviteCode
     */
    select?: InviteCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InviteCode
     */
    omit?: InviteCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteCodeInclude<ExtArgs> | null
    /**
     * The data needed to update a InviteCode.
     */
    data: XOR<InviteCodeUpdateInput, InviteCodeUncheckedUpdateInput>
    /**
     * Choose, which InviteCode to update.
     */
    where: InviteCodeWhereUniqueInput
  }

  /**
   * InviteCode updateMany
   */
  export type InviteCodeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InviteCodes.
     */
    data: XOR<InviteCodeUpdateManyMutationInput, InviteCodeUncheckedUpdateManyInput>
    /**
     * Filter which InviteCodes to update
     */
    where?: InviteCodeWhereInput
    /**
     * Limit how many InviteCodes to update.
     */
    limit?: number
  }

  /**
   * InviteCode updateManyAndReturn
   */
  export type InviteCodeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InviteCode
     */
    select?: InviteCodeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InviteCode
     */
    omit?: InviteCodeOmit<ExtArgs> | null
    /**
     * The data used to update InviteCodes.
     */
    data: XOR<InviteCodeUpdateManyMutationInput, InviteCodeUncheckedUpdateManyInput>
    /**
     * Filter which InviteCodes to update
     */
    where?: InviteCodeWhereInput
    /**
     * Limit how many InviteCodes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteCodeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * InviteCode upsert
   */
  export type InviteCodeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InviteCode
     */
    select?: InviteCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InviteCode
     */
    omit?: InviteCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteCodeInclude<ExtArgs> | null
    /**
     * The filter to search for the InviteCode to update in case it exists.
     */
    where: InviteCodeWhereUniqueInput
    /**
     * In case the InviteCode found by the `where` argument doesn't exist, create a new InviteCode with this data.
     */
    create: XOR<InviteCodeCreateInput, InviteCodeUncheckedCreateInput>
    /**
     * In case the InviteCode was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InviteCodeUpdateInput, InviteCodeUncheckedUpdateInput>
  }

  /**
   * InviteCode delete
   */
  export type InviteCodeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InviteCode
     */
    select?: InviteCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InviteCode
     */
    omit?: InviteCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteCodeInclude<ExtArgs> | null
    /**
     * Filter which InviteCode to delete.
     */
    where: InviteCodeWhereUniqueInput
  }

  /**
   * InviteCode deleteMany
   */
  export type InviteCodeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InviteCodes to delete
     */
    where?: InviteCodeWhereInput
    /**
     * Limit how many InviteCodes to delete.
     */
    limit?: number
  }

  /**
   * InviteCode.users
   */
  export type InviteCode$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * InviteCode without action
   */
  export type InviteCodeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InviteCode
     */
    select?: InviteCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InviteCode
     */
    omit?: InviteCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteCodeInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    avatar: number | null
    team_id: number | null
    invite_code_id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    avatar: number | null
    team_id: number | null
    invite_code_id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
    passwordHash: string | null
    avatar: number | null
    customAvatar: string | null
    role: $Enums.UserRole | null
    isActive: boolean | null
    lastLogin: Date | null
    team_id: number | null
    invite_code_id: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
    passwordHash: string | null
    avatar: number | null
    customAvatar: string | null
    role: $Enums.UserRole | null
    isActive: boolean | null
    lastLogin: Date | null
    team_id: number | null
    invite_code_id: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    email: number
    passwordHash: number
    avatar: number
    customAvatar: number
    role: number
    isActive: number
    lastLogin: number
    team_id: number
    invite_code_id: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    avatar?: true
    team_id?: true
    invite_code_id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    avatar?: true
    team_id?: true
    invite_code_id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    passwordHash?: true
    avatar?: true
    customAvatar?: true
    role?: true
    isActive?: true
    lastLogin?: true
    team_id?: true
    invite_code_id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    passwordHash?: true
    avatar?: true
    customAvatar?: true
    role?: true
    isActive?: true
    lastLogin?: true
    team_id?: true
    invite_code_id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    passwordHash?: true
    avatar?: true
    customAvatar?: true
    role?: true
    isActive?: true
    lastLogin?: true
    team_id?: true
    invite_code_id?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    firstName: string
    lastName: string
    email: string
    passwordHash: string
    avatar: number
    customAvatar: string | null
    role: $Enums.UserRole
    isActive: boolean
    lastLogin: Date | null
    team_id: number
    invite_code_id: number | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    passwordHash?: boolean
    avatar?: boolean
    customAvatar?: boolean
    role?: boolean
    isActive?: boolean
    lastLogin?: boolean
    team_id?: boolean
    invite_code_id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
    inviteCode?: boolean | User$inviteCodeArgs<ExtArgs>
    gameOwners?: boolean | User$gameOwnersArgs<ExtArgs>
    uploadedAssets?: boolean | User$uploadedAssetsArgs<ExtArgs>
    assetRevisions?: boolean | User$assetRevisionsArgs<ExtArgs>
    assetVotes?: boolean | User$assetVotesArgs<ExtArgs>
    assetComments?: boolean | User$assetCommentsArgs<ExtArgs>
    revisionComments?: boolean | User$revisionCommentsArgs<ExtArgs>
    assetInteractions?: boolean | User$assetInteractionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    passwordHash?: boolean
    avatar?: boolean
    customAvatar?: boolean
    role?: boolean
    isActive?: boolean
    lastLogin?: boolean
    team_id?: boolean
    invite_code_id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
    inviteCode?: boolean | User$inviteCodeArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    passwordHash?: boolean
    avatar?: boolean
    customAvatar?: boolean
    role?: boolean
    isActive?: boolean
    lastLogin?: boolean
    team_id?: boolean
    invite_code_id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
    inviteCode?: boolean | User$inviteCodeArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    passwordHash?: boolean
    avatar?: boolean
    customAvatar?: boolean
    role?: boolean
    isActive?: boolean
    lastLogin?: boolean
    team_id?: boolean
    invite_code_id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "firstName" | "lastName" | "email" | "passwordHash" | "avatar" | "customAvatar" | "role" | "isActive" | "lastLogin" | "team_id" | "invite_code_id" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
    inviteCode?: boolean | User$inviteCodeArgs<ExtArgs>
    gameOwners?: boolean | User$gameOwnersArgs<ExtArgs>
    uploadedAssets?: boolean | User$uploadedAssetsArgs<ExtArgs>
    assetRevisions?: boolean | User$assetRevisionsArgs<ExtArgs>
    assetVotes?: boolean | User$assetVotesArgs<ExtArgs>
    assetComments?: boolean | User$assetCommentsArgs<ExtArgs>
    revisionComments?: boolean | User$revisionCommentsArgs<ExtArgs>
    assetInteractions?: boolean | User$assetInteractionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
    inviteCode?: boolean | User$inviteCodeArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
    inviteCode?: boolean | User$inviteCodeArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      team: Prisma.$TeamPayload<ExtArgs>
      inviteCode: Prisma.$InviteCodePayload<ExtArgs> | null
      gameOwners: Prisma.$GameOwnerPayload<ExtArgs>[]
      uploadedAssets: Prisma.$AssetPayload<ExtArgs>[]
      assetRevisions: Prisma.$AssetRevisionPayload<ExtArgs>[]
      assetVotes: Prisma.$AssetVotePayload<ExtArgs>[]
      assetComments: Prisma.$AssetCommentPayload<ExtArgs>[]
      revisionComments: Prisma.$RevisionCommentPayload<ExtArgs>[]
      assetInteractions: Prisma.$UserAssetInteractionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      firstName: string
      lastName: string
      email: string
      passwordHash: string
      avatar: number
      customAvatar: string | null
      role: $Enums.UserRole
      isActive: boolean
      lastLogin: Date | null
      team_id: number
      invite_code_id: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    team<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    inviteCode<T extends User$inviteCodeArgs<ExtArgs> = {}>(args?: Subset<T, User$inviteCodeArgs<ExtArgs>>): Prisma__InviteCodeClient<$Result.GetResult<Prisma.$InviteCodePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    gameOwners<T extends User$gameOwnersArgs<ExtArgs> = {}>(args?: Subset<T, User$gameOwnersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameOwnerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    uploadedAssets<T extends User$uploadedAssetsArgs<ExtArgs> = {}>(args?: Subset<T, User$uploadedAssetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assetRevisions<T extends User$assetRevisionsArgs<ExtArgs> = {}>(args?: Subset<T, User$assetRevisionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetRevisionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assetVotes<T extends User$assetVotesArgs<ExtArgs> = {}>(args?: Subset<T, User$assetVotesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetVotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assetComments<T extends User$assetCommentsArgs<ExtArgs> = {}>(args?: Subset<T, User$assetCommentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetCommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    revisionComments<T extends User$revisionCommentsArgs<ExtArgs> = {}>(args?: Subset<T, User$revisionCommentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RevisionCommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assetInteractions<T extends User$assetInteractionsArgs<ExtArgs> = {}>(args?: Subset<T, User$assetInteractionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAssetInteractionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly avatar: FieldRef<"User", 'Int'>
    readonly customAvatar: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly lastLogin: FieldRef<"User", 'DateTime'>
    readonly team_id: FieldRef<"User", 'Int'>
    readonly invite_code_id: FieldRef<"User", 'Int'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.inviteCode
   */
  export type User$inviteCodeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InviteCode
     */
    select?: InviteCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InviteCode
     */
    omit?: InviteCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteCodeInclude<ExtArgs> | null
    where?: InviteCodeWhereInput
  }

  /**
   * User.gameOwners
   */
  export type User$gameOwnersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameOwner
     */
    select?: GameOwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameOwner
     */
    omit?: GameOwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameOwnerInclude<ExtArgs> | null
    where?: GameOwnerWhereInput
    orderBy?: GameOwnerOrderByWithRelationInput | GameOwnerOrderByWithRelationInput[]
    cursor?: GameOwnerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameOwnerScalarFieldEnum | GameOwnerScalarFieldEnum[]
  }

  /**
   * User.uploadedAssets
   */
  export type User$uploadedAssetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    where?: AssetWhereInput
    orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
    cursor?: AssetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssetScalarFieldEnum | AssetScalarFieldEnum[]
  }

  /**
   * User.assetRevisions
   */
  export type User$assetRevisionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetRevision
     */
    select?: AssetRevisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetRevision
     */
    omit?: AssetRevisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetRevisionInclude<ExtArgs> | null
    where?: AssetRevisionWhereInput
    orderBy?: AssetRevisionOrderByWithRelationInput | AssetRevisionOrderByWithRelationInput[]
    cursor?: AssetRevisionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssetRevisionScalarFieldEnum | AssetRevisionScalarFieldEnum[]
  }

  /**
   * User.assetVotes
   */
  export type User$assetVotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetVote
     */
    select?: AssetVoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetVote
     */
    omit?: AssetVoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetVoteInclude<ExtArgs> | null
    where?: AssetVoteWhereInput
    orderBy?: AssetVoteOrderByWithRelationInput | AssetVoteOrderByWithRelationInput[]
    cursor?: AssetVoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssetVoteScalarFieldEnum | AssetVoteScalarFieldEnum[]
  }

  /**
   * User.assetComments
   */
  export type User$assetCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetComment
     */
    select?: AssetCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetComment
     */
    omit?: AssetCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetCommentInclude<ExtArgs> | null
    where?: AssetCommentWhereInput
    orderBy?: AssetCommentOrderByWithRelationInput | AssetCommentOrderByWithRelationInput[]
    cursor?: AssetCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssetCommentScalarFieldEnum | AssetCommentScalarFieldEnum[]
  }

  /**
   * User.revisionComments
   */
  export type User$revisionCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RevisionComment
     */
    select?: RevisionCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RevisionComment
     */
    omit?: RevisionCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RevisionCommentInclude<ExtArgs> | null
    where?: RevisionCommentWhereInput
    orderBy?: RevisionCommentOrderByWithRelationInput | RevisionCommentOrderByWithRelationInput[]
    cursor?: RevisionCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RevisionCommentScalarFieldEnum | RevisionCommentScalarFieldEnum[]
  }

  /**
   * User.assetInteractions
   */
  export type User$assetInteractionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAssetInteraction
     */
    select?: UserAssetInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAssetInteraction
     */
    omit?: UserAssetInteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAssetInteractionInclude<ExtArgs> | null
    where?: UserAssetInteractionWhereInput
    orderBy?: UserAssetInteractionOrderByWithRelationInput | UserAssetInteractionOrderByWithRelationInput[]
    cursor?: UserAssetInteractionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserAssetInteractionScalarFieldEnum | UserAssetInteractionScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model GameOwner
   */

  export type AggregateGameOwner = {
    _count: GameOwnerCountAggregateOutputType | null
    _avg: GameOwnerAvgAggregateOutputType | null
    _sum: GameOwnerSumAggregateOutputType | null
    _min: GameOwnerMinAggregateOutputType | null
    _max: GameOwnerMaxAggregateOutputType | null
  }

  export type GameOwnerAvgAggregateOutputType = {
    id: number | null
    game_id: number | null
    user_id: number | null
  }

  export type GameOwnerSumAggregateOutputType = {
    id: number | null
    game_id: number | null
    user_id: number | null
  }

  export type GameOwnerMinAggregateOutputType = {
    id: number | null
    game_id: number | null
    user_id: number | null
    createdAt: Date | null
  }

  export type GameOwnerMaxAggregateOutputType = {
    id: number | null
    game_id: number | null
    user_id: number | null
    createdAt: Date | null
  }

  export type GameOwnerCountAggregateOutputType = {
    id: number
    game_id: number
    user_id: number
    createdAt: number
    _all: number
  }


  export type GameOwnerAvgAggregateInputType = {
    id?: true
    game_id?: true
    user_id?: true
  }

  export type GameOwnerSumAggregateInputType = {
    id?: true
    game_id?: true
    user_id?: true
  }

  export type GameOwnerMinAggregateInputType = {
    id?: true
    game_id?: true
    user_id?: true
    createdAt?: true
  }

  export type GameOwnerMaxAggregateInputType = {
    id?: true
    game_id?: true
    user_id?: true
    createdAt?: true
  }

  export type GameOwnerCountAggregateInputType = {
    id?: true
    game_id?: true
    user_id?: true
    createdAt?: true
    _all?: true
  }

  export type GameOwnerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameOwner to aggregate.
     */
    where?: GameOwnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameOwners to fetch.
     */
    orderBy?: GameOwnerOrderByWithRelationInput | GameOwnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameOwnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameOwners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameOwners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GameOwners
    **/
    _count?: true | GameOwnerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameOwnerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameOwnerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameOwnerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameOwnerMaxAggregateInputType
  }

  export type GetGameOwnerAggregateType<T extends GameOwnerAggregateArgs> = {
        [P in keyof T & keyof AggregateGameOwner]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGameOwner[P]>
      : GetScalarType<T[P], AggregateGameOwner[P]>
  }




  export type GameOwnerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameOwnerWhereInput
    orderBy?: GameOwnerOrderByWithAggregationInput | GameOwnerOrderByWithAggregationInput[]
    by: GameOwnerScalarFieldEnum[] | GameOwnerScalarFieldEnum
    having?: GameOwnerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameOwnerCountAggregateInputType | true
    _avg?: GameOwnerAvgAggregateInputType
    _sum?: GameOwnerSumAggregateInputType
    _min?: GameOwnerMinAggregateInputType
    _max?: GameOwnerMaxAggregateInputType
  }

  export type GameOwnerGroupByOutputType = {
    id: number
    game_id: number
    user_id: number
    createdAt: Date
    _count: GameOwnerCountAggregateOutputType | null
    _avg: GameOwnerAvgAggregateOutputType | null
    _sum: GameOwnerSumAggregateOutputType | null
    _min: GameOwnerMinAggregateOutputType | null
    _max: GameOwnerMaxAggregateOutputType | null
  }

  type GetGameOwnerGroupByPayload<T extends GameOwnerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameOwnerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameOwnerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameOwnerGroupByOutputType[P]>
            : GetScalarType<T[P], GameOwnerGroupByOutputType[P]>
        }
      >
    >


  export type GameOwnerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    game_id?: boolean
    user_id?: boolean
    createdAt?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameOwner"]>

  export type GameOwnerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    game_id?: boolean
    user_id?: boolean
    createdAt?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameOwner"]>

  export type GameOwnerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    game_id?: boolean
    user_id?: boolean
    createdAt?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameOwner"]>

  export type GameOwnerSelectScalar = {
    id?: boolean
    game_id?: boolean
    user_id?: boolean
    createdAt?: boolean
  }

  export type GameOwnerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "game_id" | "user_id" | "createdAt", ExtArgs["result"]["gameOwner"]>
  export type GameOwnerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type GameOwnerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type GameOwnerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $GameOwnerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GameOwner"
    objects: {
      game: Prisma.$GamePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      game_id: number
      user_id: number
      createdAt: Date
    }, ExtArgs["result"]["gameOwner"]>
    composites: {}
  }

  type GameOwnerGetPayload<S extends boolean | null | undefined | GameOwnerDefaultArgs> = $Result.GetResult<Prisma.$GameOwnerPayload, S>

  type GameOwnerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GameOwnerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GameOwnerCountAggregateInputType | true
    }

  export interface GameOwnerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GameOwner'], meta: { name: 'GameOwner' } }
    /**
     * Find zero or one GameOwner that matches the filter.
     * @param {GameOwnerFindUniqueArgs} args - Arguments to find a GameOwner
     * @example
     * // Get one GameOwner
     * const gameOwner = await prisma.gameOwner.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GameOwnerFindUniqueArgs>(args: SelectSubset<T, GameOwnerFindUniqueArgs<ExtArgs>>): Prisma__GameOwnerClient<$Result.GetResult<Prisma.$GameOwnerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GameOwner that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GameOwnerFindUniqueOrThrowArgs} args - Arguments to find a GameOwner
     * @example
     * // Get one GameOwner
     * const gameOwner = await prisma.gameOwner.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GameOwnerFindUniqueOrThrowArgs>(args: SelectSubset<T, GameOwnerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GameOwnerClient<$Result.GetResult<Prisma.$GameOwnerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameOwner that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameOwnerFindFirstArgs} args - Arguments to find a GameOwner
     * @example
     * // Get one GameOwner
     * const gameOwner = await prisma.gameOwner.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GameOwnerFindFirstArgs>(args?: SelectSubset<T, GameOwnerFindFirstArgs<ExtArgs>>): Prisma__GameOwnerClient<$Result.GetResult<Prisma.$GameOwnerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameOwner that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameOwnerFindFirstOrThrowArgs} args - Arguments to find a GameOwner
     * @example
     * // Get one GameOwner
     * const gameOwner = await prisma.gameOwner.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GameOwnerFindFirstOrThrowArgs>(args?: SelectSubset<T, GameOwnerFindFirstOrThrowArgs<ExtArgs>>): Prisma__GameOwnerClient<$Result.GetResult<Prisma.$GameOwnerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GameOwners that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameOwnerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GameOwners
     * const gameOwners = await prisma.gameOwner.findMany()
     * 
     * // Get first 10 GameOwners
     * const gameOwners = await prisma.gameOwner.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameOwnerWithIdOnly = await prisma.gameOwner.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GameOwnerFindManyArgs>(args?: SelectSubset<T, GameOwnerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameOwnerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GameOwner.
     * @param {GameOwnerCreateArgs} args - Arguments to create a GameOwner.
     * @example
     * // Create one GameOwner
     * const GameOwner = await prisma.gameOwner.create({
     *   data: {
     *     // ... data to create a GameOwner
     *   }
     * })
     * 
     */
    create<T extends GameOwnerCreateArgs>(args: SelectSubset<T, GameOwnerCreateArgs<ExtArgs>>): Prisma__GameOwnerClient<$Result.GetResult<Prisma.$GameOwnerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GameOwners.
     * @param {GameOwnerCreateManyArgs} args - Arguments to create many GameOwners.
     * @example
     * // Create many GameOwners
     * const gameOwner = await prisma.gameOwner.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GameOwnerCreateManyArgs>(args?: SelectSubset<T, GameOwnerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GameOwners and returns the data saved in the database.
     * @param {GameOwnerCreateManyAndReturnArgs} args - Arguments to create many GameOwners.
     * @example
     * // Create many GameOwners
     * const gameOwner = await prisma.gameOwner.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GameOwners and only return the `id`
     * const gameOwnerWithIdOnly = await prisma.gameOwner.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GameOwnerCreateManyAndReturnArgs>(args?: SelectSubset<T, GameOwnerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameOwnerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GameOwner.
     * @param {GameOwnerDeleteArgs} args - Arguments to delete one GameOwner.
     * @example
     * // Delete one GameOwner
     * const GameOwner = await prisma.gameOwner.delete({
     *   where: {
     *     // ... filter to delete one GameOwner
     *   }
     * })
     * 
     */
    delete<T extends GameOwnerDeleteArgs>(args: SelectSubset<T, GameOwnerDeleteArgs<ExtArgs>>): Prisma__GameOwnerClient<$Result.GetResult<Prisma.$GameOwnerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GameOwner.
     * @param {GameOwnerUpdateArgs} args - Arguments to update one GameOwner.
     * @example
     * // Update one GameOwner
     * const gameOwner = await prisma.gameOwner.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GameOwnerUpdateArgs>(args: SelectSubset<T, GameOwnerUpdateArgs<ExtArgs>>): Prisma__GameOwnerClient<$Result.GetResult<Prisma.$GameOwnerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GameOwners.
     * @param {GameOwnerDeleteManyArgs} args - Arguments to filter GameOwners to delete.
     * @example
     * // Delete a few GameOwners
     * const { count } = await prisma.gameOwner.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GameOwnerDeleteManyArgs>(args?: SelectSubset<T, GameOwnerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameOwners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameOwnerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GameOwners
     * const gameOwner = await prisma.gameOwner.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GameOwnerUpdateManyArgs>(args: SelectSubset<T, GameOwnerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameOwners and returns the data updated in the database.
     * @param {GameOwnerUpdateManyAndReturnArgs} args - Arguments to update many GameOwners.
     * @example
     * // Update many GameOwners
     * const gameOwner = await prisma.gameOwner.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GameOwners and only return the `id`
     * const gameOwnerWithIdOnly = await prisma.gameOwner.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GameOwnerUpdateManyAndReturnArgs>(args: SelectSubset<T, GameOwnerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameOwnerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GameOwner.
     * @param {GameOwnerUpsertArgs} args - Arguments to update or create a GameOwner.
     * @example
     * // Update or create a GameOwner
     * const gameOwner = await prisma.gameOwner.upsert({
     *   create: {
     *     // ... data to create a GameOwner
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GameOwner we want to update
     *   }
     * })
     */
    upsert<T extends GameOwnerUpsertArgs>(args: SelectSubset<T, GameOwnerUpsertArgs<ExtArgs>>): Prisma__GameOwnerClient<$Result.GetResult<Prisma.$GameOwnerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GameOwners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameOwnerCountArgs} args - Arguments to filter GameOwners to count.
     * @example
     * // Count the number of GameOwners
     * const count = await prisma.gameOwner.count({
     *   where: {
     *     // ... the filter for the GameOwners we want to count
     *   }
     * })
    **/
    count<T extends GameOwnerCountArgs>(
      args?: Subset<T, GameOwnerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameOwnerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GameOwner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameOwnerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameOwnerAggregateArgs>(args: Subset<T, GameOwnerAggregateArgs>): Prisma.PrismaPromise<GetGameOwnerAggregateType<T>>

    /**
     * Group by GameOwner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameOwnerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameOwnerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameOwnerGroupByArgs['orderBy'] }
        : { orderBy?: GameOwnerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameOwnerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameOwnerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GameOwner model
   */
  readonly fields: GameOwnerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GameOwner.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameOwnerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    game<T extends GameDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GameDefaultArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GameOwner model
   */
  interface GameOwnerFieldRefs {
    readonly id: FieldRef<"GameOwner", 'Int'>
    readonly game_id: FieldRef<"GameOwner", 'Int'>
    readonly user_id: FieldRef<"GameOwner", 'Int'>
    readonly createdAt: FieldRef<"GameOwner", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GameOwner findUnique
   */
  export type GameOwnerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameOwner
     */
    select?: GameOwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameOwner
     */
    omit?: GameOwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameOwnerInclude<ExtArgs> | null
    /**
     * Filter, which GameOwner to fetch.
     */
    where: GameOwnerWhereUniqueInput
  }

  /**
   * GameOwner findUniqueOrThrow
   */
  export type GameOwnerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameOwner
     */
    select?: GameOwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameOwner
     */
    omit?: GameOwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameOwnerInclude<ExtArgs> | null
    /**
     * Filter, which GameOwner to fetch.
     */
    where: GameOwnerWhereUniqueInput
  }

  /**
   * GameOwner findFirst
   */
  export type GameOwnerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameOwner
     */
    select?: GameOwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameOwner
     */
    omit?: GameOwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameOwnerInclude<ExtArgs> | null
    /**
     * Filter, which GameOwner to fetch.
     */
    where?: GameOwnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameOwners to fetch.
     */
    orderBy?: GameOwnerOrderByWithRelationInput | GameOwnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameOwners.
     */
    cursor?: GameOwnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameOwners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameOwners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameOwners.
     */
    distinct?: GameOwnerScalarFieldEnum | GameOwnerScalarFieldEnum[]
  }

  /**
   * GameOwner findFirstOrThrow
   */
  export type GameOwnerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameOwner
     */
    select?: GameOwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameOwner
     */
    omit?: GameOwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameOwnerInclude<ExtArgs> | null
    /**
     * Filter, which GameOwner to fetch.
     */
    where?: GameOwnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameOwners to fetch.
     */
    orderBy?: GameOwnerOrderByWithRelationInput | GameOwnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameOwners.
     */
    cursor?: GameOwnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameOwners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameOwners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameOwners.
     */
    distinct?: GameOwnerScalarFieldEnum | GameOwnerScalarFieldEnum[]
  }

  /**
   * GameOwner findMany
   */
  export type GameOwnerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameOwner
     */
    select?: GameOwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameOwner
     */
    omit?: GameOwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameOwnerInclude<ExtArgs> | null
    /**
     * Filter, which GameOwners to fetch.
     */
    where?: GameOwnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameOwners to fetch.
     */
    orderBy?: GameOwnerOrderByWithRelationInput | GameOwnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GameOwners.
     */
    cursor?: GameOwnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameOwners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameOwners.
     */
    skip?: number
    distinct?: GameOwnerScalarFieldEnum | GameOwnerScalarFieldEnum[]
  }

  /**
   * GameOwner create
   */
  export type GameOwnerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameOwner
     */
    select?: GameOwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameOwner
     */
    omit?: GameOwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameOwnerInclude<ExtArgs> | null
    /**
     * The data needed to create a GameOwner.
     */
    data: XOR<GameOwnerCreateInput, GameOwnerUncheckedCreateInput>
  }

  /**
   * GameOwner createMany
   */
  export type GameOwnerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GameOwners.
     */
    data: GameOwnerCreateManyInput | GameOwnerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GameOwner createManyAndReturn
   */
  export type GameOwnerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameOwner
     */
    select?: GameOwnerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GameOwner
     */
    omit?: GameOwnerOmit<ExtArgs> | null
    /**
     * The data used to create many GameOwners.
     */
    data: GameOwnerCreateManyInput | GameOwnerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameOwnerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GameOwner update
   */
  export type GameOwnerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameOwner
     */
    select?: GameOwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameOwner
     */
    omit?: GameOwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameOwnerInclude<ExtArgs> | null
    /**
     * The data needed to update a GameOwner.
     */
    data: XOR<GameOwnerUpdateInput, GameOwnerUncheckedUpdateInput>
    /**
     * Choose, which GameOwner to update.
     */
    where: GameOwnerWhereUniqueInput
  }

  /**
   * GameOwner updateMany
   */
  export type GameOwnerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GameOwners.
     */
    data: XOR<GameOwnerUpdateManyMutationInput, GameOwnerUncheckedUpdateManyInput>
    /**
     * Filter which GameOwners to update
     */
    where?: GameOwnerWhereInput
    /**
     * Limit how many GameOwners to update.
     */
    limit?: number
  }

  /**
   * GameOwner updateManyAndReturn
   */
  export type GameOwnerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameOwner
     */
    select?: GameOwnerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GameOwner
     */
    omit?: GameOwnerOmit<ExtArgs> | null
    /**
     * The data used to update GameOwners.
     */
    data: XOR<GameOwnerUpdateManyMutationInput, GameOwnerUncheckedUpdateManyInput>
    /**
     * Filter which GameOwners to update
     */
    where?: GameOwnerWhereInput
    /**
     * Limit how many GameOwners to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameOwnerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * GameOwner upsert
   */
  export type GameOwnerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameOwner
     */
    select?: GameOwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameOwner
     */
    omit?: GameOwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameOwnerInclude<ExtArgs> | null
    /**
     * The filter to search for the GameOwner to update in case it exists.
     */
    where: GameOwnerWhereUniqueInput
    /**
     * In case the GameOwner found by the `where` argument doesn't exist, create a new GameOwner with this data.
     */
    create: XOR<GameOwnerCreateInput, GameOwnerUncheckedCreateInput>
    /**
     * In case the GameOwner was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameOwnerUpdateInput, GameOwnerUncheckedUpdateInput>
  }

  /**
   * GameOwner delete
   */
  export type GameOwnerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameOwner
     */
    select?: GameOwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameOwner
     */
    omit?: GameOwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameOwnerInclude<ExtArgs> | null
    /**
     * Filter which GameOwner to delete.
     */
    where: GameOwnerWhereUniqueInput
  }

  /**
   * GameOwner deleteMany
   */
  export type GameOwnerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameOwners to delete
     */
    where?: GameOwnerWhereInput
    /**
     * Limit how many GameOwners to delete.
     */
    limit?: number
  }

  /**
   * GameOwner without action
   */
  export type GameOwnerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameOwner
     */
    select?: GameOwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameOwner
     */
    omit?: GameOwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameOwnerInclude<ExtArgs> | null
  }


  /**
   * Model Asset
   */

  export type AggregateAsset = {
    _count: AssetCountAggregateOutputType | null
    _avg: AssetAvgAggregateOutputType | null
    _sum: AssetSumAggregateOutputType | null
    _min: AssetMinAggregateOutputType | null
    _max: AssetMaxAggregateOutputType | null
  }

  export type AssetAvgAggregateOutputType = {
    id: number | null
    game_id: number | null
    uploader_id: number | null
    phase1Approvals: number | null
    phase1Rejections: number | null
    phase1TotalVotes: number | null
    phase2Approvals: number | null
    phase2Rejections: number | null
    phase2TotalVotes: number | null
  }

  export type AssetSumAggregateOutputType = {
    id: number | null
    game_id: number | null
    uploader_id: number | null
    phase1Approvals: number | null
    phase1Rejections: number | null
    phase1TotalVotes: number | null
    phase2Approvals: number | null
    phase2Rejections: number | null
    phase2TotalVotes: number | null
  }

  export type AssetMinAggregateOutputType = {
    id: number | null
    name: string | null
    imageUrl: string | null
    category: string | null
    game_id: number | null
    uploader_id: number | null
    phase1Approvals: number | null
    phase1Rejections: number | null
    phase1TotalVotes: number | null
    phase1CompletedAt: Date | null
    phase2Approvals: number | null
    phase2Rejections: number | null
    phase2TotalVotes: number | null
    phase2CompletedAt: Date | null
    status: $Enums.AssetStatus | null
    notificationSent: boolean | null
    archivedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AssetMaxAggregateOutputType = {
    id: number | null
    name: string | null
    imageUrl: string | null
    category: string | null
    game_id: number | null
    uploader_id: number | null
    phase1Approvals: number | null
    phase1Rejections: number | null
    phase1TotalVotes: number | null
    phase1CompletedAt: Date | null
    phase2Approvals: number | null
    phase2Rejections: number | null
    phase2TotalVotes: number | null
    phase2CompletedAt: Date | null
    status: $Enums.AssetStatus | null
    notificationSent: boolean | null
    archivedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AssetCountAggregateOutputType = {
    id: number
    name: number
    imageUrl: number
    category: number
    game_id: number
    uploader_id: number
    phase1Approvals: number
    phase1Rejections: number
    phase1TotalVotes: number
    phase1CompletedAt: number
    phase2Approvals: number
    phase2Rejections: number
    phase2TotalVotes: number
    phase2CompletedAt: number
    status: number
    notificationSent: number
    archivedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AssetAvgAggregateInputType = {
    id?: true
    game_id?: true
    uploader_id?: true
    phase1Approvals?: true
    phase1Rejections?: true
    phase1TotalVotes?: true
    phase2Approvals?: true
    phase2Rejections?: true
    phase2TotalVotes?: true
  }

  export type AssetSumAggregateInputType = {
    id?: true
    game_id?: true
    uploader_id?: true
    phase1Approvals?: true
    phase1Rejections?: true
    phase1TotalVotes?: true
    phase2Approvals?: true
    phase2Rejections?: true
    phase2TotalVotes?: true
  }

  export type AssetMinAggregateInputType = {
    id?: true
    name?: true
    imageUrl?: true
    category?: true
    game_id?: true
    uploader_id?: true
    phase1Approvals?: true
    phase1Rejections?: true
    phase1TotalVotes?: true
    phase1CompletedAt?: true
    phase2Approvals?: true
    phase2Rejections?: true
    phase2TotalVotes?: true
    phase2CompletedAt?: true
    status?: true
    notificationSent?: true
    archivedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AssetMaxAggregateInputType = {
    id?: true
    name?: true
    imageUrl?: true
    category?: true
    game_id?: true
    uploader_id?: true
    phase1Approvals?: true
    phase1Rejections?: true
    phase1TotalVotes?: true
    phase1CompletedAt?: true
    phase2Approvals?: true
    phase2Rejections?: true
    phase2TotalVotes?: true
    phase2CompletedAt?: true
    status?: true
    notificationSent?: true
    archivedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AssetCountAggregateInputType = {
    id?: true
    name?: true
    imageUrl?: true
    category?: true
    game_id?: true
    uploader_id?: true
    phase1Approvals?: true
    phase1Rejections?: true
    phase1TotalVotes?: true
    phase1CompletedAt?: true
    phase2Approvals?: true
    phase2Rejections?: true
    phase2TotalVotes?: true
    phase2CompletedAt?: true
    status?: true
    notificationSent?: true
    archivedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AssetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Asset to aggregate.
     */
    where?: AssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assets to fetch.
     */
    orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Assets
    **/
    _count?: true | AssetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AssetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AssetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssetMaxAggregateInputType
  }

  export type GetAssetAggregateType<T extends AssetAggregateArgs> = {
        [P in keyof T & keyof AggregateAsset]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAsset[P]>
      : GetScalarType<T[P], AggregateAsset[P]>
  }




  export type AssetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetWhereInput
    orderBy?: AssetOrderByWithAggregationInput | AssetOrderByWithAggregationInput[]
    by: AssetScalarFieldEnum[] | AssetScalarFieldEnum
    having?: AssetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssetCountAggregateInputType | true
    _avg?: AssetAvgAggregateInputType
    _sum?: AssetSumAggregateInputType
    _min?: AssetMinAggregateInputType
    _max?: AssetMaxAggregateInputType
  }

  export type AssetGroupByOutputType = {
    id: number
    name: string
    imageUrl: string
    category: string
    game_id: number
    uploader_id: number
    phase1Approvals: number
    phase1Rejections: number
    phase1TotalVotes: number
    phase1CompletedAt: Date | null
    phase2Approvals: number
    phase2Rejections: number
    phase2TotalVotes: number
    phase2CompletedAt: Date | null
    status: $Enums.AssetStatus
    notificationSent: boolean
    archivedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: AssetCountAggregateOutputType | null
    _avg: AssetAvgAggregateOutputType | null
    _sum: AssetSumAggregateOutputType | null
    _min: AssetMinAggregateOutputType | null
    _max: AssetMaxAggregateOutputType | null
  }

  type GetAssetGroupByPayload<T extends AssetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AssetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssetGroupByOutputType[P]>
            : GetScalarType<T[P], AssetGroupByOutputType[P]>
        }
      >
    >


  export type AssetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    imageUrl?: boolean
    category?: boolean
    game_id?: boolean
    uploader_id?: boolean
    phase1Approvals?: boolean
    phase1Rejections?: boolean
    phase1TotalVotes?: boolean
    phase1CompletedAt?: boolean
    phase2Approvals?: boolean
    phase2Rejections?: boolean
    phase2TotalVotes?: boolean
    phase2CompletedAt?: boolean
    status?: boolean
    notificationSent?: boolean
    archivedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
    uploader?: boolean | UserDefaultArgs<ExtArgs>
    revisions?: boolean | Asset$revisionsArgs<ExtArgs>
    votes?: boolean | Asset$votesArgs<ExtArgs>
    comments?: boolean | Asset$commentsArgs<ExtArgs>
    userInteractions?: boolean | Asset$userInteractionsArgs<ExtArgs>
    finalReviewTeams?: boolean | Asset$finalReviewTeamsArgs<ExtArgs>
    _count?: boolean | AssetCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["asset"]>

  export type AssetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    imageUrl?: boolean
    category?: boolean
    game_id?: boolean
    uploader_id?: boolean
    phase1Approvals?: boolean
    phase1Rejections?: boolean
    phase1TotalVotes?: boolean
    phase1CompletedAt?: boolean
    phase2Approvals?: boolean
    phase2Rejections?: boolean
    phase2TotalVotes?: boolean
    phase2CompletedAt?: boolean
    status?: boolean
    notificationSent?: boolean
    archivedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
    uploader?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["asset"]>

  export type AssetSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    imageUrl?: boolean
    category?: boolean
    game_id?: boolean
    uploader_id?: boolean
    phase1Approvals?: boolean
    phase1Rejections?: boolean
    phase1TotalVotes?: boolean
    phase1CompletedAt?: boolean
    phase2Approvals?: boolean
    phase2Rejections?: boolean
    phase2TotalVotes?: boolean
    phase2CompletedAt?: boolean
    status?: boolean
    notificationSent?: boolean
    archivedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
    uploader?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["asset"]>

  export type AssetSelectScalar = {
    id?: boolean
    name?: boolean
    imageUrl?: boolean
    category?: boolean
    game_id?: boolean
    uploader_id?: boolean
    phase1Approvals?: boolean
    phase1Rejections?: boolean
    phase1TotalVotes?: boolean
    phase1CompletedAt?: boolean
    phase2Approvals?: boolean
    phase2Rejections?: boolean
    phase2TotalVotes?: boolean
    phase2CompletedAt?: boolean
    status?: boolean
    notificationSent?: boolean
    archivedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AssetOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "imageUrl" | "category" | "game_id" | "uploader_id" | "phase1Approvals" | "phase1Rejections" | "phase1TotalVotes" | "phase1CompletedAt" | "phase2Approvals" | "phase2Rejections" | "phase2TotalVotes" | "phase2CompletedAt" | "status" | "notificationSent" | "archivedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["asset"]>
  export type AssetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
    uploader?: boolean | UserDefaultArgs<ExtArgs>
    revisions?: boolean | Asset$revisionsArgs<ExtArgs>
    votes?: boolean | Asset$votesArgs<ExtArgs>
    comments?: boolean | Asset$commentsArgs<ExtArgs>
    userInteractions?: boolean | Asset$userInteractionsArgs<ExtArgs>
    finalReviewTeams?: boolean | Asset$finalReviewTeamsArgs<ExtArgs>
    _count?: boolean | AssetCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AssetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
    uploader?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AssetIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
    uploader?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AssetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Asset"
    objects: {
      game: Prisma.$GamePayload<ExtArgs>
      uploader: Prisma.$UserPayload<ExtArgs>
      revisions: Prisma.$AssetRevisionPayload<ExtArgs>[]
      votes: Prisma.$AssetVotePayload<ExtArgs>[]
      comments: Prisma.$AssetCommentPayload<ExtArgs>[]
      userInteractions: Prisma.$UserAssetInteractionPayload<ExtArgs>[]
      finalReviewTeams: Prisma.$AssetFinalReviewTeamPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      imageUrl: string
      category: string
      game_id: number
      uploader_id: number
      phase1Approvals: number
      phase1Rejections: number
      phase1TotalVotes: number
      phase1CompletedAt: Date | null
      phase2Approvals: number
      phase2Rejections: number
      phase2TotalVotes: number
      phase2CompletedAt: Date | null
      status: $Enums.AssetStatus
      notificationSent: boolean
      archivedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["asset"]>
    composites: {}
  }

  type AssetGetPayload<S extends boolean | null | undefined | AssetDefaultArgs> = $Result.GetResult<Prisma.$AssetPayload, S>

  type AssetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AssetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AssetCountAggregateInputType | true
    }

  export interface AssetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Asset'], meta: { name: 'Asset' } }
    /**
     * Find zero or one Asset that matches the filter.
     * @param {AssetFindUniqueArgs} args - Arguments to find a Asset
     * @example
     * // Get one Asset
     * const asset = await prisma.asset.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AssetFindUniqueArgs>(args: SelectSubset<T, AssetFindUniqueArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Asset that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AssetFindUniqueOrThrowArgs} args - Arguments to find a Asset
     * @example
     * // Get one Asset
     * const asset = await prisma.asset.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AssetFindUniqueOrThrowArgs>(args: SelectSubset<T, AssetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Asset that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetFindFirstArgs} args - Arguments to find a Asset
     * @example
     * // Get one Asset
     * const asset = await prisma.asset.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AssetFindFirstArgs>(args?: SelectSubset<T, AssetFindFirstArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Asset that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetFindFirstOrThrowArgs} args - Arguments to find a Asset
     * @example
     * // Get one Asset
     * const asset = await prisma.asset.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AssetFindFirstOrThrowArgs>(args?: SelectSubset<T, AssetFindFirstOrThrowArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Assets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Assets
     * const assets = await prisma.asset.findMany()
     * 
     * // Get first 10 Assets
     * const assets = await prisma.asset.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const assetWithIdOnly = await prisma.asset.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AssetFindManyArgs>(args?: SelectSubset<T, AssetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Asset.
     * @param {AssetCreateArgs} args - Arguments to create a Asset.
     * @example
     * // Create one Asset
     * const Asset = await prisma.asset.create({
     *   data: {
     *     // ... data to create a Asset
     *   }
     * })
     * 
     */
    create<T extends AssetCreateArgs>(args: SelectSubset<T, AssetCreateArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Assets.
     * @param {AssetCreateManyArgs} args - Arguments to create many Assets.
     * @example
     * // Create many Assets
     * const asset = await prisma.asset.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AssetCreateManyArgs>(args?: SelectSubset<T, AssetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Assets and returns the data saved in the database.
     * @param {AssetCreateManyAndReturnArgs} args - Arguments to create many Assets.
     * @example
     * // Create many Assets
     * const asset = await prisma.asset.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Assets and only return the `id`
     * const assetWithIdOnly = await prisma.asset.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AssetCreateManyAndReturnArgs>(args?: SelectSubset<T, AssetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Asset.
     * @param {AssetDeleteArgs} args - Arguments to delete one Asset.
     * @example
     * // Delete one Asset
     * const Asset = await prisma.asset.delete({
     *   where: {
     *     // ... filter to delete one Asset
     *   }
     * })
     * 
     */
    delete<T extends AssetDeleteArgs>(args: SelectSubset<T, AssetDeleteArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Asset.
     * @param {AssetUpdateArgs} args - Arguments to update one Asset.
     * @example
     * // Update one Asset
     * const asset = await prisma.asset.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AssetUpdateArgs>(args: SelectSubset<T, AssetUpdateArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Assets.
     * @param {AssetDeleteManyArgs} args - Arguments to filter Assets to delete.
     * @example
     * // Delete a few Assets
     * const { count } = await prisma.asset.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AssetDeleteManyArgs>(args?: SelectSubset<T, AssetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Assets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Assets
     * const asset = await prisma.asset.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AssetUpdateManyArgs>(args: SelectSubset<T, AssetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Assets and returns the data updated in the database.
     * @param {AssetUpdateManyAndReturnArgs} args - Arguments to update many Assets.
     * @example
     * // Update many Assets
     * const asset = await prisma.asset.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Assets and only return the `id`
     * const assetWithIdOnly = await prisma.asset.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AssetUpdateManyAndReturnArgs>(args: SelectSubset<T, AssetUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Asset.
     * @param {AssetUpsertArgs} args - Arguments to update or create a Asset.
     * @example
     * // Update or create a Asset
     * const asset = await prisma.asset.upsert({
     *   create: {
     *     // ... data to create a Asset
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Asset we want to update
     *   }
     * })
     */
    upsert<T extends AssetUpsertArgs>(args: SelectSubset<T, AssetUpsertArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Assets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetCountArgs} args - Arguments to filter Assets to count.
     * @example
     * // Count the number of Assets
     * const count = await prisma.asset.count({
     *   where: {
     *     // ... the filter for the Assets we want to count
     *   }
     * })
    **/
    count<T extends AssetCountArgs>(
      args?: Subset<T, AssetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Asset.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssetAggregateArgs>(args: Subset<T, AssetAggregateArgs>): Prisma.PrismaPromise<GetAssetAggregateType<T>>

    /**
     * Group by Asset.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AssetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssetGroupByArgs['orderBy'] }
        : { orderBy?: AssetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AssetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Asset model
   */
  readonly fields: AssetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Asset.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AssetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    game<T extends GameDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GameDefaultArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    uploader<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    revisions<T extends Asset$revisionsArgs<ExtArgs> = {}>(args?: Subset<T, Asset$revisionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetRevisionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    votes<T extends Asset$votesArgs<ExtArgs> = {}>(args?: Subset<T, Asset$votesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetVotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    comments<T extends Asset$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Asset$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetCommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userInteractions<T extends Asset$userInteractionsArgs<ExtArgs> = {}>(args?: Subset<T, Asset$userInteractionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAssetInteractionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    finalReviewTeams<T extends Asset$finalReviewTeamsArgs<ExtArgs> = {}>(args?: Subset<T, Asset$finalReviewTeamsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetFinalReviewTeamPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Asset model
   */
  interface AssetFieldRefs {
    readonly id: FieldRef<"Asset", 'Int'>
    readonly name: FieldRef<"Asset", 'String'>
    readonly imageUrl: FieldRef<"Asset", 'String'>
    readonly category: FieldRef<"Asset", 'String'>
    readonly game_id: FieldRef<"Asset", 'Int'>
    readonly uploader_id: FieldRef<"Asset", 'Int'>
    readonly phase1Approvals: FieldRef<"Asset", 'Int'>
    readonly phase1Rejections: FieldRef<"Asset", 'Int'>
    readonly phase1TotalVotes: FieldRef<"Asset", 'Int'>
    readonly phase1CompletedAt: FieldRef<"Asset", 'DateTime'>
    readonly phase2Approvals: FieldRef<"Asset", 'Int'>
    readonly phase2Rejections: FieldRef<"Asset", 'Int'>
    readonly phase2TotalVotes: FieldRef<"Asset", 'Int'>
    readonly phase2CompletedAt: FieldRef<"Asset", 'DateTime'>
    readonly status: FieldRef<"Asset", 'AssetStatus'>
    readonly notificationSent: FieldRef<"Asset", 'Boolean'>
    readonly archivedAt: FieldRef<"Asset", 'DateTime'>
    readonly createdAt: FieldRef<"Asset", 'DateTime'>
    readonly updatedAt: FieldRef<"Asset", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Asset findUnique
   */
  export type AssetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter, which Asset to fetch.
     */
    where: AssetWhereUniqueInput
  }

  /**
   * Asset findUniqueOrThrow
   */
  export type AssetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter, which Asset to fetch.
     */
    where: AssetWhereUniqueInput
  }

  /**
   * Asset findFirst
   */
  export type AssetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter, which Asset to fetch.
     */
    where?: AssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assets to fetch.
     */
    orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assets.
     */
    cursor?: AssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assets.
     */
    distinct?: AssetScalarFieldEnum | AssetScalarFieldEnum[]
  }

  /**
   * Asset findFirstOrThrow
   */
  export type AssetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter, which Asset to fetch.
     */
    where?: AssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assets to fetch.
     */
    orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assets.
     */
    cursor?: AssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assets.
     */
    distinct?: AssetScalarFieldEnum | AssetScalarFieldEnum[]
  }

  /**
   * Asset findMany
   */
  export type AssetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter, which Assets to fetch.
     */
    where?: AssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assets to fetch.
     */
    orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Assets.
     */
    cursor?: AssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assets.
     */
    skip?: number
    distinct?: AssetScalarFieldEnum | AssetScalarFieldEnum[]
  }

  /**
   * Asset create
   */
  export type AssetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * The data needed to create a Asset.
     */
    data: XOR<AssetCreateInput, AssetUncheckedCreateInput>
  }

  /**
   * Asset createMany
   */
  export type AssetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Assets.
     */
    data: AssetCreateManyInput | AssetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Asset createManyAndReturn
   */
  export type AssetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * The data used to create many Assets.
     */
    data: AssetCreateManyInput | AssetCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Asset update
   */
  export type AssetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * The data needed to update a Asset.
     */
    data: XOR<AssetUpdateInput, AssetUncheckedUpdateInput>
    /**
     * Choose, which Asset to update.
     */
    where: AssetWhereUniqueInput
  }

  /**
   * Asset updateMany
   */
  export type AssetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Assets.
     */
    data: XOR<AssetUpdateManyMutationInput, AssetUncheckedUpdateManyInput>
    /**
     * Filter which Assets to update
     */
    where?: AssetWhereInput
    /**
     * Limit how many Assets to update.
     */
    limit?: number
  }

  /**
   * Asset updateManyAndReturn
   */
  export type AssetUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * The data used to update Assets.
     */
    data: XOR<AssetUpdateManyMutationInput, AssetUncheckedUpdateManyInput>
    /**
     * Filter which Assets to update
     */
    where?: AssetWhereInput
    /**
     * Limit how many Assets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Asset upsert
   */
  export type AssetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * The filter to search for the Asset to update in case it exists.
     */
    where: AssetWhereUniqueInput
    /**
     * In case the Asset found by the `where` argument doesn't exist, create a new Asset with this data.
     */
    create: XOR<AssetCreateInput, AssetUncheckedCreateInput>
    /**
     * In case the Asset was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AssetUpdateInput, AssetUncheckedUpdateInput>
  }

  /**
   * Asset delete
   */
  export type AssetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter which Asset to delete.
     */
    where: AssetWhereUniqueInput
  }

  /**
   * Asset deleteMany
   */
  export type AssetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Assets to delete
     */
    where?: AssetWhereInput
    /**
     * Limit how many Assets to delete.
     */
    limit?: number
  }

  /**
   * Asset.revisions
   */
  export type Asset$revisionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetRevision
     */
    select?: AssetRevisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetRevision
     */
    omit?: AssetRevisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetRevisionInclude<ExtArgs> | null
    where?: AssetRevisionWhereInput
    orderBy?: AssetRevisionOrderByWithRelationInput | AssetRevisionOrderByWithRelationInput[]
    cursor?: AssetRevisionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssetRevisionScalarFieldEnum | AssetRevisionScalarFieldEnum[]
  }

  /**
   * Asset.votes
   */
  export type Asset$votesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetVote
     */
    select?: AssetVoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetVote
     */
    omit?: AssetVoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetVoteInclude<ExtArgs> | null
    where?: AssetVoteWhereInput
    orderBy?: AssetVoteOrderByWithRelationInput | AssetVoteOrderByWithRelationInput[]
    cursor?: AssetVoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssetVoteScalarFieldEnum | AssetVoteScalarFieldEnum[]
  }

  /**
   * Asset.comments
   */
  export type Asset$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetComment
     */
    select?: AssetCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetComment
     */
    omit?: AssetCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetCommentInclude<ExtArgs> | null
    where?: AssetCommentWhereInput
    orderBy?: AssetCommentOrderByWithRelationInput | AssetCommentOrderByWithRelationInput[]
    cursor?: AssetCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssetCommentScalarFieldEnum | AssetCommentScalarFieldEnum[]
  }

  /**
   * Asset.userInteractions
   */
  export type Asset$userInteractionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAssetInteraction
     */
    select?: UserAssetInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAssetInteraction
     */
    omit?: UserAssetInteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAssetInteractionInclude<ExtArgs> | null
    where?: UserAssetInteractionWhereInput
    orderBy?: UserAssetInteractionOrderByWithRelationInput | UserAssetInteractionOrderByWithRelationInput[]
    cursor?: UserAssetInteractionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserAssetInteractionScalarFieldEnum | UserAssetInteractionScalarFieldEnum[]
  }

  /**
   * Asset.finalReviewTeams
   */
  export type Asset$finalReviewTeamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetFinalReviewTeam
     */
    select?: AssetFinalReviewTeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetFinalReviewTeam
     */
    omit?: AssetFinalReviewTeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetFinalReviewTeamInclude<ExtArgs> | null
    where?: AssetFinalReviewTeamWhereInput
    orderBy?: AssetFinalReviewTeamOrderByWithRelationInput | AssetFinalReviewTeamOrderByWithRelationInput[]
    cursor?: AssetFinalReviewTeamWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssetFinalReviewTeamScalarFieldEnum | AssetFinalReviewTeamScalarFieldEnum[]
  }

  /**
   * Asset without action
   */
  export type AssetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
  }


  /**
   * Model AssetFinalReviewTeam
   */

  export type AggregateAssetFinalReviewTeam = {
    _count: AssetFinalReviewTeamCountAggregateOutputType | null
    _avg: AssetFinalReviewTeamAvgAggregateOutputType | null
    _sum: AssetFinalReviewTeamSumAggregateOutputType | null
    _min: AssetFinalReviewTeamMinAggregateOutputType | null
    _max: AssetFinalReviewTeamMaxAggregateOutputType | null
  }

  export type AssetFinalReviewTeamAvgAggregateOutputType = {
    id: number | null
    asset_id: number | null
    team_id: number | null
  }

  export type AssetFinalReviewTeamSumAggregateOutputType = {
    id: number | null
    asset_id: number | null
    team_id: number | null
  }

  export type AssetFinalReviewTeamMinAggregateOutputType = {
    id: number | null
    asset_id: number | null
    team_id: number | null
    createdAt: Date | null
  }

  export type AssetFinalReviewTeamMaxAggregateOutputType = {
    id: number | null
    asset_id: number | null
    team_id: number | null
    createdAt: Date | null
  }

  export type AssetFinalReviewTeamCountAggregateOutputType = {
    id: number
    asset_id: number
    team_id: number
    createdAt: number
    _all: number
  }


  export type AssetFinalReviewTeamAvgAggregateInputType = {
    id?: true
    asset_id?: true
    team_id?: true
  }

  export type AssetFinalReviewTeamSumAggregateInputType = {
    id?: true
    asset_id?: true
    team_id?: true
  }

  export type AssetFinalReviewTeamMinAggregateInputType = {
    id?: true
    asset_id?: true
    team_id?: true
    createdAt?: true
  }

  export type AssetFinalReviewTeamMaxAggregateInputType = {
    id?: true
    asset_id?: true
    team_id?: true
    createdAt?: true
  }

  export type AssetFinalReviewTeamCountAggregateInputType = {
    id?: true
    asset_id?: true
    team_id?: true
    createdAt?: true
    _all?: true
  }

  export type AssetFinalReviewTeamAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AssetFinalReviewTeam to aggregate.
     */
    where?: AssetFinalReviewTeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetFinalReviewTeams to fetch.
     */
    orderBy?: AssetFinalReviewTeamOrderByWithRelationInput | AssetFinalReviewTeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AssetFinalReviewTeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetFinalReviewTeams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetFinalReviewTeams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AssetFinalReviewTeams
    **/
    _count?: true | AssetFinalReviewTeamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AssetFinalReviewTeamAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AssetFinalReviewTeamSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssetFinalReviewTeamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssetFinalReviewTeamMaxAggregateInputType
  }

  export type GetAssetFinalReviewTeamAggregateType<T extends AssetFinalReviewTeamAggregateArgs> = {
        [P in keyof T & keyof AggregateAssetFinalReviewTeam]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAssetFinalReviewTeam[P]>
      : GetScalarType<T[P], AggregateAssetFinalReviewTeam[P]>
  }




  export type AssetFinalReviewTeamGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetFinalReviewTeamWhereInput
    orderBy?: AssetFinalReviewTeamOrderByWithAggregationInput | AssetFinalReviewTeamOrderByWithAggregationInput[]
    by: AssetFinalReviewTeamScalarFieldEnum[] | AssetFinalReviewTeamScalarFieldEnum
    having?: AssetFinalReviewTeamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssetFinalReviewTeamCountAggregateInputType | true
    _avg?: AssetFinalReviewTeamAvgAggregateInputType
    _sum?: AssetFinalReviewTeamSumAggregateInputType
    _min?: AssetFinalReviewTeamMinAggregateInputType
    _max?: AssetFinalReviewTeamMaxAggregateInputType
  }

  export type AssetFinalReviewTeamGroupByOutputType = {
    id: number
    asset_id: number
    team_id: number
    createdAt: Date
    _count: AssetFinalReviewTeamCountAggregateOutputType | null
    _avg: AssetFinalReviewTeamAvgAggregateOutputType | null
    _sum: AssetFinalReviewTeamSumAggregateOutputType | null
    _min: AssetFinalReviewTeamMinAggregateOutputType | null
    _max: AssetFinalReviewTeamMaxAggregateOutputType | null
  }

  type GetAssetFinalReviewTeamGroupByPayload<T extends AssetFinalReviewTeamGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AssetFinalReviewTeamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssetFinalReviewTeamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssetFinalReviewTeamGroupByOutputType[P]>
            : GetScalarType<T[P], AssetFinalReviewTeamGroupByOutputType[P]>
        }
      >
    >


  export type AssetFinalReviewTeamSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    asset_id?: boolean
    team_id?: boolean
    createdAt?: boolean
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assetFinalReviewTeam"]>

  export type AssetFinalReviewTeamSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    asset_id?: boolean
    team_id?: boolean
    createdAt?: boolean
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assetFinalReviewTeam"]>

  export type AssetFinalReviewTeamSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    asset_id?: boolean
    team_id?: boolean
    createdAt?: boolean
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assetFinalReviewTeam"]>

  export type AssetFinalReviewTeamSelectScalar = {
    id?: boolean
    asset_id?: boolean
    team_id?: boolean
    createdAt?: boolean
  }

  export type AssetFinalReviewTeamOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "asset_id" | "team_id" | "createdAt", ExtArgs["result"]["assetFinalReviewTeam"]>
  export type AssetFinalReviewTeamInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }
  export type AssetFinalReviewTeamIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }
  export type AssetFinalReviewTeamIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }

  export type $AssetFinalReviewTeamPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AssetFinalReviewTeam"
    objects: {
      asset: Prisma.$AssetPayload<ExtArgs>
      team: Prisma.$TeamPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      asset_id: number
      team_id: number
      createdAt: Date
    }, ExtArgs["result"]["assetFinalReviewTeam"]>
    composites: {}
  }

  type AssetFinalReviewTeamGetPayload<S extends boolean | null | undefined | AssetFinalReviewTeamDefaultArgs> = $Result.GetResult<Prisma.$AssetFinalReviewTeamPayload, S>

  type AssetFinalReviewTeamCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AssetFinalReviewTeamFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AssetFinalReviewTeamCountAggregateInputType | true
    }

  export interface AssetFinalReviewTeamDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AssetFinalReviewTeam'], meta: { name: 'AssetFinalReviewTeam' } }
    /**
     * Find zero or one AssetFinalReviewTeam that matches the filter.
     * @param {AssetFinalReviewTeamFindUniqueArgs} args - Arguments to find a AssetFinalReviewTeam
     * @example
     * // Get one AssetFinalReviewTeam
     * const assetFinalReviewTeam = await prisma.assetFinalReviewTeam.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AssetFinalReviewTeamFindUniqueArgs>(args: SelectSubset<T, AssetFinalReviewTeamFindUniqueArgs<ExtArgs>>): Prisma__AssetFinalReviewTeamClient<$Result.GetResult<Prisma.$AssetFinalReviewTeamPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AssetFinalReviewTeam that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AssetFinalReviewTeamFindUniqueOrThrowArgs} args - Arguments to find a AssetFinalReviewTeam
     * @example
     * // Get one AssetFinalReviewTeam
     * const assetFinalReviewTeam = await prisma.assetFinalReviewTeam.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AssetFinalReviewTeamFindUniqueOrThrowArgs>(args: SelectSubset<T, AssetFinalReviewTeamFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AssetFinalReviewTeamClient<$Result.GetResult<Prisma.$AssetFinalReviewTeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AssetFinalReviewTeam that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetFinalReviewTeamFindFirstArgs} args - Arguments to find a AssetFinalReviewTeam
     * @example
     * // Get one AssetFinalReviewTeam
     * const assetFinalReviewTeam = await prisma.assetFinalReviewTeam.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AssetFinalReviewTeamFindFirstArgs>(args?: SelectSubset<T, AssetFinalReviewTeamFindFirstArgs<ExtArgs>>): Prisma__AssetFinalReviewTeamClient<$Result.GetResult<Prisma.$AssetFinalReviewTeamPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AssetFinalReviewTeam that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetFinalReviewTeamFindFirstOrThrowArgs} args - Arguments to find a AssetFinalReviewTeam
     * @example
     * // Get one AssetFinalReviewTeam
     * const assetFinalReviewTeam = await prisma.assetFinalReviewTeam.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AssetFinalReviewTeamFindFirstOrThrowArgs>(args?: SelectSubset<T, AssetFinalReviewTeamFindFirstOrThrowArgs<ExtArgs>>): Prisma__AssetFinalReviewTeamClient<$Result.GetResult<Prisma.$AssetFinalReviewTeamPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AssetFinalReviewTeams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetFinalReviewTeamFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AssetFinalReviewTeams
     * const assetFinalReviewTeams = await prisma.assetFinalReviewTeam.findMany()
     * 
     * // Get first 10 AssetFinalReviewTeams
     * const assetFinalReviewTeams = await prisma.assetFinalReviewTeam.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const assetFinalReviewTeamWithIdOnly = await prisma.assetFinalReviewTeam.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AssetFinalReviewTeamFindManyArgs>(args?: SelectSubset<T, AssetFinalReviewTeamFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetFinalReviewTeamPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AssetFinalReviewTeam.
     * @param {AssetFinalReviewTeamCreateArgs} args - Arguments to create a AssetFinalReviewTeam.
     * @example
     * // Create one AssetFinalReviewTeam
     * const AssetFinalReviewTeam = await prisma.assetFinalReviewTeam.create({
     *   data: {
     *     // ... data to create a AssetFinalReviewTeam
     *   }
     * })
     * 
     */
    create<T extends AssetFinalReviewTeamCreateArgs>(args: SelectSubset<T, AssetFinalReviewTeamCreateArgs<ExtArgs>>): Prisma__AssetFinalReviewTeamClient<$Result.GetResult<Prisma.$AssetFinalReviewTeamPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AssetFinalReviewTeams.
     * @param {AssetFinalReviewTeamCreateManyArgs} args - Arguments to create many AssetFinalReviewTeams.
     * @example
     * // Create many AssetFinalReviewTeams
     * const assetFinalReviewTeam = await prisma.assetFinalReviewTeam.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AssetFinalReviewTeamCreateManyArgs>(args?: SelectSubset<T, AssetFinalReviewTeamCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AssetFinalReviewTeams and returns the data saved in the database.
     * @param {AssetFinalReviewTeamCreateManyAndReturnArgs} args - Arguments to create many AssetFinalReviewTeams.
     * @example
     * // Create many AssetFinalReviewTeams
     * const assetFinalReviewTeam = await prisma.assetFinalReviewTeam.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AssetFinalReviewTeams and only return the `id`
     * const assetFinalReviewTeamWithIdOnly = await prisma.assetFinalReviewTeam.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AssetFinalReviewTeamCreateManyAndReturnArgs>(args?: SelectSubset<T, AssetFinalReviewTeamCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetFinalReviewTeamPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AssetFinalReviewTeam.
     * @param {AssetFinalReviewTeamDeleteArgs} args - Arguments to delete one AssetFinalReviewTeam.
     * @example
     * // Delete one AssetFinalReviewTeam
     * const AssetFinalReviewTeam = await prisma.assetFinalReviewTeam.delete({
     *   where: {
     *     // ... filter to delete one AssetFinalReviewTeam
     *   }
     * })
     * 
     */
    delete<T extends AssetFinalReviewTeamDeleteArgs>(args: SelectSubset<T, AssetFinalReviewTeamDeleteArgs<ExtArgs>>): Prisma__AssetFinalReviewTeamClient<$Result.GetResult<Prisma.$AssetFinalReviewTeamPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AssetFinalReviewTeam.
     * @param {AssetFinalReviewTeamUpdateArgs} args - Arguments to update one AssetFinalReviewTeam.
     * @example
     * // Update one AssetFinalReviewTeam
     * const assetFinalReviewTeam = await prisma.assetFinalReviewTeam.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AssetFinalReviewTeamUpdateArgs>(args: SelectSubset<T, AssetFinalReviewTeamUpdateArgs<ExtArgs>>): Prisma__AssetFinalReviewTeamClient<$Result.GetResult<Prisma.$AssetFinalReviewTeamPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AssetFinalReviewTeams.
     * @param {AssetFinalReviewTeamDeleteManyArgs} args - Arguments to filter AssetFinalReviewTeams to delete.
     * @example
     * // Delete a few AssetFinalReviewTeams
     * const { count } = await prisma.assetFinalReviewTeam.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AssetFinalReviewTeamDeleteManyArgs>(args?: SelectSubset<T, AssetFinalReviewTeamDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AssetFinalReviewTeams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetFinalReviewTeamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AssetFinalReviewTeams
     * const assetFinalReviewTeam = await prisma.assetFinalReviewTeam.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AssetFinalReviewTeamUpdateManyArgs>(args: SelectSubset<T, AssetFinalReviewTeamUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AssetFinalReviewTeams and returns the data updated in the database.
     * @param {AssetFinalReviewTeamUpdateManyAndReturnArgs} args - Arguments to update many AssetFinalReviewTeams.
     * @example
     * // Update many AssetFinalReviewTeams
     * const assetFinalReviewTeam = await prisma.assetFinalReviewTeam.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AssetFinalReviewTeams and only return the `id`
     * const assetFinalReviewTeamWithIdOnly = await prisma.assetFinalReviewTeam.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AssetFinalReviewTeamUpdateManyAndReturnArgs>(args: SelectSubset<T, AssetFinalReviewTeamUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetFinalReviewTeamPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AssetFinalReviewTeam.
     * @param {AssetFinalReviewTeamUpsertArgs} args - Arguments to update or create a AssetFinalReviewTeam.
     * @example
     * // Update or create a AssetFinalReviewTeam
     * const assetFinalReviewTeam = await prisma.assetFinalReviewTeam.upsert({
     *   create: {
     *     // ... data to create a AssetFinalReviewTeam
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AssetFinalReviewTeam we want to update
     *   }
     * })
     */
    upsert<T extends AssetFinalReviewTeamUpsertArgs>(args: SelectSubset<T, AssetFinalReviewTeamUpsertArgs<ExtArgs>>): Prisma__AssetFinalReviewTeamClient<$Result.GetResult<Prisma.$AssetFinalReviewTeamPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AssetFinalReviewTeams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetFinalReviewTeamCountArgs} args - Arguments to filter AssetFinalReviewTeams to count.
     * @example
     * // Count the number of AssetFinalReviewTeams
     * const count = await prisma.assetFinalReviewTeam.count({
     *   where: {
     *     // ... the filter for the AssetFinalReviewTeams we want to count
     *   }
     * })
    **/
    count<T extends AssetFinalReviewTeamCountArgs>(
      args?: Subset<T, AssetFinalReviewTeamCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssetFinalReviewTeamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AssetFinalReviewTeam.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetFinalReviewTeamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssetFinalReviewTeamAggregateArgs>(args: Subset<T, AssetFinalReviewTeamAggregateArgs>): Prisma.PrismaPromise<GetAssetFinalReviewTeamAggregateType<T>>

    /**
     * Group by AssetFinalReviewTeam.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetFinalReviewTeamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AssetFinalReviewTeamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssetFinalReviewTeamGroupByArgs['orderBy'] }
        : { orderBy?: AssetFinalReviewTeamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AssetFinalReviewTeamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssetFinalReviewTeamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AssetFinalReviewTeam model
   */
  readonly fields: AssetFinalReviewTeamFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AssetFinalReviewTeam.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AssetFinalReviewTeamClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    asset<T extends AssetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AssetDefaultArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    team<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AssetFinalReviewTeam model
   */
  interface AssetFinalReviewTeamFieldRefs {
    readonly id: FieldRef<"AssetFinalReviewTeam", 'Int'>
    readonly asset_id: FieldRef<"AssetFinalReviewTeam", 'Int'>
    readonly team_id: FieldRef<"AssetFinalReviewTeam", 'Int'>
    readonly createdAt: FieldRef<"AssetFinalReviewTeam", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AssetFinalReviewTeam findUnique
   */
  export type AssetFinalReviewTeamFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetFinalReviewTeam
     */
    select?: AssetFinalReviewTeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetFinalReviewTeam
     */
    omit?: AssetFinalReviewTeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetFinalReviewTeamInclude<ExtArgs> | null
    /**
     * Filter, which AssetFinalReviewTeam to fetch.
     */
    where: AssetFinalReviewTeamWhereUniqueInput
  }

  /**
   * AssetFinalReviewTeam findUniqueOrThrow
   */
  export type AssetFinalReviewTeamFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetFinalReviewTeam
     */
    select?: AssetFinalReviewTeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetFinalReviewTeam
     */
    omit?: AssetFinalReviewTeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetFinalReviewTeamInclude<ExtArgs> | null
    /**
     * Filter, which AssetFinalReviewTeam to fetch.
     */
    where: AssetFinalReviewTeamWhereUniqueInput
  }

  /**
   * AssetFinalReviewTeam findFirst
   */
  export type AssetFinalReviewTeamFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetFinalReviewTeam
     */
    select?: AssetFinalReviewTeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetFinalReviewTeam
     */
    omit?: AssetFinalReviewTeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetFinalReviewTeamInclude<ExtArgs> | null
    /**
     * Filter, which AssetFinalReviewTeam to fetch.
     */
    where?: AssetFinalReviewTeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetFinalReviewTeams to fetch.
     */
    orderBy?: AssetFinalReviewTeamOrderByWithRelationInput | AssetFinalReviewTeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AssetFinalReviewTeams.
     */
    cursor?: AssetFinalReviewTeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetFinalReviewTeams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetFinalReviewTeams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AssetFinalReviewTeams.
     */
    distinct?: AssetFinalReviewTeamScalarFieldEnum | AssetFinalReviewTeamScalarFieldEnum[]
  }

  /**
   * AssetFinalReviewTeam findFirstOrThrow
   */
  export type AssetFinalReviewTeamFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetFinalReviewTeam
     */
    select?: AssetFinalReviewTeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetFinalReviewTeam
     */
    omit?: AssetFinalReviewTeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetFinalReviewTeamInclude<ExtArgs> | null
    /**
     * Filter, which AssetFinalReviewTeam to fetch.
     */
    where?: AssetFinalReviewTeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetFinalReviewTeams to fetch.
     */
    orderBy?: AssetFinalReviewTeamOrderByWithRelationInput | AssetFinalReviewTeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AssetFinalReviewTeams.
     */
    cursor?: AssetFinalReviewTeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetFinalReviewTeams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetFinalReviewTeams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AssetFinalReviewTeams.
     */
    distinct?: AssetFinalReviewTeamScalarFieldEnum | AssetFinalReviewTeamScalarFieldEnum[]
  }

  /**
   * AssetFinalReviewTeam findMany
   */
  export type AssetFinalReviewTeamFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetFinalReviewTeam
     */
    select?: AssetFinalReviewTeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetFinalReviewTeam
     */
    omit?: AssetFinalReviewTeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetFinalReviewTeamInclude<ExtArgs> | null
    /**
     * Filter, which AssetFinalReviewTeams to fetch.
     */
    where?: AssetFinalReviewTeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetFinalReviewTeams to fetch.
     */
    orderBy?: AssetFinalReviewTeamOrderByWithRelationInput | AssetFinalReviewTeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AssetFinalReviewTeams.
     */
    cursor?: AssetFinalReviewTeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetFinalReviewTeams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetFinalReviewTeams.
     */
    skip?: number
    distinct?: AssetFinalReviewTeamScalarFieldEnum | AssetFinalReviewTeamScalarFieldEnum[]
  }

  /**
   * AssetFinalReviewTeam create
   */
  export type AssetFinalReviewTeamCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetFinalReviewTeam
     */
    select?: AssetFinalReviewTeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetFinalReviewTeam
     */
    omit?: AssetFinalReviewTeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetFinalReviewTeamInclude<ExtArgs> | null
    /**
     * The data needed to create a AssetFinalReviewTeam.
     */
    data: XOR<AssetFinalReviewTeamCreateInput, AssetFinalReviewTeamUncheckedCreateInput>
  }

  /**
   * AssetFinalReviewTeam createMany
   */
  export type AssetFinalReviewTeamCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AssetFinalReviewTeams.
     */
    data: AssetFinalReviewTeamCreateManyInput | AssetFinalReviewTeamCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AssetFinalReviewTeam createManyAndReturn
   */
  export type AssetFinalReviewTeamCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetFinalReviewTeam
     */
    select?: AssetFinalReviewTeamSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AssetFinalReviewTeam
     */
    omit?: AssetFinalReviewTeamOmit<ExtArgs> | null
    /**
     * The data used to create many AssetFinalReviewTeams.
     */
    data: AssetFinalReviewTeamCreateManyInput | AssetFinalReviewTeamCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetFinalReviewTeamIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AssetFinalReviewTeam update
   */
  export type AssetFinalReviewTeamUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetFinalReviewTeam
     */
    select?: AssetFinalReviewTeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetFinalReviewTeam
     */
    omit?: AssetFinalReviewTeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetFinalReviewTeamInclude<ExtArgs> | null
    /**
     * The data needed to update a AssetFinalReviewTeam.
     */
    data: XOR<AssetFinalReviewTeamUpdateInput, AssetFinalReviewTeamUncheckedUpdateInput>
    /**
     * Choose, which AssetFinalReviewTeam to update.
     */
    where: AssetFinalReviewTeamWhereUniqueInput
  }

  /**
   * AssetFinalReviewTeam updateMany
   */
  export type AssetFinalReviewTeamUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AssetFinalReviewTeams.
     */
    data: XOR<AssetFinalReviewTeamUpdateManyMutationInput, AssetFinalReviewTeamUncheckedUpdateManyInput>
    /**
     * Filter which AssetFinalReviewTeams to update
     */
    where?: AssetFinalReviewTeamWhereInput
    /**
     * Limit how many AssetFinalReviewTeams to update.
     */
    limit?: number
  }

  /**
   * AssetFinalReviewTeam updateManyAndReturn
   */
  export type AssetFinalReviewTeamUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetFinalReviewTeam
     */
    select?: AssetFinalReviewTeamSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AssetFinalReviewTeam
     */
    omit?: AssetFinalReviewTeamOmit<ExtArgs> | null
    /**
     * The data used to update AssetFinalReviewTeams.
     */
    data: XOR<AssetFinalReviewTeamUpdateManyMutationInput, AssetFinalReviewTeamUncheckedUpdateManyInput>
    /**
     * Filter which AssetFinalReviewTeams to update
     */
    where?: AssetFinalReviewTeamWhereInput
    /**
     * Limit how many AssetFinalReviewTeams to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetFinalReviewTeamIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AssetFinalReviewTeam upsert
   */
  export type AssetFinalReviewTeamUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetFinalReviewTeam
     */
    select?: AssetFinalReviewTeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetFinalReviewTeam
     */
    omit?: AssetFinalReviewTeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetFinalReviewTeamInclude<ExtArgs> | null
    /**
     * The filter to search for the AssetFinalReviewTeam to update in case it exists.
     */
    where: AssetFinalReviewTeamWhereUniqueInput
    /**
     * In case the AssetFinalReviewTeam found by the `where` argument doesn't exist, create a new AssetFinalReviewTeam with this data.
     */
    create: XOR<AssetFinalReviewTeamCreateInput, AssetFinalReviewTeamUncheckedCreateInput>
    /**
     * In case the AssetFinalReviewTeam was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AssetFinalReviewTeamUpdateInput, AssetFinalReviewTeamUncheckedUpdateInput>
  }

  /**
   * AssetFinalReviewTeam delete
   */
  export type AssetFinalReviewTeamDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetFinalReviewTeam
     */
    select?: AssetFinalReviewTeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetFinalReviewTeam
     */
    omit?: AssetFinalReviewTeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetFinalReviewTeamInclude<ExtArgs> | null
    /**
     * Filter which AssetFinalReviewTeam to delete.
     */
    where: AssetFinalReviewTeamWhereUniqueInput
  }

  /**
   * AssetFinalReviewTeam deleteMany
   */
  export type AssetFinalReviewTeamDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AssetFinalReviewTeams to delete
     */
    where?: AssetFinalReviewTeamWhereInput
    /**
     * Limit how many AssetFinalReviewTeams to delete.
     */
    limit?: number
  }

  /**
   * AssetFinalReviewTeam without action
   */
  export type AssetFinalReviewTeamDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetFinalReviewTeam
     */
    select?: AssetFinalReviewTeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetFinalReviewTeam
     */
    omit?: AssetFinalReviewTeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetFinalReviewTeamInclude<ExtArgs> | null
  }


  /**
   * Model AssetRevision
   */

  export type AggregateAssetRevision = {
    _count: AssetRevisionCountAggregateOutputType | null
    _avg: AssetRevisionAvgAggregateOutputType | null
    _sum: AssetRevisionSumAggregateOutputType | null
    _min: AssetRevisionMinAggregateOutputType | null
    _max: AssetRevisionMaxAggregateOutputType | null
  }

  export type AssetRevisionAvgAggregateOutputType = {
    id: number | null
    asset_id: number | null
    uploader_id: number | null
    phase1Approvals: number | null
    phase1Rejections: number | null
    phase1TotalVotes: number | null
    phase2Approvals: number | null
    phase2Rejections: number | null
    phase2TotalVotes: number | null
  }

  export type AssetRevisionSumAggregateOutputType = {
    id: number | null
    asset_id: number | null
    uploader_id: number | null
    phase1Approvals: number | null
    phase1Rejections: number | null
    phase1TotalVotes: number | null
    phase2Approvals: number | null
    phase2Rejections: number | null
    phase2TotalVotes: number | null
  }

  export type AssetRevisionMinAggregateOutputType = {
    id: number | null
    asset_id: number | null
    imageUrl: string | null
    uploader_id: number | null
    description: string | null
    phase1Approvals: number | null
    phase1Rejections: number | null
    phase1TotalVotes: number | null
    phase1CompletedAt: Date | null
    phase2Approvals: number | null
    phase2Rejections: number | null
    phase2TotalVotes: number | null
    phase2CompletedAt: Date | null
    status: $Enums.AssetStatus | null
    notificationSent: boolean | null
    archivedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AssetRevisionMaxAggregateOutputType = {
    id: number | null
    asset_id: number | null
    imageUrl: string | null
    uploader_id: number | null
    description: string | null
    phase1Approvals: number | null
    phase1Rejections: number | null
    phase1TotalVotes: number | null
    phase1CompletedAt: Date | null
    phase2Approvals: number | null
    phase2Rejections: number | null
    phase2TotalVotes: number | null
    phase2CompletedAt: Date | null
    status: $Enums.AssetStatus | null
    notificationSent: boolean | null
    archivedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AssetRevisionCountAggregateOutputType = {
    id: number
    asset_id: number
    imageUrl: number
    uploader_id: number
    description: number
    phase1Approvals: number
    phase1Rejections: number
    phase1TotalVotes: number
    phase1CompletedAt: number
    phase2Approvals: number
    phase2Rejections: number
    phase2TotalVotes: number
    phase2CompletedAt: number
    status: number
    notificationSent: number
    archivedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AssetRevisionAvgAggregateInputType = {
    id?: true
    asset_id?: true
    uploader_id?: true
    phase1Approvals?: true
    phase1Rejections?: true
    phase1TotalVotes?: true
    phase2Approvals?: true
    phase2Rejections?: true
    phase2TotalVotes?: true
  }

  export type AssetRevisionSumAggregateInputType = {
    id?: true
    asset_id?: true
    uploader_id?: true
    phase1Approvals?: true
    phase1Rejections?: true
    phase1TotalVotes?: true
    phase2Approvals?: true
    phase2Rejections?: true
    phase2TotalVotes?: true
  }

  export type AssetRevisionMinAggregateInputType = {
    id?: true
    asset_id?: true
    imageUrl?: true
    uploader_id?: true
    description?: true
    phase1Approvals?: true
    phase1Rejections?: true
    phase1TotalVotes?: true
    phase1CompletedAt?: true
    phase2Approvals?: true
    phase2Rejections?: true
    phase2TotalVotes?: true
    phase2CompletedAt?: true
    status?: true
    notificationSent?: true
    archivedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AssetRevisionMaxAggregateInputType = {
    id?: true
    asset_id?: true
    imageUrl?: true
    uploader_id?: true
    description?: true
    phase1Approvals?: true
    phase1Rejections?: true
    phase1TotalVotes?: true
    phase1CompletedAt?: true
    phase2Approvals?: true
    phase2Rejections?: true
    phase2TotalVotes?: true
    phase2CompletedAt?: true
    status?: true
    notificationSent?: true
    archivedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AssetRevisionCountAggregateInputType = {
    id?: true
    asset_id?: true
    imageUrl?: true
    uploader_id?: true
    description?: true
    phase1Approvals?: true
    phase1Rejections?: true
    phase1TotalVotes?: true
    phase1CompletedAt?: true
    phase2Approvals?: true
    phase2Rejections?: true
    phase2TotalVotes?: true
    phase2CompletedAt?: true
    status?: true
    notificationSent?: true
    archivedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AssetRevisionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AssetRevision to aggregate.
     */
    where?: AssetRevisionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetRevisions to fetch.
     */
    orderBy?: AssetRevisionOrderByWithRelationInput | AssetRevisionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AssetRevisionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetRevisions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetRevisions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AssetRevisions
    **/
    _count?: true | AssetRevisionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AssetRevisionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AssetRevisionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssetRevisionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssetRevisionMaxAggregateInputType
  }

  export type GetAssetRevisionAggregateType<T extends AssetRevisionAggregateArgs> = {
        [P in keyof T & keyof AggregateAssetRevision]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAssetRevision[P]>
      : GetScalarType<T[P], AggregateAssetRevision[P]>
  }




  export type AssetRevisionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetRevisionWhereInput
    orderBy?: AssetRevisionOrderByWithAggregationInput | AssetRevisionOrderByWithAggregationInput[]
    by: AssetRevisionScalarFieldEnum[] | AssetRevisionScalarFieldEnum
    having?: AssetRevisionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssetRevisionCountAggregateInputType | true
    _avg?: AssetRevisionAvgAggregateInputType
    _sum?: AssetRevisionSumAggregateInputType
    _min?: AssetRevisionMinAggregateInputType
    _max?: AssetRevisionMaxAggregateInputType
  }

  export type AssetRevisionGroupByOutputType = {
    id: number
    asset_id: number
    imageUrl: string
    uploader_id: number
    description: string | null
    phase1Approvals: number
    phase1Rejections: number
    phase1TotalVotes: number
    phase1CompletedAt: Date | null
    phase2Approvals: number
    phase2Rejections: number
    phase2TotalVotes: number
    phase2CompletedAt: Date | null
    status: $Enums.AssetStatus
    notificationSent: boolean
    archivedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: AssetRevisionCountAggregateOutputType | null
    _avg: AssetRevisionAvgAggregateOutputType | null
    _sum: AssetRevisionSumAggregateOutputType | null
    _min: AssetRevisionMinAggregateOutputType | null
    _max: AssetRevisionMaxAggregateOutputType | null
  }

  type GetAssetRevisionGroupByPayload<T extends AssetRevisionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AssetRevisionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssetRevisionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssetRevisionGroupByOutputType[P]>
            : GetScalarType<T[P], AssetRevisionGroupByOutputType[P]>
        }
      >
    >


  export type AssetRevisionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    asset_id?: boolean
    imageUrl?: boolean
    uploader_id?: boolean
    description?: boolean
    phase1Approvals?: boolean
    phase1Rejections?: boolean
    phase1TotalVotes?: boolean
    phase1CompletedAt?: boolean
    phase2Approvals?: boolean
    phase2Rejections?: boolean
    phase2TotalVotes?: boolean
    phase2CompletedAt?: boolean
    status?: boolean
    notificationSent?: boolean
    archivedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    uploader?: boolean | UserDefaultArgs<ExtArgs>
    votes?: boolean | AssetRevision$votesArgs<ExtArgs>
    comments?: boolean | AssetRevision$commentsArgs<ExtArgs>
    userInteractions?: boolean | AssetRevision$userInteractionsArgs<ExtArgs>
    _count?: boolean | AssetRevisionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assetRevision"]>

  export type AssetRevisionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    asset_id?: boolean
    imageUrl?: boolean
    uploader_id?: boolean
    description?: boolean
    phase1Approvals?: boolean
    phase1Rejections?: boolean
    phase1TotalVotes?: boolean
    phase1CompletedAt?: boolean
    phase2Approvals?: boolean
    phase2Rejections?: boolean
    phase2TotalVotes?: boolean
    phase2CompletedAt?: boolean
    status?: boolean
    notificationSent?: boolean
    archivedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    uploader?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assetRevision"]>

  export type AssetRevisionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    asset_id?: boolean
    imageUrl?: boolean
    uploader_id?: boolean
    description?: boolean
    phase1Approvals?: boolean
    phase1Rejections?: boolean
    phase1TotalVotes?: boolean
    phase1CompletedAt?: boolean
    phase2Approvals?: boolean
    phase2Rejections?: boolean
    phase2TotalVotes?: boolean
    phase2CompletedAt?: boolean
    status?: boolean
    notificationSent?: boolean
    archivedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    uploader?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assetRevision"]>

  export type AssetRevisionSelectScalar = {
    id?: boolean
    asset_id?: boolean
    imageUrl?: boolean
    uploader_id?: boolean
    description?: boolean
    phase1Approvals?: boolean
    phase1Rejections?: boolean
    phase1TotalVotes?: boolean
    phase1CompletedAt?: boolean
    phase2Approvals?: boolean
    phase2Rejections?: boolean
    phase2TotalVotes?: boolean
    phase2CompletedAt?: boolean
    status?: boolean
    notificationSent?: boolean
    archivedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AssetRevisionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "asset_id" | "imageUrl" | "uploader_id" | "description" | "phase1Approvals" | "phase1Rejections" | "phase1TotalVotes" | "phase1CompletedAt" | "phase2Approvals" | "phase2Rejections" | "phase2TotalVotes" | "phase2CompletedAt" | "status" | "notificationSent" | "archivedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["assetRevision"]>
  export type AssetRevisionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    uploader?: boolean | UserDefaultArgs<ExtArgs>
    votes?: boolean | AssetRevision$votesArgs<ExtArgs>
    comments?: boolean | AssetRevision$commentsArgs<ExtArgs>
    userInteractions?: boolean | AssetRevision$userInteractionsArgs<ExtArgs>
    _count?: boolean | AssetRevisionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AssetRevisionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    uploader?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AssetRevisionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    uploader?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AssetRevisionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AssetRevision"
    objects: {
      asset: Prisma.$AssetPayload<ExtArgs>
      uploader: Prisma.$UserPayload<ExtArgs>
      votes: Prisma.$AssetVotePayload<ExtArgs>[]
      comments: Prisma.$RevisionCommentPayload<ExtArgs>[]
      userInteractions: Prisma.$UserAssetInteractionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      asset_id: number
      imageUrl: string
      uploader_id: number
      description: string | null
      phase1Approvals: number
      phase1Rejections: number
      phase1TotalVotes: number
      phase1CompletedAt: Date | null
      phase2Approvals: number
      phase2Rejections: number
      phase2TotalVotes: number
      phase2CompletedAt: Date | null
      status: $Enums.AssetStatus
      notificationSent: boolean
      archivedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["assetRevision"]>
    composites: {}
  }

  type AssetRevisionGetPayload<S extends boolean | null | undefined | AssetRevisionDefaultArgs> = $Result.GetResult<Prisma.$AssetRevisionPayload, S>

  type AssetRevisionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AssetRevisionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AssetRevisionCountAggregateInputType | true
    }

  export interface AssetRevisionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AssetRevision'], meta: { name: 'AssetRevision' } }
    /**
     * Find zero or one AssetRevision that matches the filter.
     * @param {AssetRevisionFindUniqueArgs} args - Arguments to find a AssetRevision
     * @example
     * // Get one AssetRevision
     * const assetRevision = await prisma.assetRevision.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AssetRevisionFindUniqueArgs>(args: SelectSubset<T, AssetRevisionFindUniqueArgs<ExtArgs>>): Prisma__AssetRevisionClient<$Result.GetResult<Prisma.$AssetRevisionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AssetRevision that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AssetRevisionFindUniqueOrThrowArgs} args - Arguments to find a AssetRevision
     * @example
     * // Get one AssetRevision
     * const assetRevision = await prisma.assetRevision.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AssetRevisionFindUniqueOrThrowArgs>(args: SelectSubset<T, AssetRevisionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AssetRevisionClient<$Result.GetResult<Prisma.$AssetRevisionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AssetRevision that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetRevisionFindFirstArgs} args - Arguments to find a AssetRevision
     * @example
     * // Get one AssetRevision
     * const assetRevision = await prisma.assetRevision.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AssetRevisionFindFirstArgs>(args?: SelectSubset<T, AssetRevisionFindFirstArgs<ExtArgs>>): Prisma__AssetRevisionClient<$Result.GetResult<Prisma.$AssetRevisionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AssetRevision that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetRevisionFindFirstOrThrowArgs} args - Arguments to find a AssetRevision
     * @example
     * // Get one AssetRevision
     * const assetRevision = await prisma.assetRevision.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AssetRevisionFindFirstOrThrowArgs>(args?: SelectSubset<T, AssetRevisionFindFirstOrThrowArgs<ExtArgs>>): Prisma__AssetRevisionClient<$Result.GetResult<Prisma.$AssetRevisionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AssetRevisions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetRevisionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AssetRevisions
     * const assetRevisions = await prisma.assetRevision.findMany()
     * 
     * // Get first 10 AssetRevisions
     * const assetRevisions = await prisma.assetRevision.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const assetRevisionWithIdOnly = await prisma.assetRevision.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AssetRevisionFindManyArgs>(args?: SelectSubset<T, AssetRevisionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetRevisionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AssetRevision.
     * @param {AssetRevisionCreateArgs} args - Arguments to create a AssetRevision.
     * @example
     * // Create one AssetRevision
     * const AssetRevision = await prisma.assetRevision.create({
     *   data: {
     *     // ... data to create a AssetRevision
     *   }
     * })
     * 
     */
    create<T extends AssetRevisionCreateArgs>(args: SelectSubset<T, AssetRevisionCreateArgs<ExtArgs>>): Prisma__AssetRevisionClient<$Result.GetResult<Prisma.$AssetRevisionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AssetRevisions.
     * @param {AssetRevisionCreateManyArgs} args - Arguments to create many AssetRevisions.
     * @example
     * // Create many AssetRevisions
     * const assetRevision = await prisma.assetRevision.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AssetRevisionCreateManyArgs>(args?: SelectSubset<T, AssetRevisionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AssetRevisions and returns the data saved in the database.
     * @param {AssetRevisionCreateManyAndReturnArgs} args - Arguments to create many AssetRevisions.
     * @example
     * // Create many AssetRevisions
     * const assetRevision = await prisma.assetRevision.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AssetRevisions and only return the `id`
     * const assetRevisionWithIdOnly = await prisma.assetRevision.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AssetRevisionCreateManyAndReturnArgs>(args?: SelectSubset<T, AssetRevisionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetRevisionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AssetRevision.
     * @param {AssetRevisionDeleteArgs} args - Arguments to delete one AssetRevision.
     * @example
     * // Delete one AssetRevision
     * const AssetRevision = await prisma.assetRevision.delete({
     *   where: {
     *     // ... filter to delete one AssetRevision
     *   }
     * })
     * 
     */
    delete<T extends AssetRevisionDeleteArgs>(args: SelectSubset<T, AssetRevisionDeleteArgs<ExtArgs>>): Prisma__AssetRevisionClient<$Result.GetResult<Prisma.$AssetRevisionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AssetRevision.
     * @param {AssetRevisionUpdateArgs} args - Arguments to update one AssetRevision.
     * @example
     * // Update one AssetRevision
     * const assetRevision = await prisma.assetRevision.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AssetRevisionUpdateArgs>(args: SelectSubset<T, AssetRevisionUpdateArgs<ExtArgs>>): Prisma__AssetRevisionClient<$Result.GetResult<Prisma.$AssetRevisionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AssetRevisions.
     * @param {AssetRevisionDeleteManyArgs} args - Arguments to filter AssetRevisions to delete.
     * @example
     * // Delete a few AssetRevisions
     * const { count } = await prisma.assetRevision.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AssetRevisionDeleteManyArgs>(args?: SelectSubset<T, AssetRevisionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AssetRevisions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetRevisionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AssetRevisions
     * const assetRevision = await prisma.assetRevision.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AssetRevisionUpdateManyArgs>(args: SelectSubset<T, AssetRevisionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AssetRevisions and returns the data updated in the database.
     * @param {AssetRevisionUpdateManyAndReturnArgs} args - Arguments to update many AssetRevisions.
     * @example
     * // Update many AssetRevisions
     * const assetRevision = await prisma.assetRevision.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AssetRevisions and only return the `id`
     * const assetRevisionWithIdOnly = await prisma.assetRevision.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AssetRevisionUpdateManyAndReturnArgs>(args: SelectSubset<T, AssetRevisionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetRevisionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AssetRevision.
     * @param {AssetRevisionUpsertArgs} args - Arguments to update or create a AssetRevision.
     * @example
     * // Update or create a AssetRevision
     * const assetRevision = await prisma.assetRevision.upsert({
     *   create: {
     *     // ... data to create a AssetRevision
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AssetRevision we want to update
     *   }
     * })
     */
    upsert<T extends AssetRevisionUpsertArgs>(args: SelectSubset<T, AssetRevisionUpsertArgs<ExtArgs>>): Prisma__AssetRevisionClient<$Result.GetResult<Prisma.$AssetRevisionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AssetRevisions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetRevisionCountArgs} args - Arguments to filter AssetRevisions to count.
     * @example
     * // Count the number of AssetRevisions
     * const count = await prisma.assetRevision.count({
     *   where: {
     *     // ... the filter for the AssetRevisions we want to count
     *   }
     * })
    **/
    count<T extends AssetRevisionCountArgs>(
      args?: Subset<T, AssetRevisionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssetRevisionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AssetRevision.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetRevisionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssetRevisionAggregateArgs>(args: Subset<T, AssetRevisionAggregateArgs>): Prisma.PrismaPromise<GetAssetRevisionAggregateType<T>>

    /**
     * Group by AssetRevision.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetRevisionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AssetRevisionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssetRevisionGroupByArgs['orderBy'] }
        : { orderBy?: AssetRevisionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AssetRevisionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssetRevisionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AssetRevision model
   */
  readonly fields: AssetRevisionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AssetRevision.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AssetRevisionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    asset<T extends AssetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AssetDefaultArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    uploader<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    votes<T extends AssetRevision$votesArgs<ExtArgs> = {}>(args?: Subset<T, AssetRevision$votesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetVotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    comments<T extends AssetRevision$commentsArgs<ExtArgs> = {}>(args?: Subset<T, AssetRevision$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RevisionCommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userInteractions<T extends AssetRevision$userInteractionsArgs<ExtArgs> = {}>(args?: Subset<T, AssetRevision$userInteractionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAssetInteractionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AssetRevision model
   */
  interface AssetRevisionFieldRefs {
    readonly id: FieldRef<"AssetRevision", 'Int'>
    readonly asset_id: FieldRef<"AssetRevision", 'Int'>
    readonly imageUrl: FieldRef<"AssetRevision", 'String'>
    readonly uploader_id: FieldRef<"AssetRevision", 'Int'>
    readonly description: FieldRef<"AssetRevision", 'String'>
    readonly phase1Approvals: FieldRef<"AssetRevision", 'Int'>
    readonly phase1Rejections: FieldRef<"AssetRevision", 'Int'>
    readonly phase1TotalVotes: FieldRef<"AssetRevision", 'Int'>
    readonly phase1CompletedAt: FieldRef<"AssetRevision", 'DateTime'>
    readonly phase2Approvals: FieldRef<"AssetRevision", 'Int'>
    readonly phase2Rejections: FieldRef<"AssetRevision", 'Int'>
    readonly phase2TotalVotes: FieldRef<"AssetRevision", 'Int'>
    readonly phase2CompletedAt: FieldRef<"AssetRevision", 'DateTime'>
    readonly status: FieldRef<"AssetRevision", 'AssetStatus'>
    readonly notificationSent: FieldRef<"AssetRevision", 'Boolean'>
    readonly archivedAt: FieldRef<"AssetRevision", 'DateTime'>
    readonly createdAt: FieldRef<"AssetRevision", 'DateTime'>
    readonly updatedAt: FieldRef<"AssetRevision", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AssetRevision findUnique
   */
  export type AssetRevisionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetRevision
     */
    select?: AssetRevisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetRevision
     */
    omit?: AssetRevisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetRevisionInclude<ExtArgs> | null
    /**
     * Filter, which AssetRevision to fetch.
     */
    where: AssetRevisionWhereUniqueInput
  }

  /**
   * AssetRevision findUniqueOrThrow
   */
  export type AssetRevisionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetRevision
     */
    select?: AssetRevisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetRevision
     */
    omit?: AssetRevisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetRevisionInclude<ExtArgs> | null
    /**
     * Filter, which AssetRevision to fetch.
     */
    where: AssetRevisionWhereUniqueInput
  }

  /**
   * AssetRevision findFirst
   */
  export type AssetRevisionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetRevision
     */
    select?: AssetRevisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetRevision
     */
    omit?: AssetRevisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetRevisionInclude<ExtArgs> | null
    /**
     * Filter, which AssetRevision to fetch.
     */
    where?: AssetRevisionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetRevisions to fetch.
     */
    orderBy?: AssetRevisionOrderByWithRelationInput | AssetRevisionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AssetRevisions.
     */
    cursor?: AssetRevisionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetRevisions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetRevisions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AssetRevisions.
     */
    distinct?: AssetRevisionScalarFieldEnum | AssetRevisionScalarFieldEnum[]
  }

  /**
   * AssetRevision findFirstOrThrow
   */
  export type AssetRevisionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetRevision
     */
    select?: AssetRevisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetRevision
     */
    omit?: AssetRevisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetRevisionInclude<ExtArgs> | null
    /**
     * Filter, which AssetRevision to fetch.
     */
    where?: AssetRevisionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetRevisions to fetch.
     */
    orderBy?: AssetRevisionOrderByWithRelationInput | AssetRevisionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AssetRevisions.
     */
    cursor?: AssetRevisionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetRevisions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetRevisions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AssetRevisions.
     */
    distinct?: AssetRevisionScalarFieldEnum | AssetRevisionScalarFieldEnum[]
  }

  /**
   * AssetRevision findMany
   */
  export type AssetRevisionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetRevision
     */
    select?: AssetRevisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetRevision
     */
    omit?: AssetRevisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetRevisionInclude<ExtArgs> | null
    /**
     * Filter, which AssetRevisions to fetch.
     */
    where?: AssetRevisionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetRevisions to fetch.
     */
    orderBy?: AssetRevisionOrderByWithRelationInput | AssetRevisionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AssetRevisions.
     */
    cursor?: AssetRevisionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetRevisions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetRevisions.
     */
    skip?: number
    distinct?: AssetRevisionScalarFieldEnum | AssetRevisionScalarFieldEnum[]
  }

  /**
   * AssetRevision create
   */
  export type AssetRevisionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetRevision
     */
    select?: AssetRevisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetRevision
     */
    omit?: AssetRevisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetRevisionInclude<ExtArgs> | null
    /**
     * The data needed to create a AssetRevision.
     */
    data: XOR<AssetRevisionCreateInput, AssetRevisionUncheckedCreateInput>
  }

  /**
   * AssetRevision createMany
   */
  export type AssetRevisionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AssetRevisions.
     */
    data: AssetRevisionCreateManyInput | AssetRevisionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AssetRevision createManyAndReturn
   */
  export type AssetRevisionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetRevision
     */
    select?: AssetRevisionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AssetRevision
     */
    omit?: AssetRevisionOmit<ExtArgs> | null
    /**
     * The data used to create many AssetRevisions.
     */
    data: AssetRevisionCreateManyInput | AssetRevisionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetRevisionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AssetRevision update
   */
  export type AssetRevisionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetRevision
     */
    select?: AssetRevisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetRevision
     */
    omit?: AssetRevisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetRevisionInclude<ExtArgs> | null
    /**
     * The data needed to update a AssetRevision.
     */
    data: XOR<AssetRevisionUpdateInput, AssetRevisionUncheckedUpdateInput>
    /**
     * Choose, which AssetRevision to update.
     */
    where: AssetRevisionWhereUniqueInput
  }

  /**
   * AssetRevision updateMany
   */
  export type AssetRevisionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AssetRevisions.
     */
    data: XOR<AssetRevisionUpdateManyMutationInput, AssetRevisionUncheckedUpdateManyInput>
    /**
     * Filter which AssetRevisions to update
     */
    where?: AssetRevisionWhereInput
    /**
     * Limit how many AssetRevisions to update.
     */
    limit?: number
  }

  /**
   * AssetRevision updateManyAndReturn
   */
  export type AssetRevisionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetRevision
     */
    select?: AssetRevisionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AssetRevision
     */
    omit?: AssetRevisionOmit<ExtArgs> | null
    /**
     * The data used to update AssetRevisions.
     */
    data: XOR<AssetRevisionUpdateManyMutationInput, AssetRevisionUncheckedUpdateManyInput>
    /**
     * Filter which AssetRevisions to update
     */
    where?: AssetRevisionWhereInput
    /**
     * Limit how many AssetRevisions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetRevisionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AssetRevision upsert
   */
  export type AssetRevisionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetRevision
     */
    select?: AssetRevisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetRevision
     */
    omit?: AssetRevisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetRevisionInclude<ExtArgs> | null
    /**
     * The filter to search for the AssetRevision to update in case it exists.
     */
    where: AssetRevisionWhereUniqueInput
    /**
     * In case the AssetRevision found by the `where` argument doesn't exist, create a new AssetRevision with this data.
     */
    create: XOR<AssetRevisionCreateInput, AssetRevisionUncheckedCreateInput>
    /**
     * In case the AssetRevision was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AssetRevisionUpdateInput, AssetRevisionUncheckedUpdateInput>
  }

  /**
   * AssetRevision delete
   */
  export type AssetRevisionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetRevision
     */
    select?: AssetRevisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetRevision
     */
    omit?: AssetRevisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetRevisionInclude<ExtArgs> | null
    /**
     * Filter which AssetRevision to delete.
     */
    where: AssetRevisionWhereUniqueInput
  }

  /**
   * AssetRevision deleteMany
   */
  export type AssetRevisionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AssetRevisions to delete
     */
    where?: AssetRevisionWhereInput
    /**
     * Limit how many AssetRevisions to delete.
     */
    limit?: number
  }

  /**
   * AssetRevision.votes
   */
  export type AssetRevision$votesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetVote
     */
    select?: AssetVoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetVote
     */
    omit?: AssetVoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetVoteInclude<ExtArgs> | null
    where?: AssetVoteWhereInput
    orderBy?: AssetVoteOrderByWithRelationInput | AssetVoteOrderByWithRelationInput[]
    cursor?: AssetVoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssetVoteScalarFieldEnum | AssetVoteScalarFieldEnum[]
  }

  /**
   * AssetRevision.comments
   */
  export type AssetRevision$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RevisionComment
     */
    select?: RevisionCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RevisionComment
     */
    omit?: RevisionCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RevisionCommentInclude<ExtArgs> | null
    where?: RevisionCommentWhereInput
    orderBy?: RevisionCommentOrderByWithRelationInput | RevisionCommentOrderByWithRelationInput[]
    cursor?: RevisionCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RevisionCommentScalarFieldEnum | RevisionCommentScalarFieldEnum[]
  }

  /**
   * AssetRevision.userInteractions
   */
  export type AssetRevision$userInteractionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAssetInteraction
     */
    select?: UserAssetInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAssetInteraction
     */
    omit?: UserAssetInteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAssetInteractionInclude<ExtArgs> | null
    where?: UserAssetInteractionWhereInput
    orderBy?: UserAssetInteractionOrderByWithRelationInput | UserAssetInteractionOrderByWithRelationInput[]
    cursor?: UserAssetInteractionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserAssetInteractionScalarFieldEnum | UserAssetInteractionScalarFieldEnum[]
  }

  /**
   * AssetRevision without action
   */
  export type AssetRevisionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetRevision
     */
    select?: AssetRevisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetRevision
     */
    omit?: AssetRevisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetRevisionInclude<ExtArgs> | null
  }


  /**
   * Model AssetVote
   */

  export type AggregateAssetVote = {
    _count: AssetVoteCountAggregateOutputType | null
    _avg: AssetVoteAvgAggregateOutputType | null
    _sum: AssetVoteSumAggregateOutputType | null
    _min: AssetVoteMinAggregateOutputType | null
    _max: AssetVoteMaxAggregateOutputType | null
  }

  export type AssetVoteAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    weight: number | null
    asset_id: number | null
    asset_revision_id: number | null
  }

  export type AssetVoteSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    weight: number | null
    asset_id: number | null
    asset_revision_id: number | null
  }

  export type AssetVoteMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    vote: $Enums.VoteType | null
    phase: $Enums.VotePhase | null
    weight: number | null
    createdAt: Date | null
    updatedAt: Date | null
    asset_id: number | null
    asset_revision_id: number | null
  }

  export type AssetVoteMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    vote: $Enums.VoteType | null
    phase: $Enums.VotePhase | null
    weight: number | null
    createdAt: Date | null
    updatedAt: Date | null
    asset_id: number | null
    asset_revision_id: number | null
  }

  export type AssetVoteCountAggregateOutputType = {
    id: number
    user_id: number
    vote: number
    phase: number
    weight: number
    createdAt: number
    updatedAt: number
    asset_id: number
    asset_revision_id: number
    _all: number
  }


  export type AssetVoteAvgAggregateInputType = {
    id?: true
    user_id?: true
    weight?: true
    asset_id?: true
    asset_revision_id?: true
  }

  export type AssetVoteSumAggregateInputType = {
    id?: true
    user_id?: true
    weight?: true
    asset_id?: true
    asset_revision_id?: true
  }

  export type AssetVoteMinAggregateInputType = {
    id?: true
    user_id?: true
    vote?: true
    phase?: true
    weight?: true
    createdAt?: true
    updatedAt?: true
    asset_id?: true
    asset_revision_id?: true
  }

  export type AssetVoteMaxAggregateInputType = {
    id?: true
    user_id?: true
    vote?: true
    phase?: true
    weight?: true
    createdAt?: true
    updatedAt?: true
    asset_id?: true
    asset_revision_id?: true
  }

  export type AssetVoteCountAggregateInputType = {
    id?: true
    user_id?: true
    vote?: true
    phase?: true
    weight?: true
    createdAt?: true
    updatedAt?: true
    asset_id?: true
    asset_revision_id?: true
    _all?: true
  }

  export type AssetVoteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AssetVote to aggregate.
     */
    where?: AssetVoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetVotes to fetch.
     */
    orderBy?: AssetVoteOrderByWithRelationInput | AssetVoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AssetVoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetVotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetVotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AssetVotes
    **/
    _count?: true | AssetVoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AssetVoteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AssetVoteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssetVoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssetVoteMaxAggregateInputType
  }

  export type GetAssetVoteAggregateType<T extends AssetVoteAggregateArgs> = {
        [P in keyof T & keyof AggregateAssetVote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAssetVote[P]>
      : GetScalarType<T[P], AggregateAssetVote[P]>
  }




  export type AssetVoteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetVoteWhereInput
    orderBy?: AssetVoteOrderByWithAggregationInput | AssetVoteOrderByWithAggregationInput[]
    by: AssetVoteScalarFieldEnum[] | AssetVoteScalarFieldEnum
    having?: AssetVoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssetVoteCountAggregateInputType | true
    _avg?: AssetVoteAvgAggregateInputType
    _sum?: AssetVoteSumAggregateInputType
    _min?: AssetVoteMinAggregateInputType
    _max?: AssetVoteMaxAggregateInputType
  }

  export type AssetVoteGroupByOutputType = {
    id: number
    user_id: number
    vote: $Enums.VoteType
    phase: $Enums.VotePhase
    weight: number
    createdAt: Date
    updatedAt: Date
    asset_id: number | null
    asset_revision_id: number | null
    _count: AssetVoteCountAggregateOutputType | null
    _avg: AssetVoteAvgAggregateOutputType | null
    _sum: AssetVoteSumAggregateOutputType | null
    _min: AssetVoteMinAggregateOutputType | null
    _max: AssetVoteMaxAggregateOutputType | null
  }

  type GetAssetVoteGroupByPayload<T extends AssetVoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AssetVoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssetVoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssetVoteGroupByOutputType[P]>
            : GetScalarType<T[P], AssetVoteGroupByOutputType[P]>
        }
      >
    >


  export type AssetVoteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    vote?: boolean
    phase?: boolean
    weight?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    asset_id?: boolean
    asset_revision_id?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    asset?: boolean | AssetVote$assetArgs<ExtArgs>
    revision?: boolean | AssetVote$revisionArgs<ExtArgs>
  }, ExtArgs["result"]["assetVote"]>

  export type AssetVoteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    vote?: boolean
    phase?: boolean
    weight?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    asset_id?: boolean
    asset_revision_id?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    asset?: boolean | AssetVote$assetArgs<ExtArgs>
    revision?: boolean | AssetVote$revisionArgs<ExtArgs>
  }, ExtArgs["result"]["assetVote"]>

  export type AssetVoteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    vote?: boolean
    phase?: boolean
    weight?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    asset_id?: boolean
    asset_revision_id?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    asset?: boolean | AssetVote$assetArgs<ExtArgs>
    revision?: boolean | AssetVote$revisionArgs<ExtArgs>
  }, ExtArgs["result"]["assetVote"]>

  export type AssetVoteSelectScalar = {
    id?: boolean
    user_id?: boolean
    vote?: boolean
    phase?: boolean
    weight?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    asset_id?: boolean
    asset_revision_id?: boolean
  }

  export type AssetVoteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "vote" | "phase" | "weight" | "createdAt" | "updatedAt" | "asset_id" | "asset_revision_id", ExtArgs["result"]["assetVote"]>
  export type AssetVoteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    asset?: boolean | AssetVote$assetArgs<ExtArgs>
    revision?: boolean | AssetVote$revisionArgs<ExtArgs>
  }
  export type AssetVoteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    asset?: boolean | AssetVote$assetArgs<ExtArgs>
    revision?: boolean | AssetVote$revisionArgs<ExtArgs>
  }
  export type AssetVoteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    asset?: boolean | AssetVote$assetArgs<ExtArgs>
    revision?: boolean | AssetVote$revisionArgs<ExtArgs>
  }

  export type $AssetVotePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AssetVote"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      asset: Prisma.$AssetPayload<ExtArgs> | null
      revision: Prisma.$AssetRevisionPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number
      vote: $Enums.VoteType
      phase: $Enums.VotePhase
      weight: number
      createdAt: Date
      updatedAt: Date
      asset_id: number | null
      asset_revision_id: number | null
    }, ExtArgs["result"]["assetVote"]>
    composites: {}
  }

  type AssetVoteGetPayload<S extends boolean | null | undefined | AssetVoteDefaultArgs> = $Result.GetResult<Prisma.$AssetVotePayload, S>

  type AssetVoteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AssetVoteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AssetVoteCountAggregateInputType | true
    }

  export interface AssetVoteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AssetVote'], meta: { name: 'AssetVote' } }
    /**
     * Find zero or one AssetVote that matches the filter.
     * @param {AssetVoteFindUniqueArgs} args - Arguments to find a AssetVote
     * @example
     * // Get one AssetVote
     * const assetVote = await prisma.assetVote.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AssetVoteFindUniqueArgs>(args: SelectSubset<T, AssetVoteFindUniqueArgs<ExtArgs>>): Prisma__AssetVoteClient<$Result.GetResult<Prisma.$AssetVotePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AssetVote that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AssetVoteFindUniqueOrThrowArgs} args - Arguments to find a AssetVote
     * @example
     * // Get one AssetVote
     * const assetVote = await prisma.assetVote.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AssetVoteFindUniqueOrThrowArgs>(args: SelectSubset<T, AssetVoteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AssetVoteClient<$Result.GetResult<Prisma.$AssetVotePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AssetVote that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetVoteFindFirstArgs} args - Arguments to find a AssetVote
     * @example
     * // Get one AssetVote
     * const assetVote = await prisma.assetVote.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AssetVoteFindFirstArgs>(args?: SelectSubset<T, AssetVoteFindFirstArgs<ExtArgs>>): Prisma__AssetVoteClient<$Result.GetResult<Prisma.$AssetVotePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AssetVote that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetVoteFindFirstOrThrowArgs} args - Arguments to find a AssetVote
     * @example
     * // Get one AssetVote
     * const assetVote = await prisma.assetVote.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AssetVoteFindFirstOrThrowArgs>(args?: SelectSubset<T, AssetVoteFindFirstOrThrowArgs<ExtArgs>>): Prisma__AssetVoteClient<$Result.GetResult<Prisma.$AssetVotePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AssetVotes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetVoteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AssetVotes
     * const assetVotes = await prisma.assetVote.findMany()
     * 
     * // Get first 10 AssetVotes
     * const assetVotes = await prisma.assetVote.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const assetVoteWithIdOnly = await prisma.assetVote.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AssetVoteFindManyArgs>(args?: SelectSubset<T, AssetVoteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetVotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AssetVote.
     * @param {AssetVoteCreateArgs} args - Arguments to create a AssetVote.
     * @example
     * // Create one AssetVote
     * const AssetVote = await prisma.assetVote.create({
     *   data: {
     *     // ... data to create a AssetVote
     *   }
     * })
     * 
     */
    create<T extends AssetVoteCreateArgs>(args: SelectSubset<T, AssetVoteCreateArgs<ExtArgs>>): Prisma__AssetVoteClient<$Result.GetResult<Prisma.$AssetVotePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AssetVotes.
     * @param {AssetVoteCreateManyArgs} args - Arguments to create many AssetVotes.
     * @example
     * // Create many AssetVotes
     * const assetVote = await prisma.assetVote.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AssetVoteCreateManyArgs>(args?: SelectSubset<T, AssetVoteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AssetVotes and returns the data saved in the database.
     * @param {AssetVoteCreateManyAndReturnArgs} args - Arguments to create many AssetVotes.
     * @example
     * // Create many AssetVotes
     * const assetVote = await prisma.assetVote.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AssetVotes and only return the `id`
     * const assetVoteWithIdOnly = await prisma.assetVote.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AssetVoteCreateManyAndReturnArgs>(args?: SelectSubset<T, AssetVoteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetVotePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AssetVote.
     * @param {AssetVoteDeleteArgs} args - Arguments to delete one AssetVote.
     * @example
     * // Delete one AssetVote
     * const AssetVote = await prisma.assetVote.delete({
     *   where: {
     *     // ... filter to delete one AssetVote
     *   }
     * })
     * 
     */
    delete<T extends AssetVoteDeleteArgs>(args: SelectSubset<T, AssetVoteDeleteArgs<ExtArgs>>): Prisma__AssetVoteClient<$Result.GetResult<Prisma.$AssetVotePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AssetVote.
     * @param {AssetVoteUpdateArgs} args - Arguments to update one AssetVote.
     * @example
     * // Update one AssetVote
     * const assetVote = await prisma.assetVote.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AssetVoteUpdateArgs>(args: SelectSubset<T, AssetVoteUpdateArgs<ExtArgs>>): Prisma__AssetVoteClient<$Result.GetResult<Prisma.$AssetVotePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AssetVotes.
     * @param {AssetVoteDeleteManyArgs} args - Arguments to filter AssetVotes to delete.
     * @example
     * // Delete a few AssetVotes
     * const { count } = await prisma.assetVote.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AssetVoteDeleteManyArgs>(args?: SelectSubset<T, AssetVoteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AssetVotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetVoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AssetVotes
     * const assetVote = await prisma.assetVote.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AssetVoteUpdateManyArgs>(args: SelectSubset<T, AssetVoteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AssetVotes and returns the data updated in the database.
     * @param {AssetVoteUpdateManyAndReturnArgs} args - Arguments to update many AssetVotes.
     * @example
     * // Update many AssetVotes
     * const assetVote = await prisma.assetVote.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AssetVotes and only return the `id`
     * const assetVoteWithIdOnly = await prisma.assetVote.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AssetVoteUpdateManyAndReturnArgs>(args: SelectSubset<T, AssetVoteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetVotePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AssetVote.
     * @param {AssetVoteUpsertArgs} args - Arguments to update or create a AssetVote.
     * @example
     * // Update or create a AssetVote
     * const assetVote = await prisma.assetVote.upsert({
     *   create: {
     *     // ... data to create a AssetVote
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AssetVote we want to update
     *   }
     * })
     */
    upsert<T extends AssetVoteUpsertArgs>(args: SelectSubset<T, AssetVoteUpsertArgs<ExtArgs>>): Prisma__AssetVoteClient<$Result.GetResult<Prisma.$AssetVotePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AssetVotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetVoteCountArgs} args - Arguments to filter AssetVotes to count.
     * @example
     * // Count the number of AssetVotes
     * const count = await prisma.assetVote.count({
     *   where: {
     *     // ... the filter for the AssetVotes we want to count
     *   }
     * })
    **/
    count<T extends AssetVoteCountArgs>(
      args?: Subset<T, AssetVoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssetVoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AssetVote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetVoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssetVoteAggregateArgs>(args: Subset<T, AssetVoteAggregateArgs>): Prisma.PrismaPromise<GetAssetVoteAggregateType<T>>

    /**
     * Group by AssetVote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetVoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AssetVoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssetVoteGroupByArgs['orderBy'] }
        : { orderBy?: AssetVoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AssetVoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssetVoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AssetVote model
   */
  readonly fields: AssetVoteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AssetVote.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AssetVoteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    asset<T extends AssetVote$assetArgs<ExtArgs> = {}>(args?: Subset<T, AssetVote$assetArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    revision<T extends AssetVote$revisionArgs<ExtArgs> = {}>(args?: Subset<T, AssetVote$revisionArgs<ExtArgs>>): Prisma__AssetRevisionClient<$Result.GetResult<Prisma.$AssetRevisionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AssetVote model
   */
  interface AssetVoteFieldRefs {
    readonly id: FieldRef<"AssetVote", 'Int'>
    readonly user_id: FieldRef<"AssetVote", 'Int'>
    readonly vote: FieldRef<"AssetVote", 'VoteType'>
    readonly phase: FieldRef<"AssetVote", 'VotePhase'>
    readonly weight: FieldRef<"AssetVote", 'Int'>
    readonly createdAt: FieldRef<"AssetVote", 'DateTime'>
    readonly updatedAt: FieldRef<"AssetVote", 'DateTime'>
    readonly asset_id: FieldRef<"AssetVote", 'Int'>
    readonly asset_revision_id: FieldRef<"AssetVote", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * AssetVote findUnique
   */
  export type AssetVoteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetVote
     */
    select?: AssetVoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetVote
     */
    omit?: AssetVoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetVoteInclude<ExtArgs> | null
    /**
     * Filter, which AssetVote to fetch.
     */
    where: AssetVoteWhereUniqueInput
  }

  /**
   * AssetVote findUniqueOrThrow
   */
  export type AssetVoteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetVote
     */
    select?: AssetVoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetVote
     */
    omit?: AssetVoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetVoteInclude<ExtArgs> | null
    /**
     * Filter, which AssetVote to fetch.
     */
    where: AssetVoteWhereUniqueInput
  }

  /**
   * AssetVote findFirst
   */
  export type AssetVoteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetVote
     */
    select?: AssetVoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetVote
     */
    omit?: AssetVoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetVoteInclude<ExtArgs> | null
    /**
     * Filter, which AssetVote to fetch.
     */
    where?: AssetVoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetVotes to fetch.
     */
    orderBy?: AssetVoteOrderByWithRelationInput | AssetVoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AssetVotes.
     */
    cursor?: AssetVoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetVotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetVotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AssetVotes.
     */
    distinct?: AssetVoteScalarFieldEnum | AssetVoteScalarFieldEnum[]
  }

  /**
   * AssetVote findFirstOrThrow
   */
  export type AssetVoteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetVote
     */
    select?: AssetVoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetVote
     */
    omit?: AssetVoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetVoteInclude<ExtArgs> | null
    /**
     * Filter, which AssetVote to fetch.
     */
    where?: AssetVoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetVotes to fetch.
     */
    orderBy?: AssetVoteOrderByWithRelationInput | AssetVoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AssetVotes.
     */
    cursor?: AssetVoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetVotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetVotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AssetVotes.
     */
    distinct?: AssetVoteScalarFieldEnum | AssetVoteScalarFieldEnum[]
  }

  /**
   * AssetVote findMany
   */
  export type AssetVoteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetVote
     */
    select?: AssetVoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetVote
     */
    omit?: AssetVoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetVoteInclude<ExtArgs> | null
    /**
     * Filter, which AssetVotes to fetch.
     */
    where?: AssetVoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetVotes to fetch.
     */
    orderBy?: AssetVoteOrderByWithRelationInput | AssetVoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AssetVotes.
     */
    cursor?: AssetVoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetVotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetVotes.
     */
    skip?: number
    distinct?: AssetVoteScalarFieldEnum | AssetVoteScalarFieldEnum[]
  }

  /**
   * AssetVote create
   */
  export type AssetVoteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetVote
     */
    select?: AssetVoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetVote
     */
    omit?: AssetVoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetVoteInclude<ExtArgs> | null
    /**
     * The data needed to create a AssetVote.
     */
    data: XOR<AssetVoteCreateInput, AssetVoteUncheckedCreateInput>
  }

  /**
   * AssetVote createMany
   */
  export type AssetVoteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AssetVotes.
     */
    data: AssetVoteCreateManyInput | AssetVoteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AssetVote createManyAndReturn
   */
  export type AssetVoteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetVote
     */
    select?: AssetVoteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AssetVote
     */
    omit?: AssetVoteOmit<ExtArgs> | null
    /**
     * The data used to create many AssetVotes.
     */
    data: AssetVoteCreateManyInput | AssetVoteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetVoteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AssetVote update
   */
  export type AssetVoteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetVote
     */
    select?: AssetVoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetVote
     */
    omit?: AssetVoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetVoteInclude<ExtArgs> | null
    /**
     * The data needed to update a AssetVote.
     */
    data: XOR<AssetVoteUpdateInput, AssetVoteUncheckedUpdateInput>
    /**
     * Choose, which AssetVote to update.
     */
    where: AssetVoteWhereUniqueInput
  }

  /**
   * AssetVote updateMany
   */
  export type AssetVoteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AssetVotes.
     */
    data: XOR<AssetVoteUpdateManyMutationInput, AssetVoteUncheckedUpdateManyInput>
    /**
     * Filter which AssetVotes to update
     */
    where?: AssetVoteWhereInput
    /**
     * Limit how many AssetVotes to update.
     */
    limit?: number
  }

  /**
   * AssetVote updateManyAndReturn
   */
  export type AssetVoteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetVote
     */
    select?: AssetVoteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AssetVote
     */
    omit?: AssetVoteOmit<ExtArgs> | null
    /**
     * The data used to update AssetVotes.
     */
    data: XOR<AssetVoteUpdateManyMutationInput, AssetVoteUncheckedUpdateManyInput>
    /**
     * Filter which AssetVotes to update
     */
    where?: AssetVoteWhereInput
    /**
     * Limit how many AssetVotes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetVoteIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AssetVote upsert
   */
  export type AssetVoteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetVote
     */
    select?: AssetVoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetVote
     */
    omit?: AssetVoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetVoteInclude<ExtArgs> | null
    /**
     * The filter to search for the AssetVote to update in case it exists.
     */
    where: AssetVoteWhereUniqueInput
    /**
     * In case the AssetVote found by the `where` argument doesn't exist, create a new AssetVote with this data.
     */
    create: XOR<AssetVoteCreateInput, AssetVoteUncheckedCreateInput>
    /**
     * In case the AssetVote was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AssetVoteUpdateInput, AssetVoteUncheckedUpdateInput>
  }

  /**
   * AssetVote delete
   */
  export type AssetVoteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetVote
     */
    select?: AssetVoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetVote
     */
    omit?: AssetVoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetVoteInclude<ExtArgs> | null
    /**
     * Filter which AssetVote to delete.
     */
    where: AssetVoteWhereUniqueInput
  }

  /**
   * AssetVote deleteMany
   */
  export type AssetVoteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AssetVotes to delete
     */
    where?: AssetVoteWhereInput
    /**
     * Limit how many AssetVotes to delete.
     */
    limit?: number
  }

  /**
   * AssetVote.asset
   */
  export type AssetVote$assetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    where?: AssetWhereInput
  }

  /**
   * AssetVote.revision
   */
  export type AssetVote$revisionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetRevision
     */
    select?: AssetRevisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetRevision
     */
    omit?: AssetRevisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetRevisionInclude<ExtArgs> | null
    where?: AssetRevisionWhereInput
  }

  /**
   * AssetVote without action
   */
  export type AssetVoteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetVote
     */
    select?: AssetVoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetVote
     */
    omit?: AssetVoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetVoteInclude<ExtArgs> | null
  }


  /**
   * Model UserAssetInteraction
   */

  export type AggregateUserAssetInteraction = {
    _count: UserAssetInteractionCountAggregateOutputType | null
    _avg: UserAssetInteractionAvgAggregateOutputType | null
    _sum: UserAssetInteractionSumAggregateOutputType | null
    _min: UserAssetInteractionMinAggregateOutputType | null
    _max: UserAssetInteractionMaxAggregateOutputType | null
  }

  export type UserAssetInteractionAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    asset_id: number | null
    asset_revision_id: number | null
    gameId: number | null
  }

  export type UserAssetInteractionSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    asset_id: number | null
    asset_revision_id: number | null
    gameId: number | null
  }

  export type UserAssetInteractionMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    asset_id: number | null
    asset_revision_id: number | null
    hasVoted: boolean | null
    hasCommented: boolean | null
    dismissedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    gameId: number | null
  }

  export type UserAssetInteractionMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    asset_id: number | null
    asset_revision_id: number | null
    hasVoted: boolean | null
    hasCommented: boolean | null
    dismissedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    gameId: number | null
  }

  export type UserAssetInteractionCountAggregateOutputType = {
    id: number
    user_id: number
    asset_id: number
    asset_revision_id: number
    hasVoted: number
    hasCommented: number
    dismissedAt: number
    createdAt: number
    updatedAt: number
    gameId: number
    _all: number
  }


  export type UserAssetInteractionAvgAggregateInputType = {
    id?: true
    user_id?: true
    asset_id?: true
    asset_revision_id?: true
    gameId?: true
  }

  export type UserAssetInteractionSumAggregateInputType = {
    id?: true
    user_id?: true
    asset_id?: true
    asset_revision_id?: true
    gameId?: true
  }

  export type UserAssetInteractionMinAggregateInputType = {
    id?: true
    user_id?: true
    asset_id?: true
    asset_revision_id?: true
    hasVoted?: true
    hasCommented?: true
    dismissedAt?: true
    createdAt?: true
    updatedAt?: true
    gameId?: true
  }

  export type UserAssetInteractionMaxAggregateInputType = {
    id?: true
    user_id?: true
    asset_id?: true
    asset_revision_id?: true
    hasVoted?: true
    hasCommented?: true
    dismissedAt?: true
    createdAt?: true
    updatedAt?: true
    gameId?: true
  }

  export type UserAssetInteractionCountAggregateInputType = {
    id?: true
    user_id?: true
    asset_id?: true
    asset_revision_id?: true
    hasVoted?: true
    hasCommented?: true
    dismissedAt?: true
    createdAt?: true
    updatedAt?: true
    gameId?: true
    _all?: true
  }

  export type UserAssetInteractionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserAssetInteraction to aggregate.
     */
    where?: UserAssetInteractionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAssetInteractions to fetch.
     */
    orderBy?: UserAssetInteractionOrderByWithRelationInput | UserAssetInteractionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserAssetInteractionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAssetInteractions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAssetInteractions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserAssetInteractions
    **/
    _count?: true | UserAssetInteractionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAssetInteractionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserAssetInteractionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserAssetInteractionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserAssetInteractionMaxAggregateInputType
  }

  export type GetUserAssetInteractionAggregateType<T extends UserAssetInteractionAggregateArgs> = {
        [P in keyof T & keyof AggregateUserAssetInteraction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserAssetInteraction[P]>
      : GetScalarType<T[P], AggregateUserAssetInteraction[P]>
  }




  export type UserAssetInteractionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserAssetInteractionWhereInput
    orderBy?: UserAssetInteractionOrderByWithAggregationInput | UserAssetInteractionOrderByWithAggregationInput[]
    by: UserAssetInteractionScalarFieldEnum[] | UserAssetInteractionScalarFieldEnum
    having?: UserAssetInteractionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserAssetInteractionCountAggregateInputType | true
    _avg?: UserAssetInteractionAvgAggregateInputType
    _sum?: UserAssetInteractionSumAggregateInputType
    _min?: UserAssetInteractionMinAggregateInputType
    _max?: UserAssetInteractionMaxAggregateInputType
  }

  export type UserAssetInteractionGroupByOutputType = {
    id: number
    user_id: number
    asset_id: number | null
    asset_revision_id: number | null
    hasVoted: boolean
    hasCommented: boolean
    dismissedAt: Date | null
    createdAt: Date
    updatedAt: Date
    gameId: number | null
    _count: UserAssetInteractionCountAggregateOutputType | null
    _avg: UserAssetInteractionAvgAggregateOutputType | null
    _sum: UserAssetInteractionSumAggregateOutputType | null
    _min: UserAssetInteractionMinAggregateOutputType | null
    _max: UserAssetInteractionMaxAggregateOutputType | null
  }

  type GetUserAssetInteractionGroupByPayload<T extends UserAssetInteractionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserAssetInteractionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserAssetInteractionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserAssetInteractionGroupByOutputType[P]>
            : GetScalarType<T[P], UserAssetInteractionGroupByOutputType[P]>
        }
      >
    >


  export type UserAssetInteractionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    asset_id?: boolean
    asset_revision_id?: boolean
    hasVoted?: boolean
    hasCommented?: boolean
    dismissedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    gameId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    asset?: boolean | UserAssetInteraction$assetArgs<ExtArgs>
    revision?: boolean | UserAssetInteraction$revisionArgs<ExtArgs>
    Game?: boolean | UserAssetInteraction$GameArgs<ExtArgs>
  }, ExtArgs["result"]["userAssetInteraction"]>

  export type UserAssetInteractionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    asset_id?: boolean
    asset_revision_id?: boolean
    hasVoted?: boolean
    hasCommented?: boolean
    dismissedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    gameId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    asset?: boolean | UserAssetInteraction$assetArgs<ExtArgs>
    revision?: boolean | UserAssetInteraction$revisionArgs<ExtArgs>
    Game?: boolean | UserAssetInteraction$GameArgs<ExtArgs>
  }, ExtArgs["result"]["userAssetInteraction"]>

  export type UserAssetInteractionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    asset_id?: boolean
    asset_revision_id?: boolean
    hasVoted?: boolean
    hasCommented?: boolean
    dismissedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    gameId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    asset?: boolean | UserAssetInteraction$assetArgs<ExtArgs>
    revision?: boolean | UserAssetInteraction$revisionArgs<ExtArgs>
    Game?: boolean | UserAssetInteraction$GameArgs<ExtArgs>
  }, ExtArgs["result"]["userAssetInteraction"]>

  export type UserAssetInteractionSelectScalar = {
    id?: boolean
    user_id?: boolean
    asset_id?: boolean
    asset_revision_id?: boolean
    hasVoted?: boolean
    hasCommented?: boolean
    dismissedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    gameId?: boolean
  }

  export type UserAssetInteractionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "asset_id" | "asset_revision_id" | "hasVoted" | "hasCommented" | "dismissedAt" | "createdAt" | "updatedAt" | "gameId", ExtArgs["result"]["userAssetInteraction"]>
  export type UserAssetInteractionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    asset?: boolean | UserAssetInteraction$assetArgs<ExtArgs>
    revision?: boolean | UserAssetInteraction$revisionArgs<ExtArgs>
    Game?: boolean | UserAssetInteraction$GameArgs<ExtArgs>
  }
  export type UserAssetInteractionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    asset?: boolean | UserAssetInteraction$assetArgs<ExtArgs>
    revision?: boolean | UserAssetInteraction$revisionArgs<ExtArgs>
    Game?: boolean | UserAssetInteraction$GameArgs<ExtArgs>
  }
  export type UserAssetInteractionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    asset?: boolean | UserAssetInteraction$assetArgs<ExtArgs>
    revision?: boolean | UserAssetInteraction$revisionArgs<ExtArgs>
    Game?: boolean | UserAssetInteraction$GameArgs<ExtArgs>
  }

  export type $UserAssetInteractionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserAssetInteraction"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      asset: Prisma.$AssetPayload<ExtArgs> | null
      revision: Prisma.$AssetRevisionPayload<ExtArgs> | null
      Game: Prisma.$GamePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number
      asset_id: number | null
      asset_revision_id: number | null
      hasVoted: boolean
      hasCommented: boolean
      dismissedAt: Date | null
      createdAt: Date
      updatedAt: Date
      gameId: number | null
    }, ExtArgs["result"]["userAssetInteraction"]>
    composites: {}
  }

  type UserAssetInteractionGetPayload<S extends boolean | null | undefined | UserAssetInteractionDefaultArgs> = $Result.GetResult<Prisma.$UserAssetInteractionPayload, S>

  type UserAssetInteractionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserAssetInteractionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserAssetInteractionCountAggregateInputType | true
    }

  export interface UserAssetInteractionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserAssetInteraction'], meta: { name: 'UserAssetInteraction' } }
    /**
     * Find zero or one UserAssetInteraction that matches the filter.
     * @param {UserAssetInteractionFindUniqueArgs} args - Arguments to find a UserAssetInteraction
     * @example
     * // Get one UserAssetInteraction
     * const userAssetInteraction = await prisma.userAssetInteraction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserAssetInteractionFindUniqueArgs>(args: SelectSubset<T, UserAssetInteractionFindUniqueArgs<ExtArgs>>): Prisma__UserAssetInteractionClient<$Result.GetResult<Prisma.$UserAssetInteractionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserAssetInteraction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserAssetInteractionFindUniqueOrThrowArgs} args - Arguments to find a UserAssetInteraction
     * @example
     * // Get one UserAssetInteraction
     * const userAssetInteraction = await prisma.userAssetInteraction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserAssetInteractionFindUniqueOrThrowArgs>(args: SelectSubset<T, UserAssetInteractionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserAssetInteractionClient<$Result.GetResult<Prisma.$UserAssetInteractionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserAssetInteraction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAssetInteractionFindFirstArgs} args - Arguments to find a UserAssetInteraction
     * @example
     * // Get one UserAssetInteraction
     * const userAssetInteraction = await prisma.userAssetInteraction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserAssetInteractionFindFirstArgs>(args?: SelectSubset<T, UserAssetInteractionFindFirstArgs<ExtArgs>>): Prisma__UserAssetInteractionClient<$Result.GetResult<Prisma.$UserAssetInteractionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserAssetInteraction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAssetInteractionFindFirstOrThrowArgs} args - Arguments to find a UserAssetInteraction
     * @example
     * // Get one UserAssetInteraction
     * const userAssetInteraction = await prisma.userAssetInteraction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserAssetInteractionFindFirstOrThrowArgs>(args?: SelectSubset<T, UserAssetInteractionFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserAssetInteractionClient<$Result.GetResult<Prisma.$UserAssetInteractionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserAssetInteractions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAssetInteractionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserAssetInteractions
     * const userAssetInteractions = await prisma.userAssetInteraction.findMany()
     * 
     * // Get first 10 UserAssetInteractions
     * const userAssetInteractions = await prisma.userAssetInteraction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userAssetInteractionWithIdOnly = await prisma.userAssetInteraction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserAssetInteractionFindManyArgs>(args?: SelectSubset<T, UserAssetInteractionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAssetInteractionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserAssetInteraction.
     * @param {UserAssetInteractionCreateArgs} args - Arguments to create a UserAssetInteraction.
     * @example
     * // Create one UserAssetInteraction
     * const UserAssetInteraction = await prisma.userAssetInteraction.create({
     *   data: {
     *     // ... data to create a UserAssetInteraction
     *   }
     * })
     * 
     */
    create<T extends UserAssetInteractionCreateArgs>(args: SelectSubset<T, UserAssetInteractionCreateArgs<ExtArgs>>): Prisma__UserAssetInteractionClient<$Result.GetResult<Prisma.$UserAssetInteractionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserAssetInteractions.
     * @param {UserAssetInteractionCreateManyArgs} args - Arguments to create many UserAssetInteractions.
     * @example
     * // Create many UserAssetInteractions
     * const userAssetInteraction = await prisma.userAssetInteraction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserAssetInteractionCreateManyArgs>(args?: SelectSubset<T, UserAssetInteractionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserAssetInteractions and returns the data saved in the database.
     * @param {UserAssetInteractionCreateManyAndReturnArgs} args - Arguments to create many UserAssetInteractions.
     * @example
     * // Create many UserAssetInteractions
     * const userAssetInteraction = await prisma.userAssetInteraction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserAssetInteractions and only return the `id`
     * const userAssetInteractionWithIdOnly = await prisma.userAssetInteraction.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserAssetInteractionCreateManyAndReturnArgs>(args?: SelectSubset<T, UserAssetInteractionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAssetInteractionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserAssetInteraction.
     * @param {UserAssetInteractionDeleteArgs} args - Arguments to delete one UserAssetInteraction.
     * @example
     * // Delete one UserAssetInteraction
     * const UserAssetInteraction = await prisma.userAssetInteraction.delete({
     *   where: {
     *     // ... filter to delete one UserAssetInteraction
     *   }
     * })
     * 
     */
    delete<T extends UserAssetInteractionDeleteArgs>(args: SelectSubset<T, UserAssetInteractionDeleteArgs<ExtArgs>>): Prisma__UserAssetInteractionClient<$Result.GetResult<Prisma.$UserAssetInteractionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserAssetInteraction.
     * @param {UserAssetInteractionUpdateArgs} args - Arguments to update one UserAssetInteraction.
     * @example
     * // Update one UserAssetInteraction
     * const userAssetInteraction = await prisma.userAssetInteraction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserAssetInteractionUpdateArgs>(args: SelectSubset<T, UserAssetInteractionUpdateArgs<ExtArgs>>): Prisma__UserAssetInteractionClient<$Result.GetResult<Prisma.$UserAssetInteractionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserAssetInteractions.
     * @param {UserAssetInteractionDeleteManyArgs} args - Arguments to filter UserAssetInteractions to delete.
     * @example
     * // Delete a few UserAssetInteractions
     * const { count } = await prisma.userAssetInteraction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserAssetInteractionDeleteManyArgs>(args?: SelectSubset<T, UserAssetInteractionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserAssetInteractions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAssetInteractionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserAssetInteractions
     * const userAssetInteraction = await prisma.userAssetInteraction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserAssetInteractionUpdateManyArgs>(args: SelectSubset<T, UserAssetInteractionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserAssetInteractions and returns the data updated in the database.
     * @param {UserAssetInteractionUpdateManyAndReturnArgs} args - Arguments to update many UserAssetInteractions.
     * @example
     * // Update many UserAssetInteractions
     * const userAssetInteraction = await prisma.userAssetInteraction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserAssetInteractions and only return the `id`
     * const userAssetInteractionWithIdOnly = await prisma.userAssetInteraction.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserAssetInteractionUpdateManyAndReturnArgs>(args: SelectSubset<T, UserAssetInteractionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAssetInteractionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserAssetInteraction.
     * @param {UserAssetInteractionUpsertArgs} args - Arguments to update or create a UserAssetInteraction.
     * @example
     * // Update or create a UserAssetInteraction
     * const userAssetInteraction = await prisma.userAssetInteraction.upsert({
     *   create: {
     *     // ... data to create a UserAssetInteraction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserAssetInteraction we want to update
     *   }
     * })
     */
    upsert<T extends UserAssetInteractionUpsertArgs>(args: SelectSubset<T, UserAssetInteractionUpsertArgs<ExtArgs>>): Prisma__UserAssetInteractionClient<$Result.GetResult<Prisma.$UserAssetInteractionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserAssetInteractions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAssetInteractionCountArgs} args - Arguments to filter UserAssetInteractions to count.
     * @example
     * // Count the number of UserAssetInteractions
     * const count = await prisma.userAssetInteraction.count({
     *   where: {
     *     // ... the filter for the UserAssetInteractions we want to count
     *   }
     * })
    **/
    count<T extends UserAssetInteractionCountArgs>(
      args?: Subset<T, UserAssetInteractionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserAssetInteractionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserAssetInteraction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAssetInteractionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAssetInteractionAggregateArgs>(args: Subset<T, UserAssetInteractionAggregateArgs>): Prisma.PrismaPromise<GetUserAssetInteractionAggregateType<T>>

    /**
     * Group by UserAssetInteraction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAssetInteractionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserAssetInteractionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserAssetInteractionGroupByArgs['orderBy'] }
        : { orderBy?: UserAssetInteractionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserAssetInteractionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserAssetInteractionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserAssetInteraction model
   */
  readonly fields: UserAssetInteractionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserAssetInteraction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserAssetInteractionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    asset<T extends UserAssetInteraction$assetArgs<ExtArgs> = {}>(args?: Subset<T, UserAssetInteraction$assetArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    revision<T extends UserAssetInteraction$revisionArgs<ExtArgs> = {}>(args?: Subset<T, UserAssetInteraction$revisionArgs<ExtArgs>>): Prisma__AssetRevisionClient<$Result.GetResult<Prisma.$AssetRevisionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Game<T extends UserAssetInteraction$GameArgs<ExtArgs> = {}>(args?: Subset<T, UserAssetInteraction$GameArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserAssetInteraction model
   */
  interface UserAssetInteractionFieldRefs {
    readonly id: FieldRef<"UserAssetInteraction", 'Int'>
    readonly user_id: FieldRef<"UserAssetInteraction", 'Int'>
    readonly asset_id: FieldRef<"UserAssetInteraction", 'Int'>
    readonly asset_revision_id: FieldRef<"UserAssetInteraction", 'Int'>
    readonly hasVoted: FieldRef<"UserAssetInteraction", 'Boolean'>
    readonly hasCommented: FieldRef<"UserAssetInteraction", 'Boolean'>
    readonly dismissedAt: FieldRef<"UserAssetInteraction", 'DateTime'>
    readonly createdAt: FieldRef<"UserAssetInteraction", 'DateTime'>
    readonly updatedAt: FieldRef<"UserAssetInteraction", 'DateTime'>
    readonly gameId: FieldRef<"UserAssetInteraction", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * UserAssetInteraction findUnique
   */
  export type UserAssetInteractionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAssetInteraction
     */
    select?: UserAssetInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAssetInteraction
     */
    omit?: UserAssetInteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAssetInteractionInclude<ExtArgs> | null
    /**
     * Filter, which UserAssetInteraction to fetch.
     */
    where: UserAssetInteractionWhereUniqueInput
  }

  /**
   * UserAssetInteraction findUniqueOrThrow
   */
  export type UserAssetInteractionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAssetInteraction
     */
    select?: UserAssetInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAssetInteraction
     */
    omit?: UserAssetInteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAssetInteractionInclude<ExtArgs> | null
    /**
     * Filter, which UserAssetInteraction to fetch.
     */
    where: UserAssetInteractionWhereUniqueInput
  }

  /**
   * UserAssetInteraction findFirst
   */
  export type UserAssetInteractionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAssetInteraction
     */
    select?: UserAssetInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAssetInteraction
     */
    omit?: UserAssetInteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAssetInteractionInclude<ExtArgs> | null
    /**
     * Filter, which UserAssetInteraction to fetch.
     */
    where?: UserAssetInteractionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAssetInteractions to fetch.
     */
    orderBy?: UserAssetInteractionOrderByWithRelationInput | UserAssetInteractionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserAssetInteractions.
     */
    cursor?: UserAssetInteractionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAssetInteractions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAssetInteractions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserAssetInteractions.
     */
    distinct?: UserAssetInteractionScalarFieldEnum | UserAssetInteractionScalarFieldEnum[]
  }

  /**
   * UserAssetInteraction findFirstOrThrow
   */
  export type UserAssetInteractionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAssetInteraction
     */
    select?: UserAssetInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAssetInteraction
     */
    omit?: UserAssetInteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAssetInteractionInclude<ExtArgs> | null
    /**
     * Filter, which UserAssetInteraction to fetch.
     */
    where?: UserAssetInteractionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAssetInteractions to fetch.
     */
    orderBy?: UserAssetInteractionOrderByWithRelationInput | UserAssetInteractionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserAssetInteractions.
     */
    cursor?: UserAssetInteractionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAssetInteractions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAssetInteractions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserAssetInteractions.
     */
    distinct?: UserAssetInteractionScalarFieldEnum | UserAssetInteractionScalarFieldEnum[]
  }

  /**
   * UserAssetInteraction findMany
   */
  export type UserAssetInteractionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAssetInteraction
     */
    select?: UserAssetInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAssetInteraction
     */
    omit?: UserAssetInteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAssetInteractionInclude<ExtArgs> | null
    /**
     * Filter, which UserAssetInteractions to fetch.
     */
    where?: UserAssetInteractionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAssetInteractions to fetch.
     */
    orderBy?: UserAssetInteractionOrderByWithRelationInput | UserAssetInteractionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserAssetInteractions.
     */
    cursor?: UserAssetInteractionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAssetInteractions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAssetInteractions.
     */
    skip?: number
    distinct?: UserAssetInteractionScalarFieldEnum | UserAssetInteractionScalarFieldEnum[]
  }

  /**
   * UserAssetInteraction create
   */
  export type UserAssetInteractionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAssetInteraction
     */
    select?: UserAssetInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAssetInteraction
     */
    omit?: UserAssetInteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAssetInteractionInclude<ExtArgs> | null
    /**
     * The data needed to create a UserAssetInteraction.
     */
    data: XOR<UserAssetInteractionCreateInput, UserAssetInteractionUncheckedCreateInput>
  }

  /**
   * UserAssetInteraction createMany
   */
  export type UserAssetInteractionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserAssetInteractions.
     */
    data: UserAssetInteractionCreateManyInput | UserAssetInteractionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserAssetInteraction createManyAndReturn
   */
  export type UserAssetInteractionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAssetInteraction
     */
    select?: UserAssetInteractionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserAssetInteraction
     */
    omit?: UserAssetInteractionOmit<ExtArgs> | null
    /**
     * The data used to create many UserAssetInteractions.
     */
    data: UserAssetInteractionCreateManyInput | UserAssetInteractionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAssetInteractionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserAssetInteraction update
   */
  export type UserAssetInteractionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAssetInteraction
     */
    select?: UserAssetInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAssetInteraction
     */
    omit?: UserAssetInteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAssetInteractionInclude<ExtArgs> | null
    /**
     * The data needed to update a UserAssetInteraction.
     */
    data: XOR<UserAssetInteractionUpdateInput, UserAssetInteractionUncheckedUpdateInput>
    /**
     * Choose, which UserAssetInteraction to update.
     */
    where: UserAssetInteractionWhereUniqueInput
  }

  /**
   * UserAssetInteraction updateMany
   */
  export type UserAssetInteractionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserAssetInteractions.
     */
    data: XOR<UserAssetInteractionUpdateManyMutationInput, UserAssetInteractionUncheckedUpdateManyInput>
    /**
     * Filter which UserAssetInteractions to update
     */
    where?: UserAssetInteractionWhereInput
    /**
     * Limit how many UserAssetInteractions to update.
     */
    limit?: number
  }

  /**
   * UserAssetInteraction updateManyAndReturn
   */
  export type UserAssetInteractionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAssetInteraction
     */
    select?: UserAssetInteractionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserAssetInteraction
     */
    omit?: UserAssetInteractionOmit<ExtArgs> | null
    /**
     * The data used to update UserAssetInteractions.
     */
    data: XOR<UserAssetInteractionUpdateManyMutationInput, UserAssetInteractionUncheckedUpdateManyInput>
    /**
     * Filter which UserAssetInteractions to update
     */
    where?: UserAssetInteractionWhereInput
    /**
     * Limit how many UserAssetInteractions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAssetInteractionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserAssetInteraction upsert
   */
  export type UserAssetInteractionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAssetInteraction
     */
    select?: UserAssetInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAssetInteraction
     */
    omit?: UserAssetInteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAssetInteractionInclude<ExtArgs> | null
    /**
     * The filter to search for the UserAssetInteraction to update in case it exists.
     */
    where: UserAssetInteractionWhereUniqueInput
    /**
     * In case the UserAssetInteraction found by the `where` argument doesn't exist, create a new UserAssetInteraction with this data.
     */
    create: XOR<UserAssetInteractionCreateInput, UserAssetInteractionUncheckedCreateInput>
    /**
     * In case the UserAssetInteraction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserAssetInteractionUpdateInput, UserAssetInteractionUncheckedUpdateInput>
  }

  /**
   * UserAssetInteraction delete
   */
  export type UserAssetInteractionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAssetInteraction
     */
    select?: UserAssetInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAssetInteraction
     */
    omit?: UserAssetInteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAssetInteractionInclude<ExtArgs> | null
    /**
     * Filter which UserAssetInteraction to delete.
     */
    where: UserAssetInteractionWhereUniqueInput
  }

  /**
   * UserAssetInteraction deleteMany
   */
  export type UserAssetInteractionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserAssetInteractions to delete
     */
    where?: UserAssetInteractionWhereInput
    /**
     * Limit how many UserAssetInteractions to delete.
     */
    limit?: number
  }

  /**
   * UserAssetInteraction.asset
   */
  export type UserAssetInteraction$assetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Asset
     */
    omit?: AssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    where?: AssetWhereInput
  }

  /**
   * UserAssetInteraction.revision
   */
  export type UserAssetInteraction$revisionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetRevision
     */
    select?: AssetRevisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetRevision
     */
    omit?: AssetRevisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetRevisionInclude<ExtArgs> | null
    where?: AssetRevisionWhereInput
  }

  /**
   * UserAssetInteraction.Game
   */
  export type UserAssetInteraction$GameArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    where?: GameWhereInput
  }

  /**
   * UserAssetInteraction without action
   */
  export type UserAssetInteractionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAssetInteraction
     */
    select?: UserAssetInteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAssetInteraction
     */
    omit?: UserAssetInteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAssetInteractionInclude<ExtArgs> | null
  }


  /**
   * Model AssetComment
   */

  export type AggregateAssetComment = {
    _count: AssetCommentCountAggregateOutputType | null
    _avg: AssetCommentAvgAggregateOutputType | null
    _sum: AssetCommentSumAggregateOutputType | null
    _min: AssetCommentMinAggregateOutputType | null
    _max: AssetCommentMaxAggregateOutputType | null
  }

  export type AssetCommentAvgAggregateOutputType = {
    id: number | null
    asset_id: number | null
    user_id: number | null
  }

  export type AssetCommentSumAggregateOutputType = {
    id: number | null
    asset_id: number | null
    user_id: number | null
  }

  export type AssetCommentMinAggregateOutputType = {
    id: number | null
    asset_id: number | null
    user_id: number | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AssetCommentMaxAggregateOutputType = {
    id: number | null
    asset_id: number | null
    user_id: number | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AssetCommentCountAggregateOutputType = {
    id: number
    asset_id: number
    user_id: number
    content: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AssetCommentAvgAggregateInputType = {
    id?: true
    asset_id?: true
    user_id?: true
  }

  export type AssetCommentSumAggregateInputType = {
    id?: true
    asset_id?: true
    user_id?: true
  }

  export type AssetCommentMinAggregateInputType = {
    id?: true
    asset_id?: true
    user_id?: true
    content?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AssetCommentMaxAggregateInputType = {
    id?: true
    asset_id?: true
    user_id?: true
    content?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AssetCommentCountAggregateInputType = {
    id?: true
    asset_id?: true
    user_id?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AssetCommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AssetComment to aggregate.
     */
    where?: AssetCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetComments to fetch.
     */
    orderBy?: AssetCommentOrderByWithRelationInput | AssetCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AssetCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AssetComments
    **/
    _count?: true | AssetCommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AssetCommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AssetCommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssetCommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssetCommentMaxAggregateInputType
  }

  export type GetAssetCommentAggregateType<T extends AssetCommentAggregateArgs> = {
        [P in keyof T & keyof AggregateAssetComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAssetComment[P]>
      : GetScalarType<T[P], AggregateAssetComment[P]>
  }




  export type AssetCommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetCommentWhereInput
    orderBy?: AssetCommentOrderByWithAggregationInput | AssetCommentOrderByWithAggregationInput[]
    by: AssetCommentScalarFieldEnum[] | AssetCommentScalarFieldEnum
    having?: AssetCommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssetCommentCountAggregateInputType | true
    _avg?: AssetCommentAvgAggregateInputType
    _sum?: AssetCommentSumAggregateInputType
    _min?: AssetCommentMinAggregateInputType
    _max?: AssetCommentMaxAggregateInputType
  }

  export type AssetCommentGroupByOutputType = {
    id: number
    asset_id: number
    user_id: number
    content: string
    createdAt: Date
    updatedAt: Date
    _count: AssetCommentCountAggregateOutputType | null
    _avg: AssetCommentAvgAggregateOutputType | null
    _sum: AssetCommentSumAggregateOutputType | null
    _min: AssetCommentMinAggregateOutputType | null
    _max: AssetCommentMaxAggregateOutputType | null
  }

  type GetAssetCommentGroupByPayload<T extends AssetCommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AssetCommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssetCommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssetCommentGroupByOutputType[P]>
            : GetScalarType<T[P], AssetCommentGroupByOutputType[P]>
        }
      >
    >


  export type AssetCommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    asset_id?: boolean
    user_id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assetComment"]>

  export type AssetCommentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    asset_id?: boolean
    user_id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assetComment"]>

  export type AssetCommentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    asset_id?: boolean
    user_id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assetComment"]>

  export type AssetCommentSelectScalar = {
    id?: boolean
    asset_id?: boolean
    user_id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AssetCommentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "asset_id" | "user_id" | "content" | "createdAt" | "updatedAt", ExtArgs["result"]["assetComment"]>
  export type AssetCommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AssetCommentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AssetCommentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AssetCommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AssetComment"
    objects: {
      asset: Prisma.$AssetPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      asset_id: number
      user_id: number
      content: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["assetComment"]>
    composites: {}
  }

  type AssetCommentGetPayload<S extends boolean | null | undefined | AssetCommentDefaultArgs> = $Result.GetResult<Prisma.$AssetCommentPayload, S>

  type AssetCommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AssetCommentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AssetCommentCountAggregateInputType | true
    }

  export interface AssetCommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AssetComment'], meta: { name: 'AssetComment' } }
    /**
     * Find zero or one AssetComment that matches the filter.
     * @param {AssetCommentFindUniqueArgs} args - Arguments to find a AssetComment
     * @example
     * // Get one AssetComment
     * const assetComment = await prisma.assetComment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AssetCommentFindUniqueArgs>(args: SelectSubset<T, AssetCommentFindUniqueArgs<ExtArgs>>): Prisma__AssetCommentClient<$Result.GetResult<Prisma.$AssetCommentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AssetComment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AssetCommentFindUniqueOrThrowArgs} args - Arguments to find a AssetComment
     * @example
     * // Get one AssetComment
     * const assetComment = await prisma.assetComment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AssetCommentFindUniqueOrThrowArgs>(args: SelectSubset<T, AssetCommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AssetCommentClient<$Result.GetResult<Prisma.$AssetCommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AssetComment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetCommentFindFirstArgs} args - Arguments to find a AssetComment
     * @example
     * // Get one AssetComment
     * const assetComment = await prisma.assetComment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AssetCommentFindFirstArgs>(args?: SelectSubset<T, AssetCommentFindFirstArgs<ExtArgs>>): Prisma__AssetCommentClient<$Result.GetResult<Prisma.$AssetCommentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AssetComment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetCommentFindFirstOrThrowArgs} args - Arguments to find a AssetComment
     * @example
     * // Get one AssetComment
     * const assetComment = await prisma.assetComment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AssetCommentFindFirstOrThrowArgs>(args?: SelectSubset<T, AssetCommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__AssetCommentClient<$Result.GetResult<Prisma.$AssetCommentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AssetComments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetCommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AssetComments
     * const assetComments = await prisma.assetComment.findMany()
     * 
     * // Get first 10 AssetComments
     * const assetComments = await prisma.assetComment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const assetCommentWithIdOnly = await prisma.assetComment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AssetCommentFindManyArgs>(args?: SelectSubset<T, AssetCommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetCommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AssetComment.
     * @param {AssetCommentCreateArgs} args - Arguments to create a AssetComment.
     * @example
     * // Create one AssetComment
     * const AssetComment = await prisma.assetComment.create({
     *   data: {
     *     // ... data to create a AssetComment
     *   }
     * })
     * 
     */
    create<T extends AssetCommentCreateArgs>(args: SelectSubset<T, AssetCommentCreateArgs<ExtArgs>>): Prisma__AssetCommentClient<$Result.GetResult<Prisma.$AssetCommentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AssetComments.
     * @param {AssetCommentCreateManyArgs} args - Arguments to create many AssetComments.
     * @example
     * // Create many AssetComments
     * const assetComment = await prisma.assetComment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AssetCommentCreateManyArgs>(args?: SelectSubset<T, AssetCommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AssetComments and returns the data saved in the database.
     * @param {AssetCommentCreateManyAndReturnArgs} args - Arguments to create many AssetComments.
     * @example
     * // Create many AssetComments
     * const assetComment = await prisma.assetComment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AssetComments and only return the `id`
     * const assetCommentWithIdOnly = await prisma.assetComment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AssetCommentCreateManyAndReturnArgs>(args?: SelectSubset<T, AssetCommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetCommentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AssetComment.
     * @param {AssetCommentDeleteArgs} args - Arguments to delete one AssetComment.
     * @example
     * // Delete one AssetComment
     * const AssetComment = await prisma.assetComment.delete({
     *   where: {
     *     // ... filter to delete one AssetComment
     *   }
     * })
     * 
     */
    delete<T extends AssetCommentDeleteArgs>(args: SelectSubset<T, AssetCommentDeleteArgs<ExtArgs>>): Prisma__AssetCommentClient<$Result.GetResult<Prisma.$AssetCommentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AssetComment.
     * @param {AssetCommentUpdateArgs} args - Arguments to update one AssetComment.
     * @example
     * // Update one AssetComment
     * const assetComment = await prisma.assetComment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AssetCommentUpdateArgs>(args: SelectSubset<T, AssetCommentUpdateArgs<ExtArgs>>): Prisma__AssetCommentClient<$Result.GetResult<Prisma.$AssetCommentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AssetComments.
     * @param {AssetCommentDeleteManyArgs} args - Arguments to filter AssetComments to delete.
     * @example
     * // Delete a few AssetComments
     * const { count } = await prisma.assetComment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AssetCommentDeleteManyArgs>(args?: SelectSubset<T, AssetCommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AssetComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetCommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AssetComments
     * const assetComment = await prisma.assetComment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AssetCommentUpdateManyArgs>(args: SelectSubset<T, AssetCommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AssetComments and returns the data updated in the database.
     * @param {AssetCommentUpdateManyAndReturnArgs} args - Arguments to update many AssetComments.
     * @example
     * // Update many AssetComments
     * const assetComment = await prisma.assetComment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AssetComments and only return the `id`
     * const assetCommentWithIdOnly = await prisma.assetComment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AssetCommentUpdateManyAndReturnArgs>(args: SelectSubset<T, AssetCommentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetCommentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AssetComment.
     * @param {AssetCommentUpsertArgs} args - Arguments to update or create a AssetComment.
     * @example
     * // Update or create a AssetComment
     * const assetComment = await prisma.assetComment.upsert({
     *   create: {
     *     // ... data to create a AssetComment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AssetComment we want to update
     *   }
     * })
     */
    upsert<T extends AssetCommentUpsertArgs>(args: SelectSubset<T, AssetCommentUpsertArgs<ExtArgs>>): Prisma__AssetCommentClient<$Result.GetResult<Prisma.$AssetCommentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AssetComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetCommentCountArgs} args - Arguments to filter AssetComments to count.
     * @example
     * // Count the number of AssetComments
     * const count = await prisma.assetComment.count({
     *   where: {
     *     // ... the filter for the AssetComments we want to count
     *   }
     * })
    **/
    count<T extends AssetCommentCountArgs>(
      args?: Subset<T, AssetCommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssetCommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AssetComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetCommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssetCommentAggregateArgs>(args: Subset<T, AssetCommentAggregateArgs>): Prisma.PrismaPromise<GetAssetCommentAggregateType<T>>

    /**
     * Group by AssetComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetCommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AssetCommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssetCommentGroupByArgs['orderBy'] }
        : { orderBy?: AssetCommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AssetCommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AssetComment model
   */
  readonly fields: AssetCommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AssetComment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AssetCommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    asset<T extends AssetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AssetDefaultArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AssetComment model
   */
  interface AssetCommentFieldRefs {
    readonly id: FieldRef<"AssetComment", 'Int'>
    readonly asset_id: FieldRef<"AssetComment", 'Int'>
    readonly user_id: FieldRef<"AssetComment", 'Int'>
    readonly content: FieldRef<"AssetComment", 'String'>
    readonly createdAt: FieldRef<"AssetComment", 'DateTime'>
    readonly updatedAt: FieldRef<"AssetComment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AssetComment findUnique
   */
  export type AssetCommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetComment
     */
    select?: AssetCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetComment
     */
    omit?: AssetCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetCommentInclude<ExtArgs> | null
    /**
     * Filter, which AssetComment to fetch.
     */
    where: AssetCommentWhereUniqueInput
  }

  /**
   * AssetComment findUniqueOrThrow
   */
  export type AssetCommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetComment
     */
    select?: AssetCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetComment
     */
    omit?: AssetCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetCommentInclude<ExtArgs> | null
    /**
     * Filter, which AssetComment to fetch.
     */
    where: AssetCommentWhereUniqueInput
  }

  /**
   * AssetComment findFirst
   */
  export type AssetCommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetComment
     */
    select?: AssetCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetComment
     */
    omit?: AssetCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetCommentInclude<ExtArgs> | null
    /**
     * Filter, which AssetComment to fetch.
     */
    where?: AssetCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetComments to fetch.
     */
    orderBy?: AssetCommentOrderByWithRelationInput | AssetCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AssetComments.
     */
    cursor?: AssetCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AssetComments.
     */
    distinct?: AssetCommentScalarFieldEnum | AssetCommentScalarFieldEnum[]
  }

  /**
   * AssetComment findFirstOrThrow
   */
  export type AssetCommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetComment
     */
    select?: AssetCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetComment
     */
    omit?: AssetCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetCommentInclude<ExtArgs> | null
    /**
     * Filter, which AssetComment to fetch.
     */
    where?: AssetCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetComments to fetch.
     */
    orderBy?: AssetCommentOrderByWithRelationInput | AssetCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AssetComments.
     */
    cursor?: AssetCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AssetComments.
     */
    distinct?: AssetCommentScalarFieldEnum | AssetCommentScalarFieldEnum[]
  }

  /**
   * AssetComment findMany
   */
  export type AssetCommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetComment
     */
    select?: AssetCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetComment
     */
    omit?: AssetCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetCommentInclude<ExtArgs> | null
    /**
     * Filter, which AssetComments to fetch.
     */
    where?: AssetCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetComments to fetch.
     */
    orderBy?: AssetCommentOrderByWithRelationInput | AssetCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AssetComments.
     */
    cursor?: AssetCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetComments.
     */
    skip?: number
    distinct?: AssetCommentScalarFieldEnum | AssetCommentScalarFieldEnum[]
  }

  /**
   * AssetComment create
   */
  export type AssetCommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetComment
     */
    select?: AssetCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetComment
     */
    omit?: AssetCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetCommentInclude<ExtArgs> | null
    /**
     * The data needed to create a AssetComment.
     */
    data: XOR<AssetCommentCreateInput, AssetCommentUncheckedCreateInput>
  }

  /**
   * AssetComment createMany
   */
  export type AssetCommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AssetComments.
     */
    data: AssetCommentCreateManyInput | AssetCommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AssetComment createManyAndReturn
   */
  export type AssetCommentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetComment
     */
    select?: AssetCommentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AssetComment
     */
    omit?: AssetCommentOmit<ExtArgs> | null
    /**
     * The data used to create many AssetComments.
     */
    data: AssetCommentCreateManyInput | AssetCommentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetCommentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AssetComment update
   */
  export type AssetCommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetComment
     */
    select?: AssetCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetComment
     */
    omit?: AssetCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetCommentInclude<ExtArgs> | null
    /**
     * The data needed to update a AssetComment.
     */
    data: XOR<AssetCommentUpdateInput, AssetCommentUncheckedUpdateInput>
    /**
     * Choose, which AssetComment to update.
     */
    where: AssetCommentWhereUniqueInput
  }

  /**
   * AssetComment updateMany
   */
  export type AssetCommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AssetComments.
     */
    data: XOR<AssetCommentUpdateManyMutationInput, AssetCommentUncheckedUpdateManyInput>
    /**
     * Filter which AssetComments to update
     */
    where?: AssetCommentWhereInput
    /**
     * Limit how many AssetComments to update.
     */
    limit?: number
  }

  /**
   * AssetComment updateManyAndReturn
   */
  export type AssetCommentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetComment
     */
    select?: AssetCommentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AssetComment
     */
    omit?: AssetCommentOmit<ExtArgs> | null
    /**
     * The data used to update AssetComments.
     */
    data: XOR<AssetCommentUpdateManyMutationInput, AssetCommentUncheckedUpdateManyInput>
    /**
     * Filter which AssetComments to update
     */
    where?: AssetCommentWhereInput
    /**
     * Limit how many AssetComments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetCommentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AssetComment upsert
   */
  export type AssetCommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetComment
     */
    select?: AssetCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetComment
     */
    omit?: AssetCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetCommentInclude<ExtArgs> | null
    /**
     * The filter to search for the AssetComment to update in case it exists.
     */
    where: AssetCommentWhereUniqueInput
    /**
     * In case the AssetComment found by the `where` argument doesn't exist, create a new AssetComment with this data.
     */
    create: XOR<AssetCommentCreateInput, AssetCommentUncheckedCreateInput>
    /**
     * In case the AssetComment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AssetCommentUpdateInput, AssetCommentUncheckedUpdateInput>
  }

  /**
   * AssetComment delete
   */
  export type AssetCommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetComment
     */
    select?: AssetCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetComment
     */
    omit?: AssetCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetCommentInclude<ExtArgs> | null
    /**
     * Filter which AssetComment to delete.
     */
    where: AssetCommentWhereUniqueInput
  }

  /**
   * AssetComment deleteMany
   */
  export type AssetCommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AssetComments to delete
     */
    where?: AssetCommentWhereInput
    /**
     * Limit how many AssetComments to delete.
     */
    limit?: number
  }

  /**
   * AssetComment without action
   */
  export type AssetCommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetComment
     */
    select?: AssetCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssetComment
     */
    omit?: AssetCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetCommentInclude<ExtArgs> | null
  }


  /**
   * Model RevisionComment
   */

  export type AggregateRevisionComment = {
    _count: RevisionCommentCountAggregateOutputType | null
    _avg: RevisionCommentAvgAggregateOutputType | null
    _sum: RevisionCommentSumAggregateOutputType | null
    _min: RevisionCommentMinAggregateOutputType | null
    _max: RevisionCommentMaxAggregateOutputType | null
  }

  export type RevisionCommentAvgAggregateOutputType = {
    id: number | null
    asset_revision_id: number | null
    user_id: number | null
  }

  export type RevisionCommentSumAggregateOutputType = {
    id: number | null
    asset_revision_id: number | null
    user_id: number | null
  }

  export type RevisionCommentMinAggregateOutputType = {
    id: number | null
    asset_revision_id: number | null
    user_id: number | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RevisionCommentMaxAggregateOutputType = {
    id: number | null
    asset_revision_id: number | null
    user_id: number | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RevisionCommentCountAggregateOutputType = {
    id: number
    asset_revision_id: number
    user_id: number
    content: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RevisionCommentAvgAggregateInputType = {
    id?: true
    asset_revision_id?: true
    user_id?: true
  }

  export type RevisionCommentSumAggregateInputType = {
    id?: true
    asset_revision_id?: true
    user_id?: true
  }

  export type RevisionCommentMinAggregateInputType = {
    id?: true
    asset_revision_id?: true
    user_id?: true
    content?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RevisionCommentMaxAggregateInputType = {
    id?: true
    asset_revision_id?: true
    user_id?: true
    content?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RevisionCommentCountAggregateInputType = {
    id?: true
    asset_revision_id?: true
    user_id?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RevisionCommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RevisionComment to aggregate.
     */
    where?: RevisionCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RevisionComments to fetch.
     */
    orderBy?: RevisionCommentOrderByWithRelationInput | RevisionCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RevisionCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RevisionComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RevisionComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RevisionComments
    **/
    _count?: true | RevisionCommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RevisionCommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RevisionCommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RevisionCommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RevisionCommentMaxAggregateInputType
  }

  export type GetRevisionCommentAggregateType<T extends RevisionCommentAggregateArgs> = {
        [P in keyof T & keyof AggregateRevisionComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRevisionComment[P]>
      : GetScalarType<T[P], AggregateRevisionComment[P]>
  }




  export type RevisionCommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RevisionCommentWhereInput
    orderBy?: RevisionCommentOrderByWithAggregationInput | RevisionCommentOrderByWithAggregationInput[]
    by: RevisionCommentScalarFieldEnum[] | RevisionCommentScalarFieldEnum
    having?: RevisionCommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RevisionCommentCountAggregateInputType | true
    _avg?: RevisionCommentAvgAggregateInputType
    _sum?: RevisionCommentSumAggregateInputType
    _min?: RevisionCommentMinAggregateInputType
    _max?: RevisionCommentMaxAggregateInputType
  }

  export type RevisionCommentGroupByOutputType = {
    id: number
    asset_revision_id: number
    user_id: number
    content: string
    createdAt: Date
    updatedAt: Date
    _count: RevisionCommentCountAggregateOutputType | null
    _avg: RevisionCommentAvgAggregateOutputType | null
    _sum: RevisionCommentSumAggregateOutputType | null
    _min: RevisionCommentMinAggregateOutputType | null
    _max: RevisionCommentMaxAggregateOutputType | null
  }

  type GetRevisionCommentGroupByPayload<T extends RevisionCommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RevisionCommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RevisionCommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RevisionCommentGroupByOutputType[P]>
            : GetScalarType<T[P], RevisionCommentGroupByOutputType[P]>
        }
      >
    >


  export type RevisionCommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    asset_revision_id?: boolean
    user_id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    revision?: boolean | AssetRevisionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["revisionComment"]>

  export type RevisionCommentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    asset_revision_id?: boolean
    user_id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    revision?: boolean | AssetRevisionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["revisionComment"]>

  export type RevisionCommentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    asset_revision_id?: boolean
    user_id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    revision?: boolean | AssetRevisionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["revisionComment"]>

  export type RevisionCommentSelectScalar = {
    id?: boolean
    asset_revision_id?: boolean
    user_id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RevisionCommentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "asset_revision_id" | "user_id" | "content" | "createdAt" | "updatedAt", ExtArgs["result"]["revisionComment"]>
  export type RevisionCommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    revision?: boolean | AssetRevisionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RevisionCommentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    revision?: boolean | AssetRevisionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RevisionCommentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    revision?: boolean | AssetRevisionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $RevisionCommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RevisionComment"
    objects: {
      revision: Prisma.$AssetRevisionPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      asset_revision_id: number
      user_id: number
      content: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["revisionComment"]>
    composites: {}
  }

  type RevisionCommentGetPayload<S extends boolean | null | undefined | RevisionCommentDefaultArgs> = $Result.GetResult<Prisma.$RevisionCommentPayload, S>

  type RevisionCommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RevisionCommentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RevisionCommentCountAggregateInputType | true
    }

  export interface RevisionCommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RevisionComment'], meta: { name: 'RevisionComment' } }
    /**
     * Find zero or one RevisionComment that matches the filter.
     * @param {RevisionCommentFindUniqueArgs} args - Arguments to find a RevisionComment
     * @example
     * // Get one RevisionComment
     * const revisionComment = await prisma.revisionComment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RevisionCommentFindUniqueArgs>(args: SelectSubset<T, RevisionCommentFindUniqueArgs<ExtArgs>>): Prisma__RevisionCommentClient<$Result.GetResult<Prisma.$RevisionCommentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RevisionComment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RevisionCommentFindUniqueOrThrowArgs} args - Arguments to find a RevisionComment
     * @example
     * // Get one RevisionComment
     * const revisionComment = await prisma.revisionComment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RevisionCommentFindUniqueOrThrowArgs>(args: SelectSubset<T, RevisionCommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RevisionCommentClient<$Result.GetResult<Prisma.$RevisionCommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RevisionComment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RevisionCommentFindFirstArgs} args - Arguments to find a RevisionComment
     * @example
     * // Get one RevisionComment
     * const revisionComment = await prisma.revisionComment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RevisionCommentFindFirstArgs>(args?: SelectSubset<T, RevisionCommentFindFirstArgs<ExtArgs>>): Prisma__RevisionCommentClient<$Result.GetResult<Prisma.$RevisionCommentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RevisionComment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RevisionCommentFindFirstOrThrowArgs} args - Arguments to find a RevisionComment
     * @example
     * // Get one RevisionComment
     * const revisionComment = await prisma.revisionComment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RevisionCommentFindFirstOrThrowArgs>(args?: SelectSubset<T, RevisionCommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__RevisionCommentClient<$Result.GetResult<Prisma.$RevisionCommentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RevisionComments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RevisionCommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RevisionComments
     * const revisionComments = await prisma.revisionComment.findMany()
     * 
     * // Get first 10 RevisionComments
     * const revisionComments = await prisma.revisionComment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const revisionCommentWithIdOnly = await prisma.revisionComment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RevisionCommentFindManyArgs>(args?: SelectSubset<T, RevisionCommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RevisionCommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RevisionComment.
     * @param {RevisionCommentCreateArgs} args - Arguments to create a RevisionComment.
     * @example
     * // Create one RevisionComment
     * const RevisionComment = await prisma.revisionComment.create({
     *   data: {
     *     // ... data to create a RevisionComment
     *   }
     * })
     * 
     */
    create<T extends RevisionCommentCreateArgs>(args: SelectSubset<T, RevisionCommentCreateArgs<ExtArgs>>): Prisma__RevisionCommentClient<$Result.GetResult<Prisma.$RevisionCommentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RevisionComments.
     * @param {RevisionCommentCreateManyArgs} args - Arguments to create many RevisionComments.
     * @example
     * // Create many RevisionComments
     * const revisionComment = await prisma.revisionComment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RevisionCommentCreateManyArgs>(args?: SelectSubset<T, RevisionCommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RevisionComments and returns the data saved in the database.
     * @param {RevisionCommentCreateManyAndReturnArgs} args - Arguments to create many RevisionComments.
     * @example
     * // Create many RevisionComments
     * const revisionComment = await prisma.revisionComment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RevisionComments and only return the `id`
     * const revisionCommentWithIdOnly = await prisma.revisionComment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RevisionCommentCreateManyAndReturnArgs>(args?: SelectSubset<T, RevisionCommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RevisionCommentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RevisionComment.
     * @param {RevisionCommentDeleteArgs} args - Arguments to delete one RevisionComment.
     * @example
     * // Delete one RevisionComment
     * const RevisionComment = await prisma.revisionComment.delete({
     *   where: {
     *     // ... filter to delete one RevisionComment
     *   }
     * })
     * 
     */
    delete<T extends RevisionCommentDeleteArgs>(args: SelectSubset<T, RevisionCommentDeleteArgs<ExtArgs>>): Prisma__RevisionCommentClient<$Result.GetResult<Prisma.$RevisionCommentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RevisionComment.
     * @param {RevisionCommentUpdateArgs} args - Arguments to update one RevisionComment.
     * @example
     * // Update one RevisionComment
     * const revisionComment = await prisma.revisionComment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RevisionCommentUpdateArgs>(args: SelectSubset<T, RevisionCommentUpdateArgs<ExtArgs>>): Prisma__RevisionCommentClient<$Result.GetResult<Prisma.$RevisionCommentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RevisionComments.
     * @param {RevisionCommentDeleteManyArgs} args - Arguments to filter RevisionComments to delete.
     * @example
     * // Delete a few RevisionComments
     * const { count } = await prisma.revisionComment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RevisionCommentDeleteManyArgs>(args?: SelectSubset<T, RevisionCommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RevisionComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RevisionCommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RevisionComments
     * const revisionComment = await prisma.revisionComment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RevisionCommentUpdateManyArgs>(args: SelectSubset<T, RevisionCommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RevisionComments and returns the data updated in the database.
     * @param {RevisionCommentUpdateManyAndReturnArgs} args - Arguments to update many RevisionComments.
     * @example
     * // Update many RevisionComments
     * const revisionComment = await prisma.revisionComment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RevisionComments and only return the `id`
     * const revisionCommentWithIdOnly = await prisma.revisionComment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RevisionCommentUpdateManyAndReturnArgs>(args: SelectSubset<T, RevisionCommentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RevisionCommentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RevisionComment.
     * @param {RevisionCommentUpsertArgs} args - Arguments to update or create a RevisionComment.
     * @example
     * // Update or create a RevisionComment
     * const revisionComment = await prisma.revisionComment.upsert({
     *   create: {
     *     // ... data to create a RevisionComment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RevisionComment we want to update
     *   }
     * })
     */
    upsert<T extends RevisionCommentUpsertArgs>(args: SelectSubset<T, RevisionCommentUpsertArgs<ExtArgs>>): Prisma__RevisionCommentClient<$Result.GetResult<Prisma.$RevisionCommentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RevisionComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RevisionCommentCountArgs} args - Arguments to filter RevisionComments to count.
     * @example
     * // Count the number of RevisionComments
     * const count = await prisma.revisionComment.count({
     *   where: {
     *     // ... the filter for the RevisionComments we want to count
     *   }
     * })
    **/
    count<T extends RevisionCommentCountArgs>(
      args?: Subset<T, RevisionCommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RevisionCommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RevisionComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RevisionCommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RevisionCommentAggregateArgs>(args: Subset<T, RevisionCommentAggregateArgs>): Prisma.PrismaPromise<GetRevisionCommentAggregateType<T>>

    /**
     * Group by RevisionComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RevisionCommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RevisionCommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RevisionCommentGroupByArgs['orderBy'] }
        : { orderBy?: RevisionCommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RevisionCommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRevisionCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RevisionComment model
   */
  readonly fields: RevisionCommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RevisionComment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RevisionCommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    revision<T extends AssetRevisionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AssetRevisionDefaultArgs<ExtArgs>>): Prisma__AssetRevisionClient<$Result.GetResult<Prisma.$AssetRevisionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RevisionComment model
   */
  interface RevisionCommentFieldRefs {
    readonly id: FieldRef<"RevisionComment", 'Int'>
    readonly asset_revision_id: FieldRef<"RevisionComment", 'Int'>
    readonly user_id: FieldRef<"RevisionComment", 'Int'>
    readonly content: FieldRef<"RevisionComment", 'String'>
    readonly createdAt: FieldRef<"RevisionComment", 'DateTime'>
    readonly updatedAt: FieldRef<"RevisionComment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RevisionComment findUnique
   */
  export type RevisionCommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RevisionComment
     */
    select?: RevisionCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RevisionComment
     */
    omit?: RevisionCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RevisionCommentInclude<ExtArgs> | null
    /**
     * Filter, which RevisionComment to fetch.
     */
    where: RevisionCommentWhereUniqueInput
  }

  /**
   * RevisionComment findUniqueOrThrow
   */
  export type RevisionCommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RevisionComment
     */
    select?: RevisionCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RevisionComment
     */
    omit?: RevisionCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RevisionCommentInclude<ExtArgs> | null
    /**
     * Filter, which RevisionComment to fetch.
     */
    where: RevisionCommentWhereUniqueInput
  }

  /**
   * RevisionComment findFirst
   */
  export type RevisionCommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RevisionComment
     */
    select?: RevisionCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RevisionComment
     */
    omit?: RevisionCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RevisionCommentInclude<ExtArgs> | null
    /**
     * Filter, which RevisionComment to fetch.
     */
    where?: RevisionCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RevisionComments to fetch.
     */
    orderBy?: RevisionCommentOrderByWithRelationInput | RevisionCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RevisionComments.
     */
    cursor?: RevisionCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RevisionComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RevisionComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RevisionComments.
     */
    distinct?: RevisionCommentScalarFieldEnum | RevisionCommentScalarFieldEnum[]
  }

  /**
   * RevisionComment findFirstOrThrow
   */
  export type RevisionCommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RevisionComment
     */
    select?: RevisionCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RevisionComment
     */
    omit?: RevisionCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RevisionCommentInclude<ExtArgs> | null
    /**
     * Filter, which RevisionComment to fetch.
     */
    where?: RevisionCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RevisionComments to fetch.
     */
    orderBy?: RevisionCommentOrderByWithRelationInput | RevisionCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RevisionComments.
     */
    cursor?: RevisionCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RevisionComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RevisionComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RevisionComments.
     */
    distinct?: RevisionCommentScalarFieldEnum | RevisionCommentScalarFieldEnum[]
  }

  /**
   * RevisionComment findMany
   */
  export type RevisionCommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RevisionComment
     */
    select?: RevisionCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RevisionComment
     */
    omit?: RevisionCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RevisionCommentInclude<ExtArgs> | null
    /**
     * Filter, which RevisionComments to fetch.
     */
    where?: RevisionCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RevisionComments to fetch.
     */
    orderBy?: RevisionCommentOrderByWithRelationInput | RevisionCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RevisionComments.
     */
    cursor?: RevisionCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RevisionComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RevisionComments.
     */
    skip?: number
    distinct?: RevisionCommentScalarFieldEnum | RevisionCommentScalarFieldEnum[]
  }

  /**
   * RevisionComment create
   */
  export type RevisionCommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RevisionComment
     */
    select?: RevisionCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RevisionComment
     */
    omit?: RevisionCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RevisionCommentInclude<ExtArgs> | null
    /**
     * The data needed to create a RevisionComment.
     */
    data: XOR<RevisionCommentCreateInput, RevisionCommentUncheckedCreateInput>
  }

  /**
   * RevisionComment createMany
   */
  export type RevisionCommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RevisionComments.
     */
    data: RevisionCommentCreateManyInput | RevisionCommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RevisionComment createManyAndReturn
   */
  export type RevisionCommentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RevisionComment
     */
    select?: RevisionCommentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RevisionComment
     */
    omit?: RevisionCommentOmit<ExtArgs> | null
    /**
     * The data used to create many RevisionComments.
     */
    data: RevisionCommentCreateManyInput | RevisionCommentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RevisionCommentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RevisionComment update
   */
  export type RevisionCommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RevisionComment
     */
    select?: RevisionCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RevisionComment
     */
    omit?: RevisionCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RevisionCommentInclude<ExtArgs> | null
    /**
     * The data needed to update a RevisionComment.
     */
    data: XOR<RevisionCommentUpdateInput, RevisionCommentUncheckedUpdateInput>
    /**
     * Choose, which RevisionComment to update.
     */
    where: RevisionCommentWhereUniqueInput
  }

  /**
   * RevisionComment updateMany
   */
  export type RevisionCommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RevisionComments.
     */
    data: XOR<RevisionCommentUpdateManyMutationInput, RevisionCommentUncheckedUpdateManyInput>
    /**
     * Filter which RevisionComments to update
     */
    where?: RevisionCommentWhereInput
    /**
     * Limit how many RevisionComments to update.
     */
    limit?: number
  }

  /**
   * RevisionComment updateManyAndReturn
   */
  export type RevisionCommentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RevisionComment
     */
    select?: RevisionCommentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RevisionComment
     */
    omit?: RevisionCommentOmit<ExtArgs> | null
    /**
     * The data used to update RevisionComments.
     */
    data: XOR<RevisionCommentUpdateManyMutationInput, RevisionCommentUncheckedUpdateManyInput>
    /**
     * Filter which RevisionComments to update
     */
    where?: RevisionCommentWhereInput
    /**
     * Limit how many RevisionComments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RevisionCommentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RevisionComment upsert
   */
  export type RevisionCommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RevisionComment
     */
    select?: RevisionCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RevisionComment
     */
    omit?: RevisionCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RevisionCommentInclude<ExtArgs> | null
    /**
     * The filter to search for the RevisionComment to update in case it exists.
     */
    where: RevisionCommentWhereUniqueInput
    /**
     * In case the RevisionComment found by the `where` argument doesn't exist, create a new RevisionComment with this data.
     */
    create: XOR<RevisionCommentCreateInput, RevisionCommentUncheckedCreateInput>
    /**
     * In case the RevisionComment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RevisionCommentUpdateInput, RevisionCommentUncheckedUpdateInput>
  }

  /**
   * RevisionComment delete
   */
  export type RevisionCommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RevisionComment
     */
    select?: RevisionCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RevisionComment
     */
    omit?: RevisionCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RevisionCommentInclude<ExtArgs> | null
    /**
     * Filter which RevisionComment to delete.
     */
    where: RevisionCommentWhereUniqueInput
  }

  /**
   * RevisionComment deleteMany
   */
  export type RevisionCommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RevisionComments to delete
     */
    where?: RevisionCommentWhereInput
    /**
     * Limit how many RevisionComments to delete.
     */
    limit?: number
  }

  /**
   * RevisionComment without action
   */
  export type RevisionCommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RevisionComment
     */
    select?: RevisionCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RevisionComment
     */
    omit?: RevisionCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RevisionCommentInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const TeamScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TeamScalarFieldEnum = (typeof TeamScalarFieldEnum)[keyof typeof TeamScalarFieldEnum]


  export const GameScalarFieldEnum: {
    id: 'id',
    name: 'name',
    assetCategories: 'assetCategories',
    eligiblePhase1Voters: 'eligiblePhase1Voters',
    eligiblePhase2Voters: 'eligiblePhase2Voters',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GameScalarFieldEnum = (typeof GameScalarFieldEnum)[keyof typeof GameScalarFieldEnum]


  export const GameTeamScalarFieldEnum: {
    id: 'id',
    game_id: 'game_id',
    team_id: 'team_id',
    startedAt: 'startedAt',
    endedAt: 'endedAt'
  };

  export type GameTeamScalarFieldEnum = (typeof GameTeamScalarFieldEnum)[keyof typeof GameTeamScalarFieldEnum]


  export const InviteCodeScalarFieldEnum: {
    id: 'id',
    code: 'code',
    team_id: 'team_id',
    role: 'role',
    description: 'description',
    ownedGameIds: 'ownedGameIds',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type InviteCodeScalarFieldEnum = (typeof InviteCodeScalarFieldEnum)[keyof typeof InviteCodeScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    passwordHash: 'passwordHash',
    avatar: 'avatar',
    customAvatar: 'customAvatar',
    role: 'role',
    isActive: 'isActive',
    lastLogin: 'lastLogin',
    team_id: 'team_id',
    invite_code_id: 'invite_code_id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const GameOwnerScalarFieldEnum: {
    id: 'id',
    game_id: 'game_id',
    user_id: 'user_id',
    createdAt: 'createdAt'
  };

  export type GameOwnerScalarFieldEnum = (typeof GameOwnerScalarFieldEnum)[keyof typeof GameOwnerScalarFieldEnum]


  export const AssetScalarFieldEnum: {
    id: 'id',
    name: 'name',
    imageUrl: 'imageUrl',
    category: 'category',
    game_id: 'game_id',
    uploader_id: 'uploader_id',
    phase1Approvals: 'phase1Approvals',
    phase1Rejections: 'phase1Rejections',
    phase1TotalVotes: 'phase1TotalVotes',
    phase1CompletedAt: 'phase1CompletedAt',
    phase2Approvals: 'phase2Approvals',
    phase2Rejections: 'phase2Rejections',
    phase2TotalVotes: 'phase2TotalVotes',
    phase2CompletedAt: 'phase2CompletedAt',
    status: 'status',
    notificationSent: 'notificationSent',
    archivedAt: 'archivedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AssetScalarFieldEnum = (typeof AssetScalarFieldEnum)[keyof typeof AssetScalarFieldEnum]


  export const AssetFinalReviewTeamScalarFieldEnum: {
    id: 'id',
    asset_id: 'asset_id',
    team_id: 'team_id',
    createdAt: 'createdAt'
  };

  export type AssetFinalReviewTeamScalarFieldEnum = (typeof AssetFinalReviewTeamScalarFieldEnum)[keyof typeof AssetFinalReviewTeamScalarFieldEnum]


  export const AssetRevisionScalarFieldEnum: {
    id: 'id',
    asset_id: 'asset_id',
    imageUrl: 'imageUrl',
    uploader_id: 'uploader_id',
    description: 'description',
    phase1Approvals: 'phase1Approvals',
    phase1Rejections: 'phase1Rejections',
    phase1TotalVotes: 'phase1TotalVotes',
    phase1CompletedAt: 'phase1CompletedAt',
    phase2Approvals: 'phase2Approvals',
    phase2Rejections: 'phase2Rejections',
    phase2TotalVotes: 'phase2TotalVotes',
    phase2CompletedAt: 'phase2CompletedAt',
    status: 'status',
    notificationSent: 'notificationSent',
    archivedAt: 'archivedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AssetRevisionScalarFieldEnum = (typeof AssetRevisionScalarFieldEnum)[keyof typeof AssetRevisionScalarFieldEnum]


  export const AssetVoteScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    vote: 'vote',
    phase: 'phase',
    weight: 'weight',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    asset_id: 'asset_id',
    asset_revision_id: 'asset_revision_id'
  };

  export type AssetVoteScalarFieldEnum = (typeof AssetVoteScalarFieldEnum)[keyof typeof AssetVoteScalarFieldEnum]


  export const UserAssetInteractionScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    asset_id: 'asset_id',
    asset_revision_id: 'asset_revision_id',
    hasVoted: 'hasVoted',
    hasCommented: 'hasCommented',
    dismissedAt: 'dismissedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    gameId: 'gameId'
  };

  export type UserAssetInteractionScalarFieldEnum = (typeof UserAssetInteractionScalarFieldEnum)[keyof typeof UserAssetInteractionScalarFieldEnum]


  export const AssetCommentScalarFieldEnum: {
    id: 'id',
    asset_id: 'asset_id',
    user_id: 'user_id',
    content: 'content',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AssetCommentScalarFieldEnum = (typeof AssetCommentScalarFieldEnum)[keyof typeof AssetCommentScalarFieldEnum]


  export const RevisionCommentScalarFieldEnum: {
    id: 'id',
    asset_revision_id: 'asset_revision_id',
    user_id: 'user_id',
    content: 'content',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RevisionCommentScalarFieldEnum = (typeof RevisionCommentScalarFieldEnum)[keyof typeof RevisionCommentScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'AssetStatus'
   */
  export type EnumAssetStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AssetStatus'>
    


  /**
   * Reference to a field of type 'AssetStatus[]'
   */
  export type ListEnumAssetStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AssetStatus[]'>
    


  /**
   * Reference to a field of type 'VoteType'
   */
  export type EnumVoteTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'VoteType'>
    


  /**
   * Reference to a field of type 'VoteType[]'
   */
  export type ListEnumVoteTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'VoteType[]'>
    


  /**
   * Reference to a field of type 'VotePhase'
   */
  export type EnumVotePhaseFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'VotePhase'>
    


  /**
   * Reference to a field of type 'VotePhase[]'
   */
  export type ListEnumVotePhaseFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'VotePhase[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type TeamWhereInput = {
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    id?: IntFilter<"Team"> | number
    name?: StringFilter<"Team"> | string
    createdAt?: DateTimeFilter<"Team"> | Date | string
    updatedAt?: DateTimeFilter<"Team"> | Date | string
    users?: UserListRelationFilter
    gameTeams?: GameTeamListRelationFilter
    inviteCodes?: InviteCodeListRelationFilter
    finalReviewAssets?: AssetFinalReviewTeamListRelationFilter
  }

  export type TeamOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    users?: UserOrderByRelationAggregateInput
    gameTeams?: GameTeamOrderByRelationAggregateInput
    inviteCodes?: InviteCodeOrderByRelationAggregateInput
    finalReviewAssets?: AssetFinalReviewTeamOrderByRelationAggregateInput
  }

  export type TeamWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    createdAt?: DateTimeFilter<"Team"> | Date | string
    updatedAt?: DateTimeFilter<"Team"> | Date | string
    users?: UserListRelationFilter
    gameTeams?: GameTeamListRelationFilter
    inviteCodes?: InviteCodeListRelationFilter
    finalReviewAssets?: AssetFinalReviewTeamListRelationFilter
  }, "id" | "name">

  export type TeamOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TeamCountOrderByAggregateInput
    _avg?: TeamAvgOrderByAggregateInput
    _max?: TeamMaxOrderByAggregateInput
    _min?: TeamMinOrderByAggregateInput
    _sum?: TeamSumOrderByAggregateInput
  }

  export type TeamScalarWhereWithAggregatesInput = {
    AND?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    OR?: TeamScalarWhereWithAggregatesInput[]
    NOT?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Team"> | number
    name?: StringWithAggregatesFilter<"Team"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Team"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Team"> | Date | string
  }

  export type GameWhereInput = {
    AND?: GameWhereInput | GameWhereInput[]
    OR?: GameWhereInput[]
    NOT?: GameWhereInput | GameWhereInput[]
    id?: IntFilter<"Game"> | number
    name?: StringFilter<"Game"> | string
    assetCategories?: StringNullableListFilter<"Game">
    eligiblePhase1Voters?: IntFilter<"Game"> | number
    eligiblePhase2Voters?: IntFilter<"Game"> | number
    createdAt?: DateTimeFilter<"Game"> | Date | string
    updatedAt?: DateTimeFilter<"Game"> | Date | string
    gameTeams?: GameTeamListRelationFilter
    gameOwners?: GameOwnerListRelationFilter
    assets?: AssetListRelationFilter
    userInteractions?: UserAssetInteractionListRelationFilter
  }

  export type GameOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    assetCategories?: SortOrder
    eligiblePhase1Voters?: SortOrder
    eligiblePhase2Voters?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    gameTeams?: GameTeamOrderByRelationAggregateInput
    gameOwners?: GameOwnerOrderByRelationAggregateInput
    assets?: AssetOrderByRelationAggregateInput
    userInteractions?: UserAssetInteractionOrderByRelationAggregateInput
  }

  export type GameWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GameWhereInput | GameWhereInput[]
    OR?: GameWhereInput[]
    NOT?: GameWhereInput | GameWhereInput[]
    name?: StringFilter<"Game"> | string
    assetCategories?: StringNullableListFilter<"Game">
    eligiblePhase1Voters?: IntFilter<"Game"> | number
    eligiblePhase2Voters?: IntFilter<"Game"> | number
    createdAt?: DateTimeFilter<"Game"> | Date | string
    updatedAt?: DateTimeFilter<"Game"> | Date | string
    gameTeams?: GameTeamListRelationFilter
    gameOwners?: GameOwnerListRelationFilter
    assets?: AssetListRelationFilter
    userInteractions?: UserAssetInteractionListRelationFilter
  }, "id">

  export type GameOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    assetCategories?: SortOrder
    eligiblePhase1Voters?: SortOrder
    eligiblePhase2Voters?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GameCountOrderByAggregateInput
    _avg?: GameAvgOrderByAggregateInput
    _max?: GameMaxOrderByAggregateInput
    _min?: GameMinOrderByAggregateInput
    _sum?: GameSumOrderByAggregateInput
  }

  export type GameScalarWhereWithAggregatesInput = {
    AND?: GameScalarWhereWithAggregatesInput | GameScalarWhereWithAggregatesInput[]
    OR?: GameScalarWhereWithAggregatesInput[]
    NOT?: GameScalarWhereWithAggregatesInput | GameScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Game"> | number
    name?: StringWithAggregatesFilter<"Game"> | string
    assetCategories?: StringNullableListFilter<"Game">
    eligiblePhase1Voters?: IntWithAggregatesFilter<"Game"> | number
    eligiblePhase2Voters?: IntWithAggregatesFilter<"Game"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Game"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Game"> | Date | string
  }

  export type GameTeamWhereInput = {
    AND?: GameTeamWhereInput | GameTeamWhereInput[]
    OR?: GameTeamWhereInput[]
    NOT?: GameTeamWhereInput | GameTeamWhereInput[]
    id?: IntFilter<"GameTeam"> | number
    game_id?: IntFilter<"GameTeam"> | number
    team_id?: IntFilter<"GameTeam"> | number
    startedAt?: DateTimeFilter<"GameTeam"> | Date | string
    endedAt?: DateTimeNullableFilter<"GameTeam"> | Date | string | null
    game?: XOR<GameScalarRelationFilter, GameWhereInput>
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
  }

  export type GameTeamOrderByWithRelationInput = {
    id?: SortOrder
    game_id?: SortOrder
    team_id?: SortOrder
    startedAt?: SortOrder
    endedAt?: SortOrderInput | SortOrder
    game?: GameOrderByWithRelationInput
    team?: TeamOrderByWithRelationInput
  }

  export type GameTeamWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    game_id_team_id?: GameTeamGame_idTeam_idCompoundUniqueInput
    AND?: GameTeamWhereInput | GameTeamWhereInput[]
    OR?: GameTeamWhereInput[]
    NOT?: GameTeamWhereInput | GameTeamWhereInput[]
    game_id?: IntFilter<"GameTeam"> | number
    team_id?: IntFilter<"GameTeam"> | number
    startedAt?: DateTimeFilter<"GameTeam"> | Date | string
    endedAt?: DateTimeNullableFilter<"GameTeam"> | Date | string | null
    game?: XOR<GameScalarRelationFilter, GameWhereInput>
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
  }, "id" | "game_id_team_id">

  export type GameTeamOrderByWithAggregationInput = {
    id?: SortOrder
    game_id?: SortOrder
    team_id?: SortOrder
    startedAt?: SortOrder
    endedAt?: SortOrderInput | SortOrder
    _count?: GameTeamCountOrderByAggregateInput
    _avg?: GameTeamAvgOrderByAggregateInput
    _max?: GameTeamMaxOrderByAggregateInput
    _min?: GameTeamMinOrderByAggregateInput
    _sum?: GameTeamSumOrderByAggregateInput
  }

  export type GameTeamScalarWhereWithAggregatesInput = {
    AND?: GameTeamScalarWhereWithAggregatesInput | GameTeamScalarWhereWithAggregatesInput[]
    OR?: GameTeamScalarWhereWithAggregatesInput[]
    NOT?: GameTeamScalarWhereWithAggregatesInput | GameTeamScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GameTeam"> | number
    game_id?: IntWithAggregatesFilter<"GameTeam"> | number
    team_id?: IntWithAggregatesFilter<"GameTeam"> | number
    startedAt?: DateTimeWithAggregatesFilter<"GameTeam"> | Date | string
    endedAt?: DateTimeNullableWithAggregatesFilter<"GameTeam"> | Date | string | null
  }

  export type InviteCodeWhereInput = {
    AND?: InviteCodeWhereInput | InviteCodeWhereInput[]
    OR?: InviteCodeWhereInput[]
    NOT?: InviteCodeWhereInput | InviteCodeWhereInput[]
    id?: IntFilter<"InviteCode"> | number
    code?: StringFilter<"InviteCode"> | string
    team_id?: IntFilter<"InviteCode"> | number
    role?: EnumUserRoleFilter<"InviteCode"> | $Enums.UserRole
    description?: StringNullableFilter<"InviteCode"> | string | null
    ownedGameIds?: IntNullableListFilter<"InviteCode">
    createdAt?: DateTimeFilter<"InviteCode"> | Date | string
    updatedAt?: DateTimeFilter<"InviteCode"> | Date | string
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
    users?: UserListRelationFilter
  }

  export type InviteCodeOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    team_id?: SortOrder
    role?: SortOrder
    description?: SortOrderInput | SortOrder
    ownedGameIds?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    team?: TeamOrderByWithRelationInput
    users?: UserOrderByRelationAggregateInput
  }

  export type InviteCodeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    code?: string
    AND?: InviteCodeWhereInput | InviteCodeWhereInput[]
    OR?: InviteCodeWhereInput[]
    NOT?: InviteCodeWhereInput | InviteCodeWhereInput[]
    team_id?: IntFilter<"InviteCode"> | number
    role?: EnumUserRoleFilter<"InviteCode"> | $Enums.UserRole
    description?: StringNullableFilter<"InviteCode"> | string | null
    ownedGameIds?: IntNullableListFilter<"InviteCode">
    createdAt?: DateTimeFilter<"InviteCode"> | Date | string
    updatedAt?: DateTimeFilter<"InviteCode"> | Date | string
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
    users?: UserListRelationFilter
  }, "id" | "code">

  export type InviteCodeOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    team_id?: SortOrder
    role?: SortOrder
    description?: SortOrderInput | SortOrder
    ownedGameIds?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: InviteCodeCountOrderByAggregateInput
    _avg?: InviteCodeAvgOrderByAggregateInput
    _max?: InviteCodeMaxOrderByAggregateInput
    _min?: InviteCodeMinOrderByAggregateInput
    _sum?: InviteCodeSumOrderByAggregateInput
  }

  export type InviteCodeScalarWhereWithAggregatesInput = {
    AND?: InviteCodeScalarWhereWithAggregatesInput | InviteCodeScalarWhereWithAggregatesInput[]
    OR?: InviteCodeScalarWhereWithAggregatesInput[]
    NOT?: InviteCodeScalarWhereWithAggregatesInput | InviteCodeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"InviteCode"> | number
    code?: StringWithAggregatesFilter<"InviteCode"> | string
    team_id?: IntWithAggregatesFilter<"InviteCode"> | number
    role?: EnumUserRoleWithAggregatesFilter<"InviteCode"> | $Enums.UserRole
    description?: StringNullableWithAggregatesFilter<"InviteCode"> | string | null
    ownedGameIds?: IntNullableListFilter<"InviteCode">
    createdAt?: DateTimeWithAggregatesFilter<"InviteCode"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"InviteCode"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    avatar?: IntFilter<"User"> | number
    customAvatar?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    isActive?: BoolFilter<"User"> | boolean
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    team_id?: IntFilter<"User"> | number
    invite_code_id?: IntNullableFilter<"User"> | number | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
    inviteCode?: XOR<InviteCodeNullableScalarRelationFilter, InviteCodeWhereInput> | null
    gameOwners?: GameOwnerListRelationFilter
    uploadedAssets?: AssetListRelationFilter
    assetRevisions?: AssetRevisionListRelationFilter
    assetVotes?: AssetVoteListRelationFilter
    assetComments?: AssetCommentListRelationFilter
    revisionComments?: RevisionCommentListRelationFilter
    assetInteractions?: UserAssetInteractionListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    avatar?: SortOrder
    customAvatar?: SortOrderInput | SortOrder
    role?: SortOrder
    isActive?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    team_id?: SortOrder
    invite_code_id?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    team?: TeamOrderByWithRelationInput
    inviteCode?: InviteCodeOrderByWithRelationInput
    gameOwners?: GameOwnerOrderByRelationAggregateInput
    uploadedAssets?: AssetOrderByRelationAggregateInput
    assetRevisions?: AssetRevisionOrderByRelationAggregateInput
    assetVotes?: AssetVoteOrderByRelationAggregateInput
    assetComments?: AssetCommentOrderByRelationAggregateInput
    revisionComments?: RevisionCommentOrderByRelationAggregateInput
    assetInteractions?: UserAssetInteractionOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    avatar?: IntFilter<"User"> | number
    customAvatar?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    isActive?: BoolFilter<"User"> | boolean
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    team_id?: IntFilter<"User"> | number
    invite_code_id?: IntNullableFilter<"User"> | number | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
    inviteCode?: XOR<InviteCodeNullableScalarRelationFilter, InviteCodeWhereInput> | null
    gameOwners?: GameOwnerListRelationFilter
    uploadedAssets?: AssetListRelationFilter
    assetRevisions?: AssetRevisionListRelationFilter
    assetVotes?: AssetVoteListRelationFilter
    assetComments?: AssetCommentListRelationFilter
    revisionComments?: RevisionCommentListRelationFilter
    assetInteractions?: UserAssetInteractionListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    avatar?: SortOrder
    customAvatar?: SortOrderInput | SortOrder
    role?: SortOrder
    isActive?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    team_id?: SortOrder
    invite_code_id?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    avatar?: IntWithAggregatesFilter<"User"> | number
    customAvatar?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    lastLogin?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    team_id?: IntWithAggregatesFilter<"User"> | number
    invite_code_id?: IntNullableWithAggregatesFilter<"User"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type GameOwnerWhereInput = {
    AND?: GameOwnerWhereInput | GameOwnerWhereInput[]
    OR?: GameOwnerWhereInput[]
    NOT?: GameOwnerWhereInput | GameOwnerWhereInput[]
    id?: IntFilter<"GameOwner"> | number
    game_id?: IntFilter<"GameOwner"> | number
    user_id?: IntFilter<"GameOwner"> | number
    createdAt?: DateTimeFilter<"GameOwner"> | Date | string
    game?: XOR<GameScalarRelationFilter, GameWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type GameOwnerOrderByWithRelationInput = {
    id?: SortOrder
    game_id?: SortOrder
    user_id?: SortOrder
    createdAt?: SortOrder
    game?: GameOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type GameOwnerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    game_id_user_id?: GameOwnerGame_idUser_idCompoundUniqueInput
    AND?: GameOwnerWhereInput | GameOwnerWhereInput[]
    OR?: GameOwnerWhereInput[]
    NOT?: GameOwnerWhereInput | GameOwnerWhereInput[]
    game_id?: IntFilter<"GameOwner"> | number
    user_id?: IntFilter<"GameOwner"> | number
    createdAt?: DateTimeFilter<"GameOwner"> | Date | string
    game?: XOR<GameScalarRelationFilter, GameWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "game_id_user_id">

  export type GameOwnerOrderByWithAggregationInput = {
    id?: SortOrder
    game_id?: SortOrder
    user_id?: SortOrder
    createdAt?: SortOrder
    _count?: GameOwnerCountOrderByAggregateInput
    _avg?: GameOwnerAvgOrderByAggregateInput
    _max?: GameOwnerMaxOrderByAggregateInput
    _min?: GameOwnerMinOrderByAggregateInput
    _sum?: GameOwnerSumOrderByAggregateInput
  }

  export type GameOwnerScalarWhereWithAggregatesInput = {
    AND?: GameOwnerScalarWhereWithAggregatesInput | GameOwnerScalarWhereWithAggregatesInput[]
    OR?: GameOwnerScalarWhereWithAggregatesInput[]
    NOT?: GameOwnerScalarWhereWithAggregatesInput | GameOwnerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GameOwner"> | number
    game_id?: IntWithAggregatesFilter<"GameOwner"> | number
    user_id?: IntWithAggregatesFilter<"GameOwner"> | number
    createdAt?: DateTimeWithAggregatesFilter<"GameOwner"> | Date | string
  }

  export type AssetWhereInput = {
    AND?: AssetWhereInput | AssetWhereInput[]
    OR?: AssetWhereInput[]
    NOT?: AssetWhereInput | AssetWhereInput[]
    id?: IntFilter<"Asset"> | number
    name?: StringFilter<"Asset"> | string
    imageUrl?: StringFilter<"Asset"> | string
    category?: StringFilter<"Asset"> | string
    game_id?: IntFilter<"Asset"> | number
    uploader_id?: IntFilter<"Asset"> | number
    phase1Approvals?: IntFilter<"Asset"> | number
    phase1Rejections?: IntFilter<"Asset"> | number
    phase1TotalVotes?: IntFilter<"Asset"> | number
    phase1CompletedAt?: DateTimeNullableFilter<"Asset"> | Date | string | null
    phase2Approvals?: IntFilter<"Asset"> | number
    phase2Rejections?: IntFilter<"Asset"> | number
    phase2TotalVotes?: IntFilter<"Asset"> | number
    phase2CompletedAt?: DateTimeNullableFilter<"Asset"> | Date | string | null
    status?: EnumAssetStatusFilter<"Asset"> | $Enums.AssetStatus
    notificationSent?: BoolFilter<"Asset"> | boolean
    archivedAt?: DateTimeNullableFilter<"Asset"> | Date | string | null
    createdAt?: DateTimeFilter<"Asset"> | Date | string
    updatedAt?: DateTimeFilter<"Asset"> | Date | string
    game?: XOR<GameScalarRelationFilter, GameWhereInput>
    uploader?: XOR<UserScalarRelationFilter, UserWhereInput>
    revisions?: AssetRevisionListRelationFilter
    votes?: AssetVoteListRelationFilter
    comments?: AssetCommentListRelationFilter
    userInteractions?: UserAssetInteractionListRelationFilter
    finalReviewTeams?: AssetFinalReviewTeamListRelationFilter
  }

  export type AssetOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    imageUrl?: SortOrder
    category?: SortOrder
    game_id?: SortOrder
    uploader_id?: SortOrder
    phase1Approvals?: SortOrder
    phase1Rejections?: SortOrder
    phase1TotalVotes?: SortOrder
    phase1CompletedAt?: SortOrderInput | SortOrder
    phase2Approvals?: SortOrder
    phase2Rejections?: SortOrder
    phase2TotalVotes?: SortOrder
    phase2CompletedAt?: SortOrderInput | SortOrder
    status?: SortOrder
    notificationSent?: SortOrder
    archivedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    game?: GameOrderByWithRelationInput
    uploader?: UserOrderByWithRelationInput
    revisions?: AssetRevisionOrderByRelationAggregateInput
    votes?: AssetVoteOrderByRelationAggregateInput
    comments?: AssetCommentOrderByRelationAggregateInput
    userInteractions?: UserAssetInteractionOrderByRelationAggregateInput
    finalReviewTeams?: AssetFinalReviewTeamOrderByRelationAggregateInput
  }

  export type AssetWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AssetWhereInput | AssetWhereInput[]
    OR?: AssetWhereInput[]
    NOT?: AssetWhereInput | AssetWhereInput[]
    name?: StringFilter<"Asset"> | string
    imageUrl?: StringFilter<"Asset"> | string
    category?: StringFilter<"Asset"> | string
    game_id?: IntFilter<"Asset"> | number
    uploader_id?: IntFilter<"Asset"> | number
    phase1Approvals?: IntFilter<"Asset"> | number
    phase1Rejections?: IntFilter<"Asset"> | number
    phase1TotalVotes?: IntFilter<"Asset"> | number
    phase1CompletedAt?: DateTimeNullableFilter<"Asset"> | Date | string | null
    phase2Approvals?: IntFilter<"Asset"> | number
    phase2Rejections?: IntFilter<"Asset"> | number
    phase2TotalVotes?: IntFilter<"Asset"> | number
    phase2CompletedAt?: DateTimeNullableFilter<"Asset"> | Date | string | null
    status?: EnumAssetStatusFilter<"Asset"> | $Enums.AssetStatus
    notificationSent?: BoolFilter<"Asset"> | boolean
    archivedAt?: DateTimeNullableFilter<"Asset"> | Date | string | null
    createdAt?: DateTimeFilter<"Asset"> | Date | string
    updatedAt?: DateTimeFilter<"Asset"> | Date | string
    game?: XOR<GameScalarRelationFilter, GameWhereInput>
    uploader?: XOR<UserScalarRelationFilter, UserWhereInput>
    revisions?: AssetRevisionListRelationFilter
    votes?: AssetVoteListRelationFilter
    comments?: AssetCommentListRelationFilter
    userInteractions?: UserAssetInteractionListRelationFilter
    finalReviewTeams?: AssetFinalReviewTeamListRelationFilter
  }, "id">

  export type AssetOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    imageUrl?: SortOrder
    category?: SortOrder
    game_id?: SortOrder
    uploader_id?: SortOrder
    phase1Approvals?: SortOrder
    phase1Rejections?: SortOrder
    phase1TotalVotes?: SortOrder
    phase1CompletedAt?: SortOrderInput | SortOrder
    phase2Approvals?: SortOrder
    phase2Rejections?: SortOrder
    phase2TotalVotes?: SortOrder
    phase2CompletedAt?: SortOrderInput | SortOrder
    status?: SortOrder
    notificationSent?: SortOrder
    archivedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AssetCountOrderByAggregateInput
    _avg?: AssetAvgOrderByAggregateInput
    _max?: AssetMaxOrderByAggregateInput
    _min?: AssetMinOrderByAggregateInput
    _sum?: AssetSumOrderByAggregateInput
  }

  export type AssetScalarWhereWithAggregatesInput = {
    AND?: AssetScalarWhereWithAggregatesInput | AssetScalarWhereWithAggregatesInput[]
    OR?: AssetScalarWhereWithAggregatesInput[]
    NOT?: AssetScalarWhereWithAggregatesInput | AssetScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Asset"> | number
    name?: StringWithAggregatesFilter<"Asset"> | string
    imageUrl?: StringWithAggregatesFilter<"Asset"> | string
    category?: StringWithAggregatesFilter<"Asset"> | string
    game_id?: IntWithAggregatesFilter<"Asset"> | number
    uploader_id?: IntWithAggregatesFilter<"Asset"> | number
    phase1Approvals?: IntWithAggregatesFilter<"Asset"> | number
    phase1Rejections?: IntWithAggregatesFilter<"Asset"> | number
    phase1TotalVotes?: IntWithAggregatesFilter<"Asset"> | number
    phase1CompletedAt?: DateTimeNullableWithAggregatesFilter<"Asset"> | Date | string | null
    phase2Approvals?: IntWithAggregatesFilter<"Asset"> | number
    phase2Rejections?: IntWithAggregatesFilter<"Asset"> | number
    phase2TotalVotes?: IntWithAggregatesFilter<"Asset"> | number
    phase2CompletedAt?: DateTimeNullableWithAggregatesFilter<"Asset"> | Date | string | null
    status?: EnumAssetStatusWithAggregatesFilter<"Asset"> | $Enums.AssetStatus
    notificationSent?: BoolWithAggregatesFilter<"Asset"> | boolean
    archivedAt?: DateTimeNullableWithAggregatesFilter<"Asset"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Asset"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Asset"> | Date | string
  }

  export type AssetFinalReviewTeamWhereInput = {
    AND?: AssetFinalReviewTeamWhereInput | AssetFinalReviewTeamWhereInput[]
    OR?: AssetFinalReviewTeamWhereInput[]
    NOT?: AssetFinalReviewTeamWhereInput | AssetFinalReviewTeamWhereInput[]
    id?: IntFilter<"AssetFinalReviewTeam"> | number
    asset_id?: IntFilter<"AssetFinalReviewTeam"> | number
    team_id?: IntFilter<"AssetFinalReviewTeam"> | number
    createdAt?: DateTimeFilter<"AssetFinalReviewTeam"> | Date | string
    asset?: XOR<AssetScalarRelationFilter, AssetWhereInput>
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
  }

  export type AssetFinalReviewTeamOrderByWithRelationInput = {
    id?: SortOrder
    asset_id?: SortOrder
    team_id?: SortOrder
    createdAt?: SortOrder
    asset?: AssetOrderByWithRelationInput
    team?: TeamOrderByWithRelationInput
  }

  export type AssetFinalReviewTeamWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    asset_id_team_id?: AssetFinalReviewTeamAsset_idTeam_idCompoundUniqueInput
    AND?: AssetFinalReviewTeamWhereInput | AssetFinalReviewTeamWhereInput[]
    OR?: AssetFinalReviewTeamWhereInput[]
    NOT?: AssetFinalReviewTeamWhereInput | AssetFinalReviewTeamWhereInput[]
    asset_id?: IntFilter<"AssetFinalReviewTeam"> | number
    team_id?: IntFilter<"AssetFinalReviewTeam"> | number
    createdAt?: DateTimeFilter<"AssetFinalReviewTeam"> | Date | string
    asset?: XOR<AssetScalarRelationFilter, AssetWhereInput>
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
  }, "id" | "asset_id_team_id">

  export type AssetFinalReviewTeamOrderByWithAggregationInput = {
    id?: SortOrder
    asset_id?: SortOrder
    team_id?: SortOrder
    createdAt?: SortOrder
    _count?: AssetFinalReviewTeamCountOrderByAggregateInput
    _avg?: AssetFinalReviewTeamAvgOrderByAggregateInput
    _max?: AssetFinalReviewTeamMaxOrderByAggregateInput
    _min?: AssetFinalReviewTeamMinOrderByAggregateInput
    _sum?: AssetFinalReviewTeamSumOrderByAggregateInput
  }

  export type AssetFinalReviewTeamScalarWhereWithAggregatesInput = {
    AND?: AssetFinalReviewTeamScalarWhereWithAggregatesInput | AssetFinalReviewTeamScalarWhereWithAggregatesInput[]
    OR?: AssetFinalReviewTeamScalarWhereWithAggregatesInput[]
    NOT?: AssetFinalReviewTeamScalarWhereWithAggregatesInput | AssetFinalReviewTeamScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AssetFinalReviewTeam"> | number
    asset_id?: IntWithAggregatesFilter<"AssetFinalReviewTeam"> | number
    team_id?: IntWithAggregatesFilter<"AssetFinalReviewTeam"> | number
    createdAt?: DateTimeWithAggregatesFilter<"AssetFinalReviewTeam"> | Date | string
  }

  export type AssetRevisionWhereInput = {
    AND?: AssetRevisionWhereInput | AssetRevisionWhereInput[]
    OR?: AssetRevisionWhereInput[]
    NOT?: AssetRevisionWhereInput | AssetRevisionWhereInput[]
    id?: IntFilter<"AssetRevision"> | number
    asset_id?: IntFilter<"AssetRevision"> | number
    imageUrl?: StringFilter<"AssetRevision"> | string
    uploader_id?: IntFilter<"AssetRevision"> | number
    description?: StringNullableFilter<"AssetRevision"> | string | null
    phase1Approvals?: IntFilter<"AssetRevision"> | number
    phase1Rejections?: IntFilter<"AssetRevision"> | number
    phase1TotalVotes?: IntFilter<"AssetRevision"> | number
    phase1CompletedAt?: DateTimeNullableFilter<"AssetRevision"> | Date | string | null
    phase2Approvals?: IntFilter<"AssetRevision"> | number
    phase2Rejections?: IntFilter<"AssetRevision"> | number
    phase2TotalVotes?: IntFilter<"AssetRevision"> | number
    phase2CompletedAt?: DateTimeNullableFilter<"AssetRevision"> | Date | string | null
    status?: EnumAssetStatusFilter<"AssetRevision"> | $Enums.AssetStatus
    notificationSent?: BoolFilter<"AssetRevision"> | boolean
    archivedAt?: DateTimeNullableFilter<"AssetRevision"> | Date | string | null
    createdAt?: DateTimeFilter<"AssetRevision"> | Date | string
    updatedAt?: DateTimeFilter<"AssetRevision"> | Date | string
    asset?: XOR<AssetScalarRelationFilter, AssetWhereInput>
    uploader?: XOR<UserScalarRelationFilter, UserWhereInput>
    votes?: AssetVoteListRelationFilter
    comments?: RevisionCommentListRelationFilter
    userInteractions?: UserAssetInteractionListRelationFilter
  }

  export type AssetRevisionOrderByWithRelationInput = {
    id?: SortOrder
    asset_id?: SortOrder
    imageUrl?: SortOrder
    uploader_id?: SortOrder
    description?: SortOrderInput | SortOrder
    phase1Approvals?: SortOrder
    phase1Rejections?: SortOrder
    phase1TotalVotes?: SortOrder
    phase1CompletedAt?: SortOrderInput | SortOrder
    phase2Approvals?: SortOrder
    phase2Rejections?: SortOrder
    phase2TotalVotes?: SortOrder
    phase2CompletedAt?: SortOrderInput | SortOrder
    status?: SortOrder
    notificationSent?: SortOrder
    archivedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    asset?: AssetOrderByWithRelationInput
    uploader?: UserOrderByWithRelationInput
    votes?: AssetVoteOrderByRelationAggregateInput
    comments?: RevisionCommentOrderByRelationAggregateInput
    userInteractions?: UserAssetInteractionOrderByRelationAggregateInput
  }

  export type AssetRevisionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AssetRevisionWhereInput | AssetRevisionWhereInput[]
    OR?: AssetRevisionWhereInput[]
    NOT?: AssetRevisionWhereInput | AssetRevisionWhereInput[]
    asset_id?: IntFilter<"AssetRevision"> | number
    imageUrl?: StringFilter<"AssetRevision"> | string
    uploader_id?: IntFilter<"AssetRevision"> | number
    description?: StringNullableFilter<"AssetRevision"> | string | null
    phase1Approvals?: IntFilter<"AssetRevision"> | number
    phase1Rejections?: IntFilter<"AssetRevision"> | number
    phase1TotalVotes?: IntFilter<"AssetRevision"> | number
    phase1CompletedAt?: DateTimeNullableFilter<"AssetRevision"> | Date | string | null
    phase2Approvals?: IntFilter<"AssetRevision"> | number
    phase2Rejections?: IntFilter<"AssetRevision"> | number
    phase2TotalVotes?: IntFilter<"AssetRevision"> | number
    phase2CompletedAt?: DateTimeNullableFilter<"AssetRevision"> | Date | string | null
    status?: EnumAssetStatusFilter<"AssetRevision"> | $Enums.AssetStatus
    notificationSent?: BoolFilter<"AssetRevision"> | boolean
    archivedAt?: DateTimeNullableFilter<"AssetRevision"> | Date | string | null
    createdAt?: DateTimeFilter<"AssetRevision"> | Date | string
    updatedAt?: DateTimeFilter<"AssetRevision"> | Date | string
    asset?: XOR<AssetScalarRelationFilter, AssetWhereInput>
    uploader?: XOR<UserScalarRelationFilter, UserWhereInput>
    votes?: AssetVoteListRelationFilter
    comments?: RevisionCommentListRelationFilter
    userInteractions?: UserAssetInteractionListRelationFilter
  }, "id">

  export type AssetRevisionOrderByWithAggregationInput = {
    id?: SortOrder
    asset_id?: SortOrder
    imageUrl?: SortOrder
    uploader_id?: SortOrder
    description?: SortOrderInput | SortOrder
    phase1Approvals?: SortOrder
    phase1Rejections?: SortOrder
    phase1TotalVotes?: SortOrder
    phase1CompletedAt?: SortOrderInput | SortOrder
    phase2Approvals?: SortOrder
    phase2Rejections?: SortOrder
    phase2TotalVotes?: SortOrder
    phase2CompletedAt?: SortOrderInput | SortOrder
    status?: SortOrder
    notificationSent?: SortOrder
    archivedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AssetRevisionCountOrderByAggregateInput
    _avg?: AssetRevisionAvgOrderByAggregateInput
    _max?: AssetRevisionMaxOrderByAggregateInput
    _min?: AssetRevisionMinOrderByAggregateInput
    _sum?: AssetRevisionSumOrderByAggregateInput
  }

  export type AssetRevisionScalarWhereWithAggregatesInput = {
    AND?: AssetRevisionScalarWhereWithAggregatesInput | AssetRevisionScalarWhereWithAggregatesInput[]
    OR?: AssetRevisionScalarWhereWithAggregatesInput[]
    NOT?: AssetRevisionScalarWhereWithAggregatesInput | AssetRevisionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AssetRevision"> | number
    asset_id?: IntWithAggregatesFilter<"AssetRevision"> | number
    imageUrl?: StringWithAggregatesFilter<"AssetRevision"> | string
    uploader_id?: IntWithAggregatesFilter<"AssetRevision"> | number
    description?: StringNullableWithAggregatesFilter<"AssetRevision"> | string | null
    phase1Approvals?: IntWithAggregatesFilter<"AssetRevision"> | number
    phase1Rejections?: IntWithAggregatesFilter<"AssetRevision"> | number
    phase1TotalVotes?: IntWithAggregatesFilter<"AssetRevision"> | number
    phase1CompletedAt?: DateTimeNullableWithAggregatesFilter<"AssetRevision"> | Date | string | null
    phase2Approvals?: IntWithAggregatesFilter<"AssetRevision"> | number
    phase2Rejections?: IntWithAggregatesFilter<"AssetRevision"> | number
    phase2TotalVotes?: IntWithAggregatesFilter<"AssetRevision"> | number
    phase2CompletedAt?: DateTimeNullableWithAggregatesFilter<"AssetRevision"> | Date | string | null
    status?: EnumAssetStatusWithAggregatesFilter<"AssetRevision"> | $Enums.AssetStatus
    notificationSent?: BoolWithAggregatesFilter<"AssetRevision"> | boolean
    archivedAt?: DateTimeNullableWithAggregatesFilter<"AssetRevision"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AssetRevision"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AssetRevision"> | Date | string
  }

  export type AssetVoteWhereInput = {
    AND?: AssetVoteWhereInput | AssetVoteWhereInput[]
    OR?: AssetVoteWhereInput[]
    NOT?: AssetVoteWhereInput | AssetVoteWhereInput[]
    id?: IntFilter<"AssetVote"> | number
    user_id?: IntFilter<"AssetVote"> | number
    vote?: EnumVoteTypeFilter<"AssetVote"> | $Enums.VoteType
    phase?: EnumVotePhaseFilter<"AssetVote"> | $Enums.VotePhase
    weight?: IntFilter<"AssetVote"> | number
    createdAt?: DateTimeFilter<"AssetVote"> | Date | string
    updatedAt?: DateTimeFilter<"AssetVote"> | Date | string
    asset_id?: IntNullableFilter<"AssetVote"> | number | null
    asset_revision_id?: IntNullableFilter<"AssetVote"> | number | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    asset?: XOR<AssetNullableScalarRelationFilter, AssetWhereInput> | null
    revision?: XOR<AssetRevisionNullableScalarRelationFilter, AssetRevisionWhereInput> | null
  }

  export type AssetVoteOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    vote?: SortOrder
    phase?: SortOrder
    weight?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    asset_id?: SortOrderInput | SortOrder
    asset_revision_id?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    asset?: AssetOrderByWithRelationInput
    revision?: AssetRevisionOrderByWithRelationInput
  }

  export type AssetVoteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    user_id_asset_id_phase?: AssetVoteUser_idAsset_idPhaseCompoundUniqueInput
    user_id_asset_revision_id_phase?: AssetVoteUser_idAsset_revision_idPhaseCompoundUniqueInput
    AND?: AssetVoteWhereInput | AssetVoteWhereInput[]
    OR?: AssetVoteWhereInput[]
    NOT?: AssetVoteWhereInput | AssetVoteWhereInput[]
    user_id?: IntFilter<"AssetVote"> | number
    vote?: EnumVoteTypeFilter<"AssetVote"> | $Enums.VoteType
    phase?: EnumVotePhaseFilter<"AssetVote"> | $Enums.VotePhase
    weight?: IntFilter<"AssetVote"> | number
    createdAt?: DateTimeFilter<"AssetVote"> | Date | string
    updatedAt?: DateTimeFilter<"AssetVote"> | Date | string
    asset_id?: IntNullableFilter<"AssetVote"> | number | null
    asset_revision_id?: IntNullableFilter<"AssetVote"> | number | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    asset?: XOR<AssetNullableScalarRelationFilter, AssetWhereInput> | null
    revision?: XOR<AssetRevisionNullableScalarRelationFilter, AssetRevisionWhereInput> | null
  }, "id" | "user_id_asset_id_phase" | "user_id_asset_revision_id_phase">

  export type AssetVoteOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    vote?: SortOrder
    phase?: SortOrder
    weight?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    asset_id?: SortOrderInput | SortOrder
    asset_revision_id?: SortOrderInput | SortOrder
    _count?: AssetVoteCountOrderByAggregateInput
    _avg?: AssetVoteAvgOrderByAggregateInput
    _max?: AssetVoteMaxOrderByAggregateInput
    _min?: AssetVoteMinOrderByAggregateInput
    _sum?: AssetVoteSumOrderByAggregateInput
  }

  export type AssetVoteScalarWhereWithAggregatesInput = {
    AND?: AssetVoteScalarWhereWithAggregatesInput | AssetVoteScalarWhereWithAggregatesInput[]
    OR?: AssetVoteScalarWhereWithAggregatesInput[]
    NOT?: AssetVoteScalarWhereWithAggregatesInput | AssetVoteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AssetVote"> | number
    user_id?: IntWithAggregatesFilter<"AssetVote"> | number
    vote?: EnumVoteTypeWithAggregatesFilter<"AssetVote"> | $Enums.VoteType
    phase?: EnumVotePhaseWithAggregatesFilter<"AssetVote"> | $Enums.VotePhase
    weight?: IntWithAggregatesFilter<"AssetVote"> | number
    createdAt?: DateTimeWithAggregatesFilter<"AssetVote"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AssetVote"> | Date | string
    asset_id?: IntNullableWithAggregatesFilter<"AssetVote"> | number | null
    asset_revision_id?: IntNullableWithAggregatesFilter<"AssetVote"> | number | null
  }

  export type UserAssetInteractionWhereInput = {
    AND?: UserAssetInteractionWhereInput | UserAssetInteractionWhereInput[]
    OR?: UserAssetInteractionWhereInput[]
    NOT?: UserAssetInteractionWhereInput | UserAssetInteractionWhereInput[]
    id?: IntFilter<"UserAssetInteraction"> | number
    user_id?: IntFilter<"UserAssetInteraction"> | number
    asset_id?: IntNullableFilter<"UserAssetInteraction"> | number | null
    asset_revision_id?: IntNullableFilter<"UserAssetInteraction"> | number | null
    hasVoted?: BoolFilter<"UserAssetInteraction"> | boolean
    hasCommented?: BoolFilter<"UserAssetInteraction"> | boolean
    dismissedAt?: DateTimeNullableFilter<"UserAssetInteraction"> | Date | string | null
    createdAt?: DateTimeFilter<"UserAssetInteraction"> | Date | string
    updatedAt?: DateTimeFilter<"UserAssetInteraction"> | Date | string
    gameId?: IntNullableFilter<"UserAssetInteraction"> | number | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    asset?: XOR<AssetNullableScalarRelationFilter, AssetWhereInput> | null
    revision?: XOR<AssetRevisionNullableScalarRelationFilter, AssetRevisionWhereInput> | null
    Game?: XOR<GameNullableScalarRelationFilter, GameWhereInput> | null
  }

  export type UserAssetInteractionOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    asset_id?: SortOrderInput | SortOrder
    asset_revision_id?: SortOrderInput | SortOrder
    hasVoted?: SortOrder
    hasCommented?: SortOrder
    dismissedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    gameId?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    asset?: AssetOrderByWithRelationInput
    revision?: AssetRevisionOrderByWithRelationInput
    Game?: GameOrderByWithRelationInput
  }

  export type UserAssetInteractionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    user_id_asset_id?: UserAssetInteractionUser_idAsset_idCompoundUniqueInput
    user_id_asset_revision_id?: UserAssetInteractionUser_idAsset_revision_idCompoundUniqueInput
    AND?: UserAssetInteractionWhereInput | UserAssetInteractionWhereInput[]
    OR?: UserAssetInteractionWhereInput[]
    NOT?: UserAssetInteractionWhereInput | UserAssetInteractionWhereInput[]
    user_id?: IntFilter<"UserAssetInteraction"> | number
    asset_id?: IntNullableFilter<"UserAssetInteraction"> | number | null
    asset_revision_id?: IntNullableFilter<"UserAssetInteraction"> | number | null
    hasVoted?: BoolFilter<"UserAssetInteraction"> | boolean
    hasCommented?: BoolFilter<"UserAssetInteraction"> | boolean
    dismissedAt?: DateTimeNullableFilter<"UserAssetInteraction"> | Date | string | null
    createdAt?: DateTimeFilter<"UserAssetInteraction"> | Date | string
    updatedAt?: DateTimeFilter<"UserAssetInteraction"> | Date | string
    gameId?: IntNullableFilter<"UserAssetInteraction"> | number | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    asset?: XOR<AssetNullableScalarRelationFilter, AssetWhereInput> | null
    revision?: XOR<AssetRevisionNullableScalarRelationFilter, AssetRevisionWhereInput> | null
    Game?: XOR<GameNullableScalarRelationFilter, GameWhereInput> | null
  }, "id" | "user_id_asset_id" | "user_id_asset_revision_id">

  export type UserAssetInteractionOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    asset_id?: SortOrderInput | SortOrder
    asset_revision_id?: SortOrderInput | SortOrder
    hasVoted?: SortOrder
    hasCommented?: SortOrder
    dismissedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    gameId?: SortOrderInput | SortOrder
    _count?: UserAssetInteractionCountOrderByAggregateInput
    _avg?: UserAssetInteractionAvgOrderByAggregateInput
    _max?: UserAssetInteractionMaxOrderByAggregateInput
    _min?: UserAssetInteractionMinOrderByAggregateInput
    _sum?: UserAssetInteractionSumOrderByAggregateInput
  }

  export type UserAssetInteractionScalarWhereWithAggregatesInput = {
    AND?: UserAssetInteractionScalarWhereWithAggregatesInput | UserAssetInteractionScalarWhereWithAggregatesInput[]
    OR?: UserAssetInteractionScalarWhereWithAggregatesInput[]
    NOT?: UserAssetInteractionScalarWhereWithAggregatesInput | UserAssetInteractionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserAssetInteraction"> | number
    user_id?: IntWithAggregatesFilter<"UserAssetInteraction"> | number
    asset_id?: IntNullableWithAggregatesFilter<"UserAssetInteraction"> | number | null
    asset_revision_id?: IntNullableWithAggregatesFilter<"UserAssetInteraction"> | number | null
    hasVoted?: BoolWithAggregatesFilter<"UserAssetInteraction"> | boolean
    hasCommented?: BoolWithAggregatesFilter<"UserAssetInteraction"> | boolean
    dismissedAt?: DateTimeNullableWithAggregatesFilter<"UserAssetInteraction"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"UserAssetInteraction"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserAssetInteraction"> | Date | string
    gameId?: IntNullableWithAggregatesFilter<"UserAssetInteraction"> | number | null
  }

  export type AssetCommentWhereInput = {
    AND?: AssetCommentWhereInput | AssetCommentWhereInput[]
    OR?: AssetCommentWhereInput[]
    NOT?: AssetCommentWhereInput | AssetCommentWhereInput[]
    id?: IntFilter<"AssetComment"> | number
    asset_id?: IntFilter<"AssetComment"> | number
    user_id?: IntFilter<"AssetComment"> | number
    content?: StringFilter<"AssetComment"> | string
    createdAt?: DateTimeFilter<"AssetComment"> | Date | string
    updatedAt?: DateTimeFilter<"AssetComment"> | Date | string
    asset?: XOR<AssetScalarRelationFilter, AssetWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AssetCommentOrderByWithRelationInput = {
    id?: SortOrder
    asset_id?: SortOrder
    user_id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    asset?: AssetOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type AssetCommentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AssetCommentWhereInput | AssetCommentWhereInput[]
    OR?: AssetCommentWhereInput[]
    NOT?: AssetCommentWhereInput | AssetCommentWhereInput[]
    asset_id?: IntFilter<"AssetComment"> | number
    user_id?: IntFilter<"AssetComment"> | number
    content?: StringFilter<"AssetComment"> | string
    createdAt?: DateTimeFilter<"AssetComment"> | Date | string
    updatedAt?: DateTimeFilter<"AssetComment"> | Date | string
    asset?: XOR<AssetScalarRelationFilter, AssetWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type AssetCommentOrderByWithAggregationInput = {
    id?: SortOrder
    asset_id?: SortOrder
    user_id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AssetCommentCountOrderByAggregateInput
    _avg?: AssetCommentAvgOrderByAggregateInput
    _max?: AssetCommentMaxOrderByAggregateInput
    _min?: AssetCommentMinOrderByAggregateInput
    _sum?: AssetCommentSumOrderByAggregateInput
  }

  export type AssetCommentScalarWhereWithAggregatesInput = {
    AND?: AssetCommentScalarWhereWithAggregatesInput | AssetCommentScalarWhereWithAggregatesInput[]
    OR?: AssetCommentScalarWhereWithAggregatesInput[]
    NOT?: AssetCommentScalarWhereWithAggregatesInput | AssetCommentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AssetComment"> | number
    asset_id?: IntWithAggregatesFilter<"AssetComment"> | number
    user_id?: IntWithAggregatesFilter<"AssetComment"> | number
    content?: StringWithAggregatesFilter<"AssetComment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"AssetComment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AssetComment"> | Date | string
  }

  export type RevisionCommentWhereInput = {
    AND?: RevisionCommentWhereInput | RevisionCommentWhereInput[]
    OR?: RevisionCommentWhereInput[]
    NOT?: RevisionCommentWhereInput | RevisionCommentWhereInput[]
    id?: IntFilter<"RevisionComment"> | number
    asset_revision_id?: IntFilter<"RevisionComment"> | number
    user_id?: IntFilter<"RevisionComment"> | number
    content?: StringFilter<"RevisionComment"> | string
    createdAt?: DateTimeFilter<"RevisionComment"> | Date | string
    updatedAt?: DateTimeFilter<"RevisionComment"> | Date | string
    revision?: XOR<AssetRevisionScalarRelationFilter, AssetRevisionWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type RevisionCommentOrderByWithRelationInput = {
    id?: SortOrder
    asset_revision_id?: SortOrder
    user_id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    revision?: AssetRevisionOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type RevisionCommentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RevisionCommentWhereInput | RevisionCommentWhereInput[]
    OR?: RevisionCommentWhereInput[]
    NOT?: RevisionCommentWhereInput | RevisionCommentWhereInput[]
    asset_revision_id?: IntFilter<"RevisionComment"> | number
    user_id?: IntFilter<"RevisionComment"> | number
    content?: StringFilter<"RevisionComment"> | string
    createdAt?: DateTimeFilter<"RevisionComment"> | Date | string
    updatedAt?: DateTimeFilter<"RevisionComment"> | Date | string
    revision?: XOR<AssetRevisionScalarRelationFilter, AssetRevisionWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type RevisionCommentOrderByWithAggregationInput = {
    id?: SortOrder
    asset_revision_id?: SortOrder
    user_id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RevisionCommentCountOrderByAggregateInput
    _avg?: RevisionCommentAvgOrderByAggregateInput
    _max?: RevisionCommentMaxOrderByAggregateInput
    _min?: RevisionCommentMinOrderByAggregateInput
    _sum?: RevisionCommentSumOrderByAggregateInput
  }

  export type RevisionCommentScalarWhereWithAggregatesInput = {
    AND?: RevisionCommentScalarWhereWithAggregatesInput | RevisionCommentScalarWhereWithAggregatesInput[]
    OR?: RevisionCommentScalarWhereWithAggregatesInput[]
    NOT?: RevisionCommentScalarWhereWithAggregatesInput | RevisionCommentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RevisionComment"> | number
    asset_revision_id?: IntWithAggregatesFilter<"RevisionComment"> | number
    user_id?: IntWithAggregatesFilter<"RevisionComment"> | number
    content?: StringWithAggregatesFilter<"RevisionComment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"RevisionComment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"RevisionComment"> | Date | string
  }

  export type TeamCreateInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutTeamInput
    gameTeams?: GameTeamCreateNestedManyWithoutTeamInput
    inviteCodes?: InviteCodeCreateNestedManyWithoutTeamInput
    finalReviewAssets?: AssetFinalReviewTeamCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutTeamInput
    gameTeams?: GameTeamUncheckedCreateNestedManyWithoutTeamInput
    inviteCodes?: InviteCodeUncheckedCreateNestedManyWithoutTeamInput
    finalReviewAssets?: AssetFinalReviewTeamUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutTeamNestedInput
    gameTeams?: GameTeamUpdateManyWithoutTeamNestedInput
    inviteCodes?: InviteCodeUpdateManyWithoutTeamNestedInput
    finalReviewAssets?: AssetFinalReviewTeamUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutTeamNestedInput
    gameTeams?: GameTeamUncheckedUpdateManyWithoutTeamNestedInput
    inviteCodes?: InviteCodeUncheckedUpdateManyWithoutTeamNestedInput
    finalReviewAssets?: AssetFinalReviewTeamUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type TeamCreateManyInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeamUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameCreateInput = {
    name: string
    assetCategories?: GameCreateassetCategoriesInput | string[]
    eligiblePhase1Voters?: number
    eligiblePhase2Voters?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    gameTeams?: GameTeamCreateNestedManyWithoutGameInput
    gameOwners?: GameOwnerCreateNestedManyWithoutGameInput
    assets?: AssetCreateNestedManyWithoutGameInput
    userInteractions?: UserAssetInteractionCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateInput = {
    id?: number
    name: string
    assetCategories?: GameCreateassetCategoriesInput | string[]
    eligiblePhase1Voters?: number
    eligiblePhase2Voters?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    gameTeams?: GameTeamUncheckedCreateNestedManyWithoutGameInput
    gameOwners?: GameOwnerUncheckedCreateNestedManyWithoutGameInput
    assets?: AssetUncheckedCreateNestedManyWithoutGameInput
    userInteractions?: UserAssetInteractionUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    assetCategories?: GameUpdateassetCategoriesInput | string[]
    eligiblePhase1Voters?: IntFieldUpdateOperationsInput | number
    eligiblePhase2Voters?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameTeams?: GameTeamUpdateManyWithoutGameNestedInput
    gameOwners?: GameOwnerUpdateManyWithoutGameNestedInput
    assets?: AssetUpdateManyWithoutGameNestedInput
    userInteractions?: UserAssetInteractionUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    assetCategories?: GameUpdateassetCategoriesInput | string[]
    eligiblePhase1Voters?: IntFieldUpdateOperationsInput | number
    eligiblePhase2Voters?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameTeams?: GameTeamUncheckedUpdateManyWithoutGameNestedInput
    gameOwners?: GameOwnerUncheckedUpdateManyWithoutGameNestedInput
    assets?: AssetUncheckedUpdateManyWithoutGameNestedInput
    userInteractions?: UserAssetInteractionUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GameCreateManyInput = {
    id?: number
    name: string
    assetCategories?: GameCreateassetCategoriesInput | string[]
    eligiblePhase1Voters?: number
    eligiblePhase2Voters?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    assetCategories?: GameUpdateassetCategoriesInput | string[]
    eligiblePhase1Voters?: IntFieldUpdateOperationsInput | number
    eligiblePhase2Voters?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    assetCategories?: GameUpdateassetCategoriesInput | string[]
    eligiblePhase1Voters?: IntFieldUpdateOperationsInput | number
    eligiblePhase2Voters?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameTeamCreateInput = {
    startedAt?: Date | string
    endedAt?: Date | string | null
    game: GameCreateNestedOneWithoutGameTeamsInput
    team: TeamCreateNestedOneWithoutGameTeamsInput
  }

  export type GameTeamUncheckedCreateInput = {
    id?: number
    game_id: number
    team_id: number
    startedAt?: Date | string
    endedAt?: Date | string | null
  }

  export type GameTeamUpdateInput = {
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    game?: GameUpdateOneRequiredWithoutGameTeamsNestedInput
    team?: TeamUpdateOneRequiredWithoutGameTeamsNestedInput
  }

  export type GameTeamUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    game_id?: IntFieldUpdateOperationsInput | number
    team_id?: IntFieldUpdateOperationsInput | number
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type GameTeamCreateManyInput = {
    id?: number
    game_id: number
    team_id: number
    startedAt?: Date | string
    endedAt?: Date | string | null
  }

  export type GameTeamUpdateManyMutationInput = {
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type GameTeamUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    game_id?: IntFieldUpdateOperationsInput | number
    team_id?: IntFieldUpdateOperationsInput | number
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type InviteCodeCreateInput = {
    code: string
    role: $Enums.UserRole
    description?: string | null
    ownedGameIds?: InviteCodeCreateownedGameIdsInput | number[]
    createdAt?: Date | string
    updatedAt?: Date | string
    team: TeamCreateNestedOneWithoutInviteCodesInput
    users?: UserCreateNestedManyWithoutInviteCodeInput
  }

  export type InviteCodeUncheckedCreateInput = {
    id?: number
    code: string
    team_id: number
    role: $Enums.UserRole
    description?: string | null
    ownedGameIds?: InviteCodeCreateownedGameIdsInput | number[]
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutInviteCodeInput
  }

  export type InviteCodeUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownedGameIds?: InviteCodeUpdateownedGameIdsInput | number[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneRequiredWithoutInviteCodesNestedInput
    users?: UserUpdateManyWithoutInviteCodeNestedInput
  }

  export type InviteCodeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    team_id?: IntFieldUpdateOperationsInput | number
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownedGameIds?: InviteCodeUpdateownedGameIdsInput | number[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutInviteCodeNestedInput
  }

  export type InviteCodeCreateManyInput = {
    id?: number
    code: string
    team_id: number
    role: $Enums.UserRole
    description?: string | null
    ownedGameIds?: InviteCodeCreateownedGameIdsInput | number[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InviteCodeUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownedGameIds?: InviteCodeUpdateownedGameIdsInput | number[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteCodeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    team_id?: IntFieldUpdateOperationsInput | number
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownedGameIds?: InviteCodeUpdateownedGameIdsInput | number[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    firstName: string
    lastName: string
    email: string
    passwordHash: string
    avatar?: number
    customAvatar?: string | null
    role: $Enums.UserRole
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    team: TeamCreateNestedOneWithoutUsersInput
    inviteCode?: InviteCodeCreateNestedOneWithoutUsersInput
    gameOwners?: GameOwnerCreateNestedManyWithoutUserInput
    uploadedAssets?: AssetCreateNestedManyWithoutUploaderInput
    assetRevisions?: AssetRevisionCreateNestedManyWithoutUploaderInput
    assetVotes?: AssetVoteCreateNestedManyWithoutUserInput
    assetComments?: AssetCommentCreateNestedManyWithoutUserInput
    revisionComments?: RevisionCommentCreateNestedManyWithoutUserInput
    assetInteractions?: UserAssetInteractionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    passwordHash: string
    avatar?: number
    customAvatar?: string | null
    role: $Enums.UserRole
    isActive?: boolean
    lastLogin?: Date | string | null
    team_id: number
    invite_code_id?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    gameOwners?: GameOwnerUncheckedCreateNestedManyWithoutUserInput
    uploadedAssets?: AssetUncheckedCreateNestedManyWithoutUploaderInput
    assetRevisions?: AssetRevisionUncheckedCreateNestedManyWithoutUploaderInput
    assetVotes?: AssetVoteUncheckedCreateNestedManyWithoutUserInput
    assetComments?: AssetCommentUncheckedCreateNestedManyWithoutUserInput
    revisionComments?: RevisionCommentUncheckedCreateNestedManyWithoutUserInput
    assetInteractions?: UserAssetInteractionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    avatar?: IntFieldUpdateOperationsInput | number
    customAvatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneRequiredWithoutUsersNestedInput
    inviteCode?: InviteCodeUpdateOneWithoutUsersNestedInput
    gameOwners?: GameOwnerUpdateManyWithoutUserNestedInput
    uploadedAssets?: AssetUpdateManyWithoutUploaderNestedInput
    assetRevisions?: AssetRevisionUpdateManyWithoutUploaderNestedInput
    assetVotes?: AssetVoteUpdateManyWithoutUserNestedInput
    assetComments?: AssetCommentUpdateManyWithoutUserNestedInput
    revisionComments?: RevisionCommentUpdateManyWithoutUserNestedInput
    assetInteractions?: UserAssetInteractionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    avatar?: IntFieldUpdateOperationsInput | number
    customAvatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    team_id?: IntFieldUpdateOperationsInput | number
    invite_code_id?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameOwners?: GameOwnerUncheckedUpdateManyWithoutUserNestedInput
    uploadedAssets?: AssetUncheckedUpdateManyWithoutUploaderNestedInput
    assetRevisions?: AssetRevisionUncheckedUpdateManyWithoutUploaderNestedInput
    assetVotes?: AssetVoteUncheckedUpdateManyWithoutUserNestedInput
    assetComments?: AssetCommentUncheckedUpdateManyWithoutUserNestedInput
    revisionComments?: RevisionCommentUncheckedUpdateManyWithoutUserNestedInput
    assetInteractions?: UserAssetInteractionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    passwordHash: string
    avatar?: number
    customAvatar?: string | null
    role: $Enums.UserRole
    isActive?: boolean
    lastLogin?: Date | string | null
    team_id: number
    invite_code_id?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    avatar?: IntFieldUpdateOperationsInput | number
    customAvatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    avatar?: IntFieldUpdateOperationsInput | number
    customAvatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    team_id?: IntFieldUpdateOperationsInput | number
    invite_code_id?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameOwnerCreateInput = {
    createdAt?: Date | string
    game: GameCreateNestedOneWithoutGameOwnersInput
    user: UserCreateNestedOneWithoutGameOwnersInput
  }

  export type GameOwnerUncheckedCreateInput = {
    id?: number
    game_id: number
    user_id: number
    createdAt?: Date | string
  }

  export type GameOwnerUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    game?: GameUpdateOneRequiredWithoutGameOwnersNestedInput
    user?: UserUpdateOneRequiredWithoutGameOwnersNestedInput
  }

  export type GameOwnerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    game_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameOwnerCreateManyInput = {
    id?: number
    game_id: number
    user_id: number
    createdAt?: Date | string
  }

  export type GameOwnerUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameOwnerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    game_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetCreateInput = {
    name: string
    imageUrl: string
    category: string
    phase1Approvals?: number
    phase1Rejections?: number
    phase1TotalVotes?: number
    phase1CompletedAt?: Date | string | null
    phase2Approvals?: number
    phase2Rejections?: number
    phase2TotalVotes?: number
    phase2CompletedAt?: Date | string | null
    status?: $Enums.AssetStatus
    notificationSent?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    game: GameCreateNestedOneWithoutAssetsInput
    uploader: UserCreateNestedOneWithoutUploadedAssetsInput
    revisions?: AssetRevisionCreateNestedManyWithoutAssetInput
    votes?: AssetVoteCreateNestedManyWithoutAssetInput
    comments?: AssetCommentCreateNestedManyWithoutAssetInput
    userInteractions?: UserAssetInteractionCreateNestedManyWithoutAssetInput
    finalReviewTeams?: AssetFinalReviewTeamCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateInput = {
    id?: number
    name: string
    imageUrl: string
    category: string
    game_id: number
    uploader_id: number
    phase1Approvals?: number
    phase1Rejections?: number
    phase1TotalVotes?: number
    phase1CompletedAt?: Date | string | null
    phase2Approvals?: number
    phase2Rejections?: number
    phase2TotalVotes?: number
    phase2CompletedAt?: Date | string | null
    status?: $Enums.AssetStatus
    notificationSent?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    revisions?: AssetRevisionUncheckedCreateNestedManyWithoutAssetInput
    votes?: AssetVoteUncheckedCreateNestedManyWithoutAssetInput
    comments?: AssetCommentUncheckedCreateNestedManyWithoutAssetInput
    userInteractions?: UserAssetInteractionUncheckedCreateNestedManyWithoutAssetInput
    finalReviewTeams?: AssetFinalReviewTeamUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    phase1Approvals?: IntFieldUpdateOperationsInput | number
    phase1Rejections?: IntFieldUpdateOperationsInput | number
    phase1TotalVotes?: IntFieldUpdateOperationsInput | number
    phase1CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phase2Approvals?: IntFieldUpdateOperationsInput | number
    phase2Rejections?: IntFieldUpdateOperationsInput | number
    phase2TotalVotes?: IntFieldUpdateOperationsInput | number
    phase2CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    notificationSent?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    game?: GameUpdateOneRequiredWithoutAssetsNestedInput
    uploader?: UserUpdateOneRequiredWithoutUploadedAssetsNestedInput
    revisions?: AssetRevisionUpdateManyWithoutAssetNestedInput
    votes?: AssetVoteUpdateManyWithoutAssetNestedInput
    comments?: AssetCommentUpdateManyWithoutAssetNestedInput
    userInteractions?: UserAssetInteractionUpdateManyWithoutAssetNestedInput
    finalReviewTeams?: AssetFinalReviewTeamUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    game_id?: IntFieldUpdateOperationsInput | number
    uploader_id?: IntFieldUpdateOperationsInput | number
    phase1Approvals?: IntFieldUpdateOperationsInput | number
    phase1Rejections?: IntFieldUpdateOperationsInput | number
    phase1TotalVotes?: IntFieldUpdateOperationsInput | number
    phase1CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phase2Approvals?: IntFieldUpdateOperationsInput | number
    phase2Rejections?: IntFieldUpdateOperationsInput | number
    phase2TotalVotes?: IntFieldUpdateOperationsInput | number
    phase2CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    notificationSent?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revisions?: AssetRevisionUncheckedUpdateManyWithoutAssetNestedInput
    votes?: AssetVoteUncheckedUpdateManyWithoutAssetNestedInput
    comments?: AssetCommentUncheckedUpdateManyWithoutAssetNestedInput
    userInteractions?: UserAssetInteractionUncheckedUpdateManyWithoutAssetNestedInput
    finalReviewTeams?: AssetFinalReviewTeamUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type AssetCreateManyInput = {
    id?: number
    name: string
    imageUrl: string
    category: string
    game_id: number
    uploader_id: number
    phase1Approvals?: number
    phase1Rejections?: number
    phase1TotalVotes?: number
    phase1CompletedAt?: Date | string | null
    phase2Approvals?: number
    phase2Rejections?: number
    phase2TotalVotes?: number
    phase2CompletedAt?: Date | string | null
    status?: $Enums.AssetStatus
    notificationSent?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssetUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    phase1Approvals?: IntFieldUpdateOperationsInput | number
    phase1Rejections?: IntFieldUpdateOperationsInput | number
    phase1TotalVotes?: IntFieldUpdateOperationsInput | number
    phase1CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phase2Approvals?: IntFieldUpdateOperationsInput | number
    phase2Rejections?: IntFieldUpdateOperationsInput | number
    phase2TotalVotes?: IntFieldUpdateOperationsInput | number
    phase2CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    notificationSent?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    game_id?: IntFieldUpdateOperationsInput | number
    uploader_id?: IntFieldUpdateOperationsInput | number
    phase1Approvals?: IntFieldUpdateOperationsInput | number
    phase1Rejections?: IntFieldUpdateOperationsInput | number
    phase1TotalVotes?: IntFieldUpdateOperationsInput | number
    phase1CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phase2Approvals?: IntFieldUpdateOperationsInput | number
    phase2Rejections?: IntFieldUpdateOperationsInput | number
    phase2TotalVotes?: IntFieldUpdateOperationsInput | number
    phase2CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    notificationSent?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetFinalReviewTeamCreateInput = {
    createdAt?: Date | string
    asset: AssetCreateNestedOneWithoutFinalReviewTeamsInput
    team: TeamCreateNestedOneWithoutFinalReviewAssetsInput
  }

  export type AssetFinalReviewTeamUncheckedCreateInput = {
    id?: number
    asset_id: number
    team_id: number
    createdAt?: Date | string
  }

  export type AssetFinalReviewTeamUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset?: AssetUpdateOneRequiredWithoutFinalReviewTeamsNestedInput
    team?: TeamUpdateOneRequiredWithoutFinalReviewAssetsNestedInput
  }

  export type AssetFinalReviewTeamUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    asset_id?: IntFieldUpdateOperationsInput | number
    team_id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetFinalReviewTeamCreateManyInput = {
    id?: number
    asset_id: number
    team_id: number
    createdAt?: Date | string
  }

  export type AssetFinalReviewTeamUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetFinalReviewTeamUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    asset_id?: IntFieldUpdateOperationsInput | number
    team_id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetRevisionCreateInput = {
    imageUrl: string
    description?: string | null
    phase1Approvals?: number
    phase1Rejections?: number
    phase1TotalVotes?: number
    phase1CompletedAt?: Date | string | null
    phase2Approvals?: number
    phase2Rejections?: number
    phase2TotalVotes?: number
    phase2CompletedAt?: Date | string | null
    status?: $Enums.AssetStatus
    notificationSent?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    asset: AssetCreateNestedOneWithoutRevisionsInput
    uploader: UserCreateNestedOneWithoutAssetRevisionsInput
    votes?: AssetVoteCreateNestedManyWithoutRevisionInput
    comments?: RevisionCommentCreateNestedManyWithoutRevisionInput
    userInteractions?: UserAssetInteractionCreateNestedManyWithoutRevisionInput
  }

  export type AssetRevisionUncheckedCreateInput = {
    id?: number
    asset_id: number
    imageUrl: string
    uploader_id: number
    description?: string | null
    phase1Approvals?: number
    phase1Rejections?: number
    phase1TotalVotes?: number
    phase1CompletedAt?: Date | string | null
    phase2Approvals?: number
    phase2Rejections?: number
    phase2TotalVotes?: number
    phase2CompletedAt?: Date | string | null
    status?: $Enums.AssetStatus
    notificationSent?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    votes?: AssetVoteUncheckedCreateNestedManyWithoutRevisionInput
    comments?: RevisionCommentUncheckedCreateNestedManyWithoutRevisionInput
    userInteractions?: UserAssetInteractionUncheckedCreateNestedManyWithoutRevisionInput
  }

  export type AssetRevisionUpdateInput = {
    imageUrl?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    phase1Approvals?: IntFieldUpdateOperationsInput | number
    phase1Rejections?: IntFieldUpdateOperationsInput | number
    phase1TotalVotes?: IntFieldUpdateOperationsInput | number
    phase1CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phase2Approvals?: IntFieldUpdateOperationsInput | number
    phase2Rejections?: IntFieldUpdateOperationsInput | number
    phase2TotalVotes?: IntFieldUpdateOperationsInput | number
    phase2CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    notificationSent?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset?: AssetUpdateOneRequiredWithoutRevisionsNestedInput
    uploader?: UserUpdateOneRequiredWithoutAssetRevisionsNestedInput
    votes?: AssetVoteUpdateManyWithoutRevisionNestedInput
    comments?: RevisionCommentUpdateManyWithoutRevisionNestedInput
    userInteractions?: UserAssetInteractionUpdateManyWithoutRevisionNestedInput
  }

  export type AssetRevisionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    asset_id?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
    uploader_id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    phase1Approvals?: IntFieldUpdateOperationsInput | number
    phase1Rejections?: IntFieldUpdateOperationsInput | number
    phase1TotalVotes?: IntFieldUpdateOperationsInput | number
    phase1CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phase2Approvals?: IntFieldUpdateOperationsInput | number
    phase2Rejections?: IntFieldUpdateOperationsInput | number
    phase2TotalVotes?: IntFieldUpdateOperationsInput | number
    phase2CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    notificationSent?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    votes?: AssetVoteUncheckedUpdateManyWithoutRevisionNestedInput
    comments?: RevisionCommentUncheckedUpdateManyWithoutRevisionNestedInput
    userInteractions?: UserAssetInteractionUncheckedUpdateManyWithoutRevisionNestedInput
  }

  export type AssetRevisionCreateManyInput = {
    id?: number
    asset_id: number
    imageUrl: string
    uploader_id: number
    description?: string | null
    phase1Approvals?: number
    phase1Rejections?: number
    phase1TotalVotes?: number
    phase1CompletedAt?: Date | string | null
    phase2Approvals?: number
    phase2Rejections?: number
    phase2TotalVotes?: number
    phase2CompletedAt?: Date | string | null
    status?: $Enums.AssetStatus
    notificationSent?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssetRevisionUpdateManyMutationInput = {
    imageUrl?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    phase1Approvals?: IntFieldUpdateOperationsInput | number
    phase1Rejections?: IntFieldUpdateOperationsInput | number
    phase1TotalVotes?: IntFieldUpdateOperationsInput | number
    phase1CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phase2Approvals?: IntFieldUpdateOperationsInput | number
    phase2Rejections?: IntFieldUpdateOperationsInput | number
    phase2TotalVotes?: IntFieldUpdateOperationsInput | number
    phase2CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    notificationSent?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetRevisionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    asset_id?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
    uploader_id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    phase1Approvals?: IntFieldUpdateOperationsInput | number
    phase1Rejections?: IntFieldUpdateOperationsInput | number
    phase1TotalVotes?: IntFieldUpdateOperationsInput | number
    phase1CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phase2Approvals?: IntFieldUpdateOperationsInput | number
    phase2Rejections?: IntFieldUpdateOperationsInput | number
    phase2TotalVotes?: IntFieldUpdateOperationsInput | number
    phase2CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    notificationSent?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetVoteCreateInput = {
    vote: $Enums.VoteType
    phase: $Enums.VotePhase
    weight?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAssetVotesInput
    asset?: AssetCreateNestedOneWithoutVotesInput
    revision?: AssetRevisionCreateNestedOneWithoutVotesInput
  }

  export type AssetVoteUncheckedCreateInput = {
    id?: number
    user_id: number
    vote: $Enums.VoteType
    phase: $Enums.VotePhase
    weight?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    asset_id?: number | null
    asset_revision_id?: number | null
  }

  export type AssetVoteUpdateInput = {
    vote?: EnumVoteTypeFieldUpdateOperationsInput | $Enums.VoteType
    phase?: EnumVotePhaseFieldUpdateOperationsInput | $Enums.VotePhase
    weight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAssetVotesNestedInput
    asset?: AssetUpdateOneWithoutVotesNestedInput
    revision?: AssetRevisionUpdateOneWithoutVotesNestedInput
  }

  export type AssetVoteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    vote?: EnumVoteTypeFieldUpdateOperationsInput | $Enums.VoteType
    phase?: EnumVotePhaseFieldUpdateOperationsInput | $Enums.VotePhase
    weight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset_id?: NullableIntFieldUpdateOperationsInput | number | null
    asset_revision_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AssetVoteCreateManyInput = {
    id?: number
    user_id: number
    vote: $Enums.VoteType
    phase: $Enums.VotePhase
    weight?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    asset_id?: number | null
    asset_revision_id?: number | null
  }

  export type AssetVoteUpdateManyMutationInput = {
    vote?: EnumVoteTypeFieldUpdateOperationsInput | $Enums.VoteType
    phase?: EnumVotePhaseFieldUpdateOperationsInput | $Enums.VotePhase
    weight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetVoteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    vote?: EnumVoteTypeFieldUpdateOperationsInput | $Enums.VoteType
    phase?: EnumVotePhaseFieldUpdateOperationsInput | $Enums.VotePhase
    weight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset_id?: NullableIntFieldUpdateOperationsInput | number | null
    asset_revision_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserAssetInteractionCreateInput = {
    hasVoted?: boolean
    hasCommented?: boolean
    dismissedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAssetInteractionsInput
    asset?: AssetCreateNestedOneWithoutUserInteractionsInput
    revision?: AssetRevisionCreateNestedOneWithoutUserInteractionsInput
    Game?: GameCreateNestedOneWithoutUserInteractionsInput
  }

  export type UserAssetInteractionUncheckedCreateInput = {
    id?: number
    user_id: number
    asset_id?: number | null
    asset_revision_id?: number | null
    hasVoted?: boolean
    hasCommented?: boolean
    dismissedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    gameId?: number | null
  }

  export type UserAssetInteractionUpdateInput = {
    hasVoted?: BoolFieldUpdateOperationsInput | boolean
    hasCommented?: BoolFieldUpdateOperationsInput | boolean
    dismissedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAssetInteractionsNestedInput
    asset?: AssetUpdateOneWithoutUserInteractionsNestedInput
    revision?: AssetRevisionUpdateOneWithoutUserInteractionsNestedInput
    Game?: GameUpdateOneWithoutUserInteractionsNestedInput
  }

  export type UserAssetInteractionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    asset_id?: NullableIntFieldUpdateOperationsInput | number | null
    asset_revision_id?: NullableIntFieldUpdateOperationsInput | number | null
    hasVoted?: BoolFieldUpdateOperationsInput | boolean
    hasCommented?: BoolFieldUpdateOperationsInput | boolean
    dismissedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserAssetInteractionCreateManyInput = {
    id?: number
    user_id: number
    asset_id?: number | null
    asset_revision_id?: number | null
    hasVoted?: boolean
    hasCommented?: boolean
    dismissedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    gameId?: number | null
  }

  export type UserAssetInteractionUpdateManyMutationInput = {
    hasVoted?: BoolFieldUpdateOperationsInput | boolean
    hasCommented?: BoolFieldUpdateOperationsInput | boolean
    dismissedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAssetInteractionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    asset_id?: NullableIntFieldUpdateOperationsInput | number | null
    asset_revision_id?: NullableIntFieldUpdateOperationsInput | number | null
    hasVoted?: BoolFieldUpdateOperationsInput | boolean
    hasCommented?: BoolFieldUpdateOperationsInput | boolean
    dismissedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AssetCommentCreateInput = {
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    asset: AssetCreateNestedOneWithoutCommentsInput
    user: UserCreateNestedOneWithoutAssetCommentsInput
  }

  export type AssetCommentUncheckedCreateInput = {
    id?: number
    asset_id: number
    user_id: number
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssetCommentUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset?: AssetUpdateOneRequiredWithoutCommentsNestedInput
    user?: UserUpdateOneRequiredWithoutAssetCommentsNestedInput
  }

  export type AssetCommentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    asset_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetCommentCreateManyInput = {
    id?: number
    asset_id: number
    user_id: number
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssetCommentUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetCommentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    asset_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RevisionCommentCreateInput = {
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    revision: AssetRevisionCreateNestedOneWithoutCommentsInput
    user: UserCreateNestedOneWithoutRevisionCommentsInput
  }

  export type RevisionCommentUncheckedCreateInput = {
    id?: number
    asset_revision_id: number
    user_id: number
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RevisionCommentUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revision?: AssetRevisionUpdateOneRequiredWithoutCommentsNestedInput
    user?: UserUpdateOneRequiredWithoutRevisionCommentsNestedInput
  }

  export type RevisionCommentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    asset_revision_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RevisionCommentCreateManyInput = {
    id?: number
    asset_revision_id: number
    user_id: number
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RevisionCommentUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RevisionCommentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    asset_revision_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type GameTeamListRelationFilter = {
    every?: GameTeamWhereInput
    some?: GameTeamWhereInput
    none?: GameTeamWhereInput
  }

  export type InviteCodeListRelationFilter = {
    every?: InviteCodeWhereInput
    some?: InviteCodeWhereInput
    none?: InviteCodeWhereInput
  }

  export type AssetFinalReviewTeamListRelationFilter = {
    every?: AssetFinalReviewTeamWhereInput
    some?: AssetFinalReviewTeamWhereInput
    none?: AssetFinalReviewTeamWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GameTeamOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InviteCodeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AssetFinalReviewTeamOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TeamAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TeamMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TeamMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TeamSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type GameOwnerListRelationFilter = {
    every?: GameOwnerWhereInput
    some?: GameOwnerWhereInput
    none?: GameOwnerWhereInput
  }

  export type AssetListRelationFilter = {
    every?: AssetWhereInput
    some?: AssetWhereInput
    none?: AssetWhereInput
  }

  export type UserAssetInteractionListRelationFilter = {
    every?: UserAssetInteractionWhereInput
    some?: UserAssetInteractionWhereInput
    none?: UserAssetInteractionWhereInput
  }

  export type GameOwnerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AssetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserAssetInteractionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GameCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    assetCategories?: SortOrder
    eligiblePhase1Voters?: SortOrder
    eligiblePhase2Voters?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GameAvgOrderByAggregateInput = {
    id?: SortOrder
    eligiblePhase1Voters?: SortOrder
    eligiblePhase2Voters?: SortOrder
  }

  export type GameMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    eligiblePhase1Voters?: SortOrder
    eligiblePhase2Voters?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GameMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    eligiblePhase1Voters?: SortOrder
    eligiblePhase2Voters?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GameSumOrderByAggregateInput = {
    id?: SortOrder
    eligiblePhase1Voters?: SortOrder
    eligiblePhase2Voters?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type GameScalarRelationFilter = {
    is?: GameWhereInput
    isNot?: GameWhereInput
  }

  export type TeamScalarRelationFilter = {
    is?: TeamWhereInput
    isNot?: TeamWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type GameTeamGame_idTeam_idCompoundUniqueInput = {
    game_id: number
    team_id: number
  }

  export type GameTeamCountOrderByAggregateInput = {
    id?: SortOrder
    game_id?: SortOrder
    team_id?: SortOrder
    startedAt?: SortOrder
    endedAt?: SortOrder
  }

  export type GameTeamAvgOrderByAggregateInput = {
    id?: SortOrder
    game_id?: SortOrder
    team_id?: SortOrder
  }

  export type GameTeamMaxOrderByAggregateInput = {
    id?: SortOrder
    game_id?: SortOrder
    team_id?: SortOrder
    startedAt?: SortOrder
    endedAt?: SortOrder
  }

  export type GameTeamMinOrderByAggregateInput = {
    id?: SortOrder
    game_id?: SortOrder
    team_id?: SortOrder
    startedAt?: SortOrder
    endedAt?: SortOrder
  }

  export type GameTeamSumOrderByAggregateInput = {
    id?: SortOrder
    game_id?: SortOrder
    team_id?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableListFilter<$PrismaModel = never> = {
    equals?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    has?: number | IntFieldRefInput<$PrismaModel> | null
    hasEvery?: number[] | ListIntFieldRefInput<$PrismaModel>
    hasSome?: number[] | ListIntFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type InviteCodeCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    team_id?: SortOrder
    role?: SortOrder
    description?: SortOrder
    ownedGameIds?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InviteCodeAvgOrderByAggregateInput = {
    id?: SortOrder
    team_id?: SortOrder
    ownedGameIds?: SortOrder
  }

  export type InviteCodeMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    team_id?: SortOrder
    role?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InviteCodeMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    team_id?: SortOrder
    role?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InviteCodeSumOrderByAggregateInput = {
    id?: SortOrder
    team_id?: SortOrder
    ownedGameIds?: SortOrder
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type InviteCodeNullableScalarRelationFilter = {
    is?: InviteCodeWhereInput | null
    isNot?: InviteCodeWhereInput | null
  }

  export type AssetRevisionListRelationFilter = {
    every?: AssetRevisionWhereInput
    some?: AssetRevisionWhereInput
    none?: AssetRevisionWhereInput
  }

  export type AssetVoteListRelationFilter = {
    every?: AssetVoteWhereInput
    some?: AssetVoteWhereInput
    none?: AssetVoteWhereInput
  }

  export type AssetCommentListRelationFilter = {
    every?: AssetCommentWhereInput
    some?: AssetCommentWhereInput
    none?: AssetCommentWhereInput
  }

  export type RevisionCommentListRelationFilter = {
    every?: RevisionCommentWhereInput
    some?: RevisionCommentWhereInput
    none?: RevisionCommentWhereInput
  }

  export type AssetRevisionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AssetVoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AssetCommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RevisionCommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    avatar?: SortOrder
    customAvatar?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    lastLogin?: SortOrder
    team_id?: SortOrder
    invite_code_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    avatar?: SortOrder
    team_id?: SortOrder
    invite_code_id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    avatar?: SortOrder
    customAvatar?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    lastLogin?: SortOrder
    team_id?: SortOrder
    invite_code_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    avatar?: SortOrder
    customAvatar?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    lastLogin?: SortOrder
    team_id?: SortOrder
    invite_code_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    avatar?: SortOrder
    team_id?: SortOrder
    invite_code_id?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type GameOwnerGame_idUser_idCompoundUniqueInput = {
    game_id: number
    user_id: number
  }

  export type GameOwnerCountOrderByAggregateInput = {
    id?: SortOrder
    game_id?: SortOrder
    user_id?: SortOrder
    createdAt?: SortOrder
  }

  export type GameOwnerAvgOrderByAggregateInput = {
    id?: SortOrder
    game_id?: SortOrder
    user_id?: SortOrder
  }

  export type GameOwnerMaxOrderByAggregateInput = {
    id?: SortOrder
    game_id?: SortOrder
    user_id?: SortOrder
    createdAt?: SortOrder
  }

  export type GameOwnerMinOrderByAggregateInput = {
    id?: SortOrder
    game_id?: SortOrder
    user_id?: SortOrder
    createdAt?: SortOrder
  }

  export type GameOwnerSumOrderByAggregateInput = {
    id?: SortOrder
    game_id?: SortOrder
    user_id?: SortOrder
  }

  export type EnumAssetStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AssetStatus | EnumAssetStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AssetStatus[] | ListEnumAssetStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssetStatus[] | ListEnumAssetStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAssetStatusFilter<$PrismaModel> | $Enums.AssetStatus
  }

  export type AssetCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    imageUrl?: SortOrder
    category?: SortOrder
    game_id?: SortOrder
    uploader_id?: SortOrder
    phase1Approvals?: SortOrder
    phase1Rejections?: SortOrder
    phase1TotalVotes?: SortOrder
    phase1CompletedAt?: SortOrder
    phase2Approvals?: SortOrder
    phase2Rejections?: SortOrder
    phase2TotalVotes?: SortOrder
    phase2CompletedAt?: SortOrder
    status?: SortOrder
    notificationSent?: SortOrder
    archivedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssetAvgOrderByAggregateInput = {
    id?: SortOrder
    game_id?: SortOrder
    uploader_id?: SortOrder
    phase1Approvals?: SortOrder
    phase1Rejections?: SortOrder
    phase1TotalVotes?: SortOrder
    phase2Approvals?: SortOrder
    phase2Rejections?: SortOrder
    phase2TotalVotes?: SortOrder
  }

  export type AssetMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    imageUrl?: SortOrder
    category?: SortOrder
    game_id?: SortOrder
    uploader_id?: SortOrder
    phase1Approvals?: SortOrder
    phase1Rejections?: SortOrder
    phase1TotalVotes?: SortOrder
    phase1CompletedAt?: SortOrder
    phase2Approvals?: SortOrder
    phase2Rejections?: SortOrder
    phase2TotalVotes?: SortOrder
    phase2CompletedAt?: SortOrder
    status?: SortOrder
    notificationSent?: SortOrder
    archivedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssetMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    imageUrl?: SortOrder
    category?: SortOrder
    game_id?: SortOrder
    uploader_id?: SortOrder
    phase1Approvals?: SortOrder
    phase1Rejections?: SortOrder
    phase1TotalVotes?: SortOrder
    phase1CompletedAt?: SortOrder
    phase2Approvals?: SortOrder
    phase2Rejections?: SortOrder
    phase2TotalVotes?: SortOrder
    phase2CompletedAt?: SortOrder
    status?: SortOrder
    notificationSent?: SortOrder
    archivedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssetSumOrderByAggregateInput = {
    id?: SortOrder
    game_id?: SortOrder
    uploader_id?: SortOrder
    phase1Approvals?: SortOrder
    phase1Rejections?: SortOrder
    phase1TotalVotes?: SortOrder
    phase2Approvals?: SortOrder
    phase2Rejections?: SortOrder
    phase2TotalVotes?: SortOrder
  }

  export type EnumAssetStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AssetStatus | EnumAssetStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AssetStatus[] | ListEnumAssetStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssetStatus[] | ListEnumAssetStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAssetStatusWithAggregatesFilter<$PrismaModel> | $Enums.AssetStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAssetStatusFilter<$PrismaModel>
    _max?: NestedEnumAssetStatusFilter<$PrismaModel>
  }

  export type AssetScalarRelationFilter = {
    is?: AssetWhereInput
    isNot?: AssetWhereInput
  }

  export type AssetFinalReviewTeamAsset_idTeam_idCompoundUniqueInput = {
    asset_id: number
    team_id: number
  }

  export type AssetFinalReviewTeamCountOrderByAggregateInput = {
    id?: SortOrder
    asset_id?: SortOrder
    team_id?: SortOrder
    createdAt?: SortOrder
  }

  export type AssetFinalReviewTeamAvgOrderByAggregateInput = {
    id?: SortOrder
    asset_id?: SortOrder
    team_id?: SortOrder
  }

  export type AssetFinalReviewTeamMaxOrderByAggregateInput = {
    id?: SortOrder
    asset_id?: SortOrder
    team_id?: SortOrder
    createdAt?: SortOrder
  }

  export type AssetFinalReviewTeamMinOrderByAggregateInput = {
    id?: SortOrder
    asset_id?: SortOrder
    team_id?: SortOrder
    createdAt?: SortOrder
  }

  export type AssetFinalReviewTeamSumOrderByAggregateInput = {
    id?: SortOrder
    asset_id?: SortOrder
    team_id?: SortOrder
  }

  export type AssetRevisionCountOrderByAggregateInput = {
    id?: SortOrder
    asset_id?: SortOrder
    imageUrl?: SortOrder
    uploader_id?: SortOrder
    description?: SortOrder
    phase1Approvals?: SortOrder
    phase1Rejections?: SortOrder
    phase1TotalVotes?: SortOrder
    phase1CompletedAt?: SortOrder
    phase2Approvals?: SortOrder
    phase2Rejections?: SortOrder
    phase2TotalVotes?: SortOrder
    phase2CompletedAt?: SortOrder
    status?: SortOrder
    notificationSent?: SortOrder
    archivedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssetRevisionAvgOrderByAggregateInput = {
    id?: SortOrder
    asset_id?: SortOrder
    uploader_id?: SortOrder
    phase1Approvals?: SortOrder
    phase1Rejections?: SortOrder
    phase1TotalVotes?: SortOrder
    phase2Approvals?: SortOrder
    phase2Rejections?: SortOrder
    phase2TotalVotes?: SortOrder
  }

  export type AssetRevisionMaxOrderByAggregateInput = {
    id?: SortOrder
    asset_id?: SortOrder
    imageUrl?: SortOrder
    uploader_id?: SortOrder
    description?: SortOrder
    phase1Approvals?: SortOrder
    phase1Rejections?: SortOrder
    phase1TotalVotes?: SortOrder
    phase1CompletedAt?: SortOrder
    phase2Approvals?: SortOrder
    phase2Rejections?: SortOrder
    phase2TotalVotes?: SortOrder
    phase2CompletedAt?: SortOrder
    status?: SortOrder
    notificationSent?: SortOrder
    archivedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssetRevisionMinOrderByAggregateInput = {
    id?: SortOrder
    asset_id?: SortOrder
    imageUrl?: SortOrder
    uploader_id?: SortOrder
    description?: SortOrder
    phase1Approvals?: SortOrder
    phase1Rejections?: SortOrder
    phase1TotalVotes?: SortOrder
    phase1CompletedAt?: SortOrder
    phase2Approvals?: SortOrder
    phase2Rejections?: SortOrder
    phase2TotalVotes?: SortOrder
    phase2CompletedAt?: SortOrder
    status?: SortOrder
    notificationSent?: SortOrder
    archivedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssetRevisionSumOrderByAggregateInput = {
    id?: SortOrder
    asset_id?: SortOrder
    uploader_id?: SortOrder
    phase1Approvals?: SortOrder
    phase1Rejections?: SortOrder
    phase1TotalVotes?: SortOrder
    phase2Approvals?: SortOrder
    phase2Rejections?: SortOrder
    phase2TotalVotes?: SortOrder
  }

  export type EnumVoteTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.VoteType | EnumVoteTypeFieldRefInput<$PrismaModel>
    in?: $Enums.VoteType[] | ListEnumVoteTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.VoteType[] | ListEnumVoteTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumVoteTypeFilter<$PrismaModel> | $Enums.VoteType
  }

  export type EnumVotePhaseFilter<$PrismaModel = never> = {
    equals?: $Enums.VotePhase | EnumVotePhaseFieldRefInput<$PrismaModel>
    in?: $Enums.VotePhase[] | ListEnumVotePhaseFieldRefInput<$PrismaModel>
    notIn?: $Enums.VotePhase[] | ListEnumVotePhaseFieldRefInput<$PrismaModel>
    not?: NestedEnumVotePhaseFilter<$PrismaModel> | $Enums.VotePhase
  }

  export type AssetNullableScalarRelationFilter = {
    is?: AssetWhereInput | null
    isNot?: AssetWhereInput | null
  }

  export type AssetRevisionNullableScalarRelationFilter = {
    is?: AssetRevisionWhereInput | null
    isNot?: AssetRevisionWhereInput | null
  }

  export type AssetVoteUser_idAsset_idPhaseCompoundUniqueInput = {
    user_id: number
    asset_id: number
    phase: $Enums.VotePhase
  }

  export type AssetVoteUser_idAsset_revision_idPhaseCompoundUniqueInput = {
    user_id: number
    asset_revision_id: number
    phase: $Enums.VotePhase
  }

  export type AssetVoteCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    vote?: SortOrder
    phase?: SortOrder
    weight?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    asset_id?: SortOrder
    asset_revision_id?: SortOrder
  }

  export type AssetVoteAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    weight?: SortOrder
    asset_id?: SortOrder
    asset_revision_id?: SortOrder
  }

  export type AssetVoteMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    vote?: SortOrder
    phase?: SortOrder
    weight?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    asset_id?: SortOrder
    asset_revision_id?: SortOrder
  }

  export type AssetVoteMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    vote?: SortOrder
    phase?: SortOrder
    weight?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    asset_id?: SortOrder
    asset_revision_id?: SortOrder
  }

  export type AssetVoteSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    weight?: SortOrder
    asset_id?: SortOrder
    asset_revision_id?: SortOrder
  }

  export type EnumVoteTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.VoteType | EnumVoteTypeFieldRefInput<$PrismaModel>
    in?: $Enums.VoteType[] | ListEnumVoteTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.VoteType[] | ListEnumVoteTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumVoteTypeWithAggregatesFilter<$PrismaModel> | $Enums.VoteType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumVoteTypeFilter<$PrismaModel>
    _max?: NestedEnumVoteTypeFilter<$PrismaModel>
  }

  export type EnumVotePhaseWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.VotePhase | EnumVotePhaseFieldRefInput<$PrismaModel>
    in?: $Enums.VotePhase[] | ListEnumVotePhaseFieldRefInput<$PrismaModel>
    notIn?: $Enums.VotePhase[] | ListEnumVotePhaseFieldRefInput<$PrismaModel>
    not?: NestedEnumVotePhaseWithAggregatesFilter<$PrismaModel> | $Enums.VotePhase
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumVotePhaseFilter<$PrismaModel>
    _max?: NestedEnumVotePhaseFilter<$PrismaModel>
  }

  export type GameNullableScalarRelationFilter = {
    is?: GameWhereInput | null
    isNot?: GameWhereInput | null
  }

  export type UserAssetInteractionUser_idAsset_idCompoundUniqueInput = {
    user_id: number
    asset_id: number
  }

  export type UserAssetInteractionUser_idAsset_revision_idCompoundUniqueInput = {
    user_id: number
    asset_revision_id: number
  }

  export type UserAssetInteractionCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    asset_id?: SortOrder
    asset_revision_id?: SortOrder
    hasVoted?: SortOrder
    hasCommented?: SortOrder
    dismissedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    gameId?: SortOrder
  }

  export type UserAssetInteractionAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    asset_id?: SortOrder
    asset_revision_id?: SortOrder
    gameId?: SortOrder
  }

  export type UserAssetInteractionMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    asset_id?: SortOrder
    asset_revision_id?: SortOrder
    hasVoted?: SortOrder
    hasCommented?: SortOrder
    dismissedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    gameId?: SortOrder
  }

  export type UserAssetInteractionMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    asset_id?: SortOrder
    asset_revision_id?: SortOrder
    hasVoted?: SortOrder
    hasCommented?: SortOrder
    dismissedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    gameId?: SortOrder
  }

  export type UserAssetInteractionSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    asset_id?: SortOrder
    asset_revision_id?: SortOrder
    gameId?: SortOrder
  }

  export type AssetCommentCountOrderByAggregateInput = {
    id?: SortOrder
    asset_id?: SortOrder
    user_id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssetCommentAvgOrderByAggregateInput = {
    id?: SortOrder
    asset_id?: SortOrder
    user_id?: SortOrder
  }

  export type AssetCommentMaxOrderByAggregateInput = {
    id?: SortOrder
    asset_id?: SortOrder
    user_id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssetCommentMinOrderByAggregateInput = {
    id?: SortOrder
    asset_id?: SortOrder
    user_id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssetCommentSumOrderByAggregateInput = {
    id?: SortOrder
    asset_id?: SortOrder
    user_id?: SortOrder
  }

  export type AssetRevisionScalarRelationFilter = {
    is?: AssetRevisionWhereInput
    isNot?: AssetRevisionWhereInput
  }

  export type RevisionCommentCountOrderByAggregateInput = {
    id?: SortOrder
    asset_revision_id?: SortOrder
    user_id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RevisionCommentAvgOrderByAggregateInput = {
    id?: SortOrder
    asset_revision_id?: SortOrder
    user_id?: SortOrder
  }

  export type RevisionCommentMaxOrderByAggregateInput = {
    id?: SortOrder
    asset_revision_id?: SortOrder
    user_id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RevisionCommentMinOrderByAggregateInput = {
    id?: SortOrder
    asset_revision_id?: SortOrder
    user_id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RevisionCommentSumOrderByAggregateInput = {
    id?: SortOrder
    asset_revision_id?: SortOrder
    user_id?: SortOrder
  }

  export type UserCreateNestedManyWithoutTeamInput = {
    create?: XOR<UserCreateWithoutTeamInput, UserUncheckedCreateWithoutTeamInput> | UserCreateWithoutTeamInput[] | UserUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTeamInput | UserCreateOrConnectWithoutTeamInput[]
    createMany?: UserCreateManyTeamInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type GameTeamCreateNestedManyWithoutTeamInput = {
    create?: XOR<GameTeamCreateWithoutTeamInput, GameTeamUncheckedCreateWithoutTeamInput> | GameTeamCreateWithoutTeamInput[] | GameTeamUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: GameTeamCreateOrConnectWithoutTeamInput | GameTeamCreateOrConnectWithoutTeamInput[]
    createMany?: GameTeamCreateManyTeamInputEnvelope
    connect?: GameTeamWhereUniqueInput | GameTeamWhereUniqueInput[]
  }

  export type InviteCodeCreateNestedManyWithoutTeamInput = {
    create?: XOR<InviteCodeCreateWithoutTeamInput, InviteCodeUncheckedCreateWithoutTeamInput> | InviteCodeCreateWithoutTeamInput[] | InviteCodeUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: InviteCodeCreateOrConnectWithoutTeamInput | InviteCodeCreateOrConnectWithoutTeamInput[]
    createMany?: InviteCodeCreateManyTeamInputEnvelope
    connect?: InviteCodeWhereUniqueInput | InviteCodeWhereUniqueInput[]
  }

  export type AssetFinalReviewTeamCreateNestedManyWithoutTeamInput = {
    create?: XOR<AssetFinalReviewTeamCreateWithoutTeamInput, AssetFinalReviewTeamUncheckedCreateWithoutTeamInput> | AssetFinalReviewTeamCreateWithoutTeamInput[] | AssetFinalReviewTeamUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: AssetFinalReviewTeamCreateOrConnectWithoutTeamInput | AssetFinalReviewTeamCreateOrConnectWithoutTeamInput[]
    createMany?: AssetFinalReviewTeamCreateManyTeamInputEnvelope
    connect?: AssetFinalReviewTeamWhereUniqueInput | AssetFinalReviewTeamWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<UserCreateWithoutTeamInput, UserUncheckedCreateWithoutTeamInput> | UserCreateWithoutTeamInput[] | UserUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTeamInput | UserCreateOrConnectWithoutTeamInput[]
    createMany?: UserCreateManyTeamInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type GameTeamUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<GameTeamCreateWithoutTeamInput, GameTeamUncheckedCreateWithoutTeamInput> | GameTeamCreateWithoutTeamInput[] | GameTeamUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: GameTeamCreateOrConnectWithoutTeamInput | GameTeamCreateOrConnectWithoutTeamInput[]
    createMany?: GameTeamCreateManyTeamInputEnvelope
    connect?: GameTeamWhereUniqueInput | GameTeamWhereUniqueInput[]
  }

  export type InviteCodeUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<InviteCodeCreateWithoutTeamInput, InviteCodeUncheckedCreateWithoutTeamInput> | InviteCodeCreateWithoutTeamInput[] | InviteCodeUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: InviteCodeCreateOrConnectWithoutTeamInput | InviteCodeCreateOrConnectWithoutTeamInput[]
    createMany?: InviteCodeCreateManyTeamInputEnvelope
    connect?: InviteCodeWhereUniqueInput | InviteCodeWhereUniqueInput[]
  }

  export type AssetFinalReviewTeamUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<AssetFinalReviewTeamCreateWithoutTeamInput, AssetFinalReviewTeamUncheckedCreateWithoutTeamInput> | AssetFinalReviewTeamCreateWithoutTeamInput[] | AssetFinalReviewTeamUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: AssetFinalReviewTeamCreateOrConnectWithoutTeamInput | AssetFinalReviewTeamCreateOrConnectWithoutTeamInput[]
    createMany?: AssetFinalReviewTeamCreateManyTeamInputEnvelope
    connect?: AssetFinalReviewTeamWhereUniqueInput | AssetFinalReviewTeamWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateManyWithoutTeamNestedInput = {
    create?: XOR<UserCreateWithoutTeamInput, UserUncheckedCreateWithoutTeamInput> | UserCreateWithoutTeamInput[] | UserUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTeamInput | UserCreateOrConnectWithoutTeamInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTeamInput | UserUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: UserCreateManyTeamInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTeamInput | UserUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTeamInput | UserUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type GameTeamUpdateManyWithoutTeamNestedInput = {
    create?: XOR<GameTeamCreateWithoutTeamInput, GameTeamUncheckedCreateWithoutTeamInput> | GameTeamCreateWithoutTeamInput[] | GameTeamUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: GameTeamCreateOrConnectWithoutTeamInput | GameTeamCreateOrConnectWithoutTeamInput[]
    upsert?: GameTeamUpsertWithWhereUniqueWithoutTeamInput | GameTeamUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: GameTeamCreateManyTeamInputEnvelope
    set?: GameTeamWhereUniqueInput | GameTeamWhereUniqueInput[]
    disconnect?: GameTeamWhereUniqueInput | GameTeamWhereUniqueInput[]
    delete?: GameTeamWhereUniqueInput | GameTeamWhereUniqueInput[]
    connect?: GameTeamWhereUniqueInput | GameTeamWhereUniqueInput[]
    update?: GameTeamUpdateWithWhereUniqueWithoutTeamInput | GameTeamUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: GameTeamUpdateManyWithWhereWithoutTeamInput | GameTeamUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: GameTeamScalarWhereInput | GameTeamScalarWhereInput[]
  }

  export type InviteCodeUpdateManyWithoutTeamNestedInput = {
    create?: XOR<InviteCodeCreateWithoutTeamInput, InviteCodeUncheckedCreateWithoutTeamInput> | InviteCodeCreateWithoutTeamInput[] | InviteCodeUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: InviteCodeCreateOrConnectWithoutTeamInput | InviteCodeCreateOrConnectWithoutTeamInput[]
    upsert?: InviteCodeUpsertWithWhereUniqueWithoutTeamInput | InviteCodeUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: InviteCodeCreateManyTeamInputEnvelope
    set?: InviteCodeWhereUniqueInput | InviteCodeWhereUniqueInput[]
    disconnect?: InviteCodeWhereUniqueInput | InviteCodeWhereUniqueInput[]
    delete?: InviteCodeWhereUniqueInput | InviteCodeWhereUniqueInput[]
    connect?: InviteCodeWhereUniqueInput | InviteCodeWhereUniqueInput[]
    update?: InviteCodeUpdateWithWhereUniqueWithoutTeamInput | InviteCodeUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: InviteCodeUpdateManyWithWhereWithoutTeamInput | InviteCodeUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: InviteCodeScalarWhereInput | InviteCodeScalarWhereInput[]
  }

  export type AssetFinalReviewTeamUpdateManyWithoutTeamNestedInput = {
    create?: XOR<AssetFinalReviewTeamCreateWithoutTeamInput, AssetFinalReviewTeamUncheckedCreateWithoutTeamInput> | AssetFinalReviewTeamCreateWithoutTeamInput[] | AssetFinalReviewTeamUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: AssetFinalReviewTeamCreateOrConnectWithoutTeamInput | AssetFinalReviewTeamCreateOrConnectWithoutTeamInput[]
    upsert?: AssetFinalReviewTeamUpsertWithWhereUniqueWithoutTeamInput | AssetFinalReviewTeamUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: AssetFinalReviewTeamCreateManyTeamInputEnvelope
    set?: AssetFinalReviewTeamWhereUniqueInput | AssetFinalReviewTeamWhereUniqueInput[]
    disconnect?: AssetFinalReviewTeamWhereUniqueInput | AssetFinalReviewTeamWhereUniqueInput[]
    delete?: AssetFinalReviewTeamWhereUniqueInput | AssetFinalReviewTeamWhereUniqueInput[]
    connect?: AssetFinalReviewTeamWhereUniqueInput | AssetFinalReviewTeamWhereUniqueInput[]
    update?: AssetFinalReviewTeamUpdateWithWhereUniqueWithoutTeamInput | AssetFinalReviewTeamUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: AssetFinalReviewTeamUpdateManyWithWhereWithoutTeamInput | AssetFinalReviewTeamUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: AssetFinalReviewTeamScalarWhereInput | AssetFinalReviewTeamScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<UserCreateWithoutTeamInput, UserUncheckedCreateWithoutTeamInput> | UserCreateWithoutTeamInput[] | UserUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTeamInput | UserCreateOrConnectWithoutTeamInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTeamInput | UserUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: UserCreateManyTeamInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTeamInput | UserUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTeamInput | UserUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type GameTeamUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<GameTeamCreateWithoutTeamInput, GameTeamUncheckedCreateWithoutTeamInput> | GameTeamCreateWithoutTeamInput[] | GameTeamUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: GameTeamCreateOrConnectWithoutTeamInput | GameTeamCreateOrConnectWithoutTeamInput[]
    upsert?: GameTeamUpsertWithWhereUniqueWithoutTeamInput | GameTeamUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: GameTeamCreateManyTeamInputEnvelope
    set?: GameTeamWhereUniqueInput | GameTeamWhereUniqueInput[]
    disconnect?: GameTeamWhereUniqueInput | GameTeamWhereUniqueInput[]
    delete?: GameTeamWhereUniqueInput | GameTeamWhereUniqueInput[]
    connect?: GameTeamWhereUniqueInput | GameTeamWhereUniqueInput[]
    update?: GameTeamUpdateWithWhereUniqueWithoutTeamInput | GameTeamUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: GameTeamUpdateManyWithWhereWithoutTeamInput | GameTeamUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: GameTeamScalarWhereInput | GameTeamScalarWhereInput[]
  }

  export type InviteCodeUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<InviteCodeCreateWithoutTeamInput, InviteCodeUncheckedCreateWithoutTeamInput> | InviteCodeCreateWithoutTeamInput[] | InviteCodeUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: InviteCodeCreateOrConnectWithoutTeamInput | InviteCodeCreateOrConnectWithoutTeamInput[]
    upsert?: InviteCodeUpsertWithWhereUniqueWithoutTeamInput | InviteCodeUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: InviteCodeCreateManyTeamInputEnvelope
    set?: InviteCodeWhereUniqueInput | InviteCodeWhereUniqueInput[]
    disconnect?: InviteCodeWhereUniqueInput | InviteCodeWhereUniqueInput[]
    delete?: InviteCodeWhereUniqueInput | InviteCodeWhereUniqueInput[]
    connect?: InviteCodeWhereUniqueInput | InviteCodeWhereUniqueInput[]
    update?: InviteCodeUpdateWithWhereUniqueWithoutTeamInput | InviteCodeUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: InviteCodeUpdateManyWithWhereWithoutTeamInput | InviteCodeUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: InviteCodeScalarWhereInput | InviteCodeScalarWhereInput[]
  }

  export type AssetFinalReviewTeamUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<AssetFinalReviewTeamCreateWithoutTeamInput, AssetFinalReviewTeamUncheckedCreateWithoutTeamInput> | AssetFinalReviewTeamCreateWithoutTeamInput[] | AssetFinalReviewTeamUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: AssetFinalReviewTeamCreateOrConnectWithoutTeamInput | AssetFinalReviewTeamCreateOrConnectWithoutTeamInput[]
    upsert?: AssetFinalReviewTeamUpsertWithWhereUniqueWithoutTeamInput | AssetFinalReviewTeamUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: AssetFinalReviewTeamCreateManyTeamInputEnvelope
    set?: AssetFinalReviewTeamWhereUniqueInput | AssetFinalReviewTeamWhereUniqueInput[]
    disconnect?: AssetFinalReviewTeamWhereUniqueInput | AssetFinalReviewTeamWhereUniqueInput[]
    delete?: AssetFinalReviewTeamWhereUniqueInput | AssetFinalReviewTeamWhereUniqueInput[]
    connect?: AssetFinalReviewTeamWhereUniqueInput | AssetFinalReviewTeamWhereUniqueInput[]
    update?: AssetFinalReviewTeamUpdateWithWhereUniqueWithoutTeamInput | AssetFinalReviewTeamUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: AssetFinalReviewTeamUpdateManyWithWhereWithoutTeamInput | AssetFinalReviewTeamUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: AssetFinalReviewTeamScalarWhereInput | AssetFinalReviewTeamScalarWhereInput[]
  }

  export type GameCreateassetCategoriesInput = {
    set: string[]
  }

  export type GameTeamCreateNestedManyWithoutGameInput = {
    create?: XOR<GameTeamCreateWithoutGameInput, GameTeamUncheckedCreateWithoutGameInput> | GameTeamCreateWithoutGameInput[] | GameTeamUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GameTeamCreateOrConnectWithoutGameInput | GameTeamCreateOrConnectWithoutGameInput[]
    createMany?: GameTeamCreateManyGameInputEnvelope
    connect?: GameTeamWhereUniqueInput | GameTeamWhereUniqueInput[]
  }

  export type GameOwnerCreateNestedManyWithoutGameInput = {
    create?: XOR<GameOwnerCreateWithoutGameInput, GameOwnerUncheckedCreateWithoutGameInput> | GameOwnerCreateWithoutGameInput[] | GameOwnerUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GameOwnerCreateOrConnectWithoutGameInput | GameOwnerCreateOrConnectWithoutGameInput[]
    createMany?: GameOwnerCreateManyGameInputEnvelope
    connect?: GameOwnerWhereUniqueInput | GameOwnerWhereUniqueInput[]
  }

  export type AssetCreateNestedManyWithoutGameInput = {
    create?: XOR<AssetCreateWithoutGameInput, AssetUncheckedCreateWithoutGameInput> | AssetCreateWithoutGameInput[] | AssetUncheckedCreateWithoutGameInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutGameInput | AssetCreateOrConnectWithoutGameInput[]
    createMany?: AssetCreateManyGameInputEnvelope
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
  }

  export type UserAssetInteractionCreateNestedManyWithoutGameInput = {
    create?: XOR<UserAssetInteractionCreateWithoutGameInput, UserAssetInteractionUncheckedCreateWithoutGameInput> | UserAssetInteractionCreateWithoutGameInput[] | UserAssetInteractionUncheckedCreateWithoutGameInput[]
    connectOrCreate?: UserAssetInteractionCreateOrConnectWithoutGameInput | UserAssetInteractionCreateOrConnectWithoutGameInput[]
    createMany?: UserAssetInteractionCreateManyGameInputEnvelope
    connect?: UserAssetInteractionWhereUniqueInput | UserAssetInteractionWhereUniqueInput[]
  }

  export type GameTeamUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<GameTeamCreateWithoutGameInput, GameTeamUncheckedCreateWithoutGameInput> | GameTeamCreateWithoutGameInput[] | GameTeamUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GameTeamCreateOrConnectWithoutGameInput | GameTeamCreateOrConnectWithoutGameInput[]
    createMany?: GameTeamCreateManyGameInputEnvelope
    connect?: GameTeamWhereUniqueInput | GameTeamWhereUniqueInput[]
  }

  export type GameOwnerUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<GameOwnerCreateWithoutGameInput, GameOwnerUncheckedCreateWithoutGameInput> | GameOwnerCreateWithoutGameInput[] | GameOwnerUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GameOwnerCreateOrConnectWithoutGameInput | GameOwnerCreateOrConnectWithoutGameInput[]
    createMany?: GameOwnerCreateManyGameInputEnvelope
    connect?: GameOwnerWhereUniqueInput | GameOwnerWhereUniqueInput[]
  }

  export type AssetUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<AssetCreateWithoutGameInput, AssetUncheckedCreateWithoutGameInput> | AssetCreateWithoutGameInput[] | AssetUncheckedCreateWithoutGameInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutGameInput | AssetCreateOrConnectWithoutGameInput[]
    createMany?: AssetCreateManyGameInputEnvelope
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
  }

  export type UserAssetInteractionUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<UserAssetInteractionCreateWithoutGameInput, UserAssetInteractionUncheckedCreateWithoutGameInput> | UserAssetInteractionCreateWithoutGameInput[] | UserAssetInteractionUncheckedCreateWithoutGameInput[]
    connectOrCreate?: UserAssetInteractionCreateOrConnectWithoutGameInput | UserAssetInteractionCreateOrConnectWithoutGameInput[]
    createMany?: UserAssetInteractionCreateManyGameInputEnvelope
    connect?: UserAssetInteractionWhereUniqueInput | UserAssetInteractionWhereUniqueInput[]
  }

  export type GameUpdateassetCategoriesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type GameTeamUpdateManyWithoutGameNestedInput = {
    create?: XOR<GameTeamCreateWithoutGameInput, GameTeamUncheckedCreateWithoutGameInput> | GameTeamCreateWithoutGameInput[] | GameTeamUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GameTeamCreateOrConnectWithoutGameInput | GameTeamCreateOrConnectWithoutGameInput[]
    upsert?: GameTeamUpsertWithWhereUniqueWithoutGameInput | GameTeamUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: GameTeamCreateManyGameInputEnvelope
    set?: GameTeamWhereUniqueInput | GameTeamWhereUniqueInput[]
    disconnect?: GameTeamWhereUniqueInput | GameTeamWhereUniqueInput[]
    delete?: GameTeamWhereUniqueInput | GameTeamWhereUniqueInput[]
    connect?: GameTeamWhereUniqueInput | GameTeamWhereUniqueInput[]
    update?: GameTeamUpdateWithWhereUniqueWithoutGameInput | GameTeamUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: GameTeamUpdateManyWithWhereWithoutGameInput | GameTeamUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: GameTeamScalarWhereInput | GameTeamScalarWhereInput[]
  }

  export type GameOwnerUpdateManyWithoutGameNestedInput = {
    create?: XOR<GameOwnerCreateWithoutGameInput, GameOwnerUncheckedCreateWithoutGameInput> | GameOwnerCreateWithoutGameInput[] | GameOwnerUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GameOwnerCreateOrConnectWithoutGameInput | GameOwnerCreateOrConnectWithoutGameInput[]
    upsert?: GameOwnerUpsertWithWhereUniqueWithoutGameInput | GameOwnerUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: GameOwnerCreateManyGameInputEnvelope
    set?: GameOwnerWhereUniqueInput | GameOwnerWhereUniqueInput[]
    disconnect?: GameOwnerWhereUniqueInput | GameOwnerWhereUniqueInput[]
    delete?: GameOwnerWhereUniqueInput | GameOwnerWhereUniqueInput[]
    connect?: GameOwnerWhereUniqueInput | GameOwnerWhereUniqueInput[]
    update?: GameOwnerUpdateWithWhereUniqueWithoutGameInput | GameOwnerUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: GameOwnerUpdateManyWithWhereWithoutGameInput | GameOwnerUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: GameOwnerScalarWhereInput | GameOwnerScalarWhereInput[]
  }

  export type AssetUpdateManyWithoutGameNestedInput = {
    create?: XOR<AssetCreateWithoutGameInput, AssetUncheckedCreateWithoutGameInput> | AssetCreateWithoutGameInput[] | AssetUncheckedCreateWithoutGameInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutGameInput | AssetCreateOrConnectWithoutGameInput[]
    upsert?: AssetUpsertWithWhereUniqueWithoutGameInput | AssetUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: AssetCreateManyGameInputEnvelope
    set?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    disconnect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    delete?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    update?: AssetUpdateWithWhereUniqueWithoutGameInput | AssetUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: AssetUpdateManyWithWhereWithoutGameInput | AssetUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: AssetScalarWhereInput | AssetScalarWhereInput[]
  }

  export type UserAssetInteractionUpdateManyWithoutGameNestedInput = {
    create?: XOR<UserAssetInteractionCreateWithoutGameInput, UserAssetInteractionUncheckedCreateWithoutGameInput> | UserAssetInteractionCreateWithoutGameInput[] | UserAssetInteractionUncheckedCreateWithoutGameInput[]
    connectOrCreate?: UserAssetInteractionCreateOrConnectWithoutGameInput | UserAssetInteractionCreateOrConnectWithoutGameInput[]
    upsert?: UserAssetInteractionUpsertWithWhereUniqueWithoutGameInput | UserAssetInteractionUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: UserAssetInteractionCreateManyGameInputEnvelope
    set?: UserAssetInteractionWhereUniqueInput | UserAssetInteractionWhereUniqueInput[]
    disconnect?: UserAssetInteractionWhereUniqueInput | UserAssetInteractionWhereUniqueInput[]
    delete?: UserAssetInteractionWhereUniqueInput | UserAssetInteractionWhereUniqueInput[]
    connect?: UserAssetInteractionWhereUniqueInput | UserAssetInteractionWhereUniqueInput[]
    update?: UserAssetInteractionUpdateWithWhereUniqueWithoutGameInput | UserAssetInteractionUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: UserAssetInteractionUpdateManyWithWhereWithoutGameInput | UserAssetInteractionUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: UserAssetInteractionScalarWhereInput | UserAssetInteractionScalarWhereInput[]
  }

  export type GameTeamUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<GameTeamCreateWithoutGameInput, GameTeamUncheckedCreateWithoutGameInput> | GameTeamCreateWithoutGameInput[] | GameTeamUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GameTeamCreateOrConnectWithoutGameInput | GameTeamCreateOrConnectWithoutGameInput[]
    upsert?: GameTeamUpsertWithWhereUniqueWithoutGameInput | GameTeamUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: GameTeamCreateManyGameInputEnvelope
    set?: GameTeamWhereUniqueInput | GameTeamWhereUniqueInput[]
    disconnect?: GameTeamWhereUniqueInput | GameTeamWhereUniqueInput[]
    delete?: GameTeamWhereUniqueInput | GameTeamWhereUniqueInput[]
    connect?: GameTeamWhereUniqueInput | GameTeamWhereUniqueInput[]
    update?: GameTeamUpdateWithWhereUniqueWithoutGameInput | GameTeamUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: GameTeamUpdateManyWithWhereWithoutGameInput | GameTeamUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: GameTeamScalarWhereInput | GameTeamScalarWhereInput[]
  }

  export type GameOwnerUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<GameOwnerCreateWithoutGameInput, GameOwnerUncheckedCreateWithoutGameInput> | GameOwnerCreateWithoutGameInput[] | GameOwnerUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GameOwnerCreateOrConnectWithoutGameInput | GameOwnerCreateOrConnectWithoutGameInput[]
    upsert?: GameOwnerUpsertWithWhereUniqueWithoutGameInput | GameOwnerUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: GameOwnerCreateManyGameInputEnvelope
    set?: GameOwnerWhereUniqueInput | GameOwnerWhereUniqueInput[]
    disconnect?: GameOwnerWhereUniqueInput | GameOwnerWhereUniqueInput[]
    delete?: GameOwnerWhereUniqueInput | GameOwnerWhereUniqueInput[]
    connect?: GameOwnerWhereUniqueInput | GameOwnerWhereUniqueInput[]
    update?: GameOwnerUpdateWithWhereUniqueWithoutGameInput | GameOwnerUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: GameOwnerUpdateManyWithWhereWithoutGameInput | GameOwnerUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: GameOwnerScalarWhereInput | GameOwnerScalarWhereInput[]
  }

  export type AssetUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<AssetCreateWithoutGameInput, AssetUncheckedCreateWithoutGameInput> | AssetCreateWithoutGameInput[] | AssetUncheckedCreateWithoutGameInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutGameInput | AssetCreateOrConnectWithoutGameInput[]
    upsert?: AssetUpsertWithWhereUniqueWithoutGameInput | AssetUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: AssetCreateManyGameInputEnvelope
    set?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    disconnect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    delete?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    update?: AssetUpdateWithWhereUniqueWithoutGameInput | AssetUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: AssetUpdateManyWithWhereWithoutGameInput | AssetUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: AssetScalarWhereInput | AssetScalarWhereInput[]
  }

  export type UserAssetInteractionUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<UserAssetInteractionCreateWithoutGameInput, UserAssetInteractionUncheckedCreateWithoutGameInput> | UserAssetInteractionCreateWithoutGameInput[] | UserAssetInteractionUncheckedCreateWithoutGameInput[]
    connectOrCreate?: UserAssetInteractionCreateOrConnectWithoutGameInput | UserAssetInteractionCreateOrConnectWithoutGameInput[]
    upsert?: UserAssetInteractionUpsertWithWhereUniqueWithoutGameInput | UserAssetInteractionUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: UserAssetInteractionCreateManyGameInputEnvelope
    set?: UserAssetInteractionWhereUniqueInput | UserAssetInteractionWhereUniqueInput[]
    disconnect?: UserAssetInteractionWhereUniqueInput | UserAssetInteractionWhereUniqueInput[]
    delete?: UserAssetInteractionWhereUniqueInput | UserAssetInteractionWhereUniqueInput[]
    connect?: UserAssetInteractionWhereUniqueInput | UserAssetInteractionWhereUniqueInput[]
    update?: UserAssetInteractionUpdateWithWhereUniqueWithoutGameInput | UserAssetInteractionUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: UserAssetInteractionUpdateManyWithWhereWithoutGameInput | UserAssetInteractionUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: UserAssetInteractionScalarWhereInput | UserAssetInteractionScalarWhereInput[]
  }

  export type GameCreateNestedOneWithoutGameTeamsInput = {
    create?: XOR<GameCreateWithoutGameTeamsInput, GameUncheckedCreateWithoutGameTeamsInput>
    connectOrCreate?: GameCreateOrConnectWithoutGameTeamsInput
    connect?: GameWhereUniqueInput
  }

  export type TeamCreateNestedOneWithoutGameTeamsInput = {
    create?: XOR<TeamCreateWithoutGameTeamsInput, TeamUncheckedCreateWithoutGameTeamsInput>
    connectOrCreate?: TeamCreateOrConnectWithoutGameTeamsInput
    connect?: TeamWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type GameUpdateOneRequiredWithoutGameTeamsNestedInput = {
    create?: XOR<GameCreateWithoutGameTeamsInput, GameUncheckedCreateWithoutGameTeamsInput>
    connectOrCreate?: GameCreateOrConnectWithoutGameTeamsInput
    upsert?: GameUpsertWithoutGameTeamsInput
    connect?: GameWhereUniqueInput
    update?: XOR<XOR<GameUpdateToOneWithWhereWithoutGameTeamsInput, GameUpdateWithoutGameTeamsInput>, GameUncheckedUpdateWithoutGameTeamsInput>
  }

  export type TeamUpdateOneRequiredWithoutGameTeamsNestedInput = {
    create?: XOR<TeamCreateWithoutGameTeamsInput, TeamUncheckedCreateWithoutGameTeamsInput>
    connectOrCreate?: TeamCreateOrConnectWithoutGameTeamsInput
    upsert?: TeamUpsertWithoutGameTeamsInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutGameTeamsInput, TeamUpdateWithoutGameTeamsInput>, TeamUncheckedUpdateWithoutGameTeamsInput>
  }

  export type InviteCodeCreateownedGameIdsInput = {
    set: number[]
  }

  export type TeamCreateNestedOneWithoutInviteCodesInput = {
    create?: XOR<TeamCreateWithoutInviteCodesInput, TeamUncheckedCreateWithoutInviteCodesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutInviteCodesInput
    connect?: TeamWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutInviteCodeInput = {
    create?: XOR<UserCreateWithoutInviteCodeInput, UserUncheckedCreateWithoutInviteCodeInput> | UserCreateWithoutInviteCodeInput[] | UserUncheckedCreateWithoutInviteCodeInput[]
    connectOrCreate?: UserCreateOrConnectWithoutInviteCodeInput | UserCreateOrConnectWithoutInviteCodeInput[]
    createMany?: UserCreateManyInviteCodeInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutInviteCodeInput = {
    create?: XOR<UserCreateWithoutInviteCodeInput, UserUncheckedCreateWithoutInviteCodeInput> | UserCreateWithoutInviteCodeInput[] | UserUncheckedCreateWithoutInviteCodeInput[]
    connectOrCreate?: UserCreateOrConnectWithoutInviteCodeInput | UserCreateOrConnectWithoutInviteCodeInput[]
    createMany?: UserCreateManyInviteCodeInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type InviteCodeUpdateownedGameIdsInput = {
    set?: number[]
    push?: number | number[]
  }

  export type TeamUpdateOneRequiredWithoutInviteCodesNestedInput = {
    create?: XOR<TeamCreateWithoutInviteCodesInput, TeamUncheckedCreateWithoutInviteCodesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutInviteCodesInput
    upsert?: TeamUpsertWithoutInviteCodesInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutInviteCodesInput, TeamUpdateWithoutInviteCodesInput>, TeamUncheckedUpdateWithoutInviteCodesInput>
  }

  export type UserUpdateManyWithoutInviteCodeNestedInput = {
    create?: XOR<UserCreateWithoutInviteCodeInput, UserUncheckedCreateWithoutInviteCodeInput> | UserCreateWithoutInviteCodeInput[] | UserUncheckedCreateWithoutInviteCodeInput[]
    connectOrCreate?: UserCreateOrConnectWithoutInviteCodeInput | UserCreateOrConnectWithoutInviteCodeInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutInviteCodeInput | UserUpsertWithWhereUniqueWithoutInviteCodeInput[]
    createMany?: UserCreateManyInviteCodeInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutInviteCodeInput | UserUpdateWithWhereUniqueWithoutInviteCodeInput[]
    updateMany?: UserUpdateManyWithWhereWithoutInviteCodeInput | UserUpdateManyWithWhereWithoutInviteCodeInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutInviteCodeNestedInput = {
    create?: XOR<UserCreateWithoutInviteCodeInput, UserUncheckedCreateWithoutInviteCodeInput> | UserCreateWithoutInviteCodeInput[] | UserUncheckedCreateWithoutInviteCodeInput[]
    connectOrCreate?: UserCreateOrConnectWithoutInviteCodeInput | UserCreateOrConnectWithoutInviteCodeInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutInviteCodeInput | UserUpsertWithWhereUniqueWithoutInviteCodeInput[]
    createMany?: UserCreateManyInviteCodeInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutInviteCodeInput | UserUpdateWithWhereUniqueWithoutInviteCodeInput[]
    updateMany?: UserUpdateManyWithWhereWithoutInviteCodeInput | UserUpdateManyWithWhereWithoutInviteCodeInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type TeamCreateNestedOneWithoutUsersInput = {
    create?: XOR<TeamCreateWithoutUsersInput, TeamUncheckedCreateWithoutUsersInput>
    connectOrCreate?: TeamCreateOrConnectWithoutUsersInput
    connect?: TeamWhereUniqueInput
  }

  export type InviteCodeCreateNestedOneWithoutUsersInput = {
    create?: XOR<InviteCodeCreateWithoutUsersInput, InviteCodeUncheckedCreateWithoutUsersInput>
    connectOrCreate?: InviteCodeCreateOrConnectWithoutUsersInput
    connect?: InviteCodeWhereUniqueInput
  }

  export type GameOwnerCreateNestedManyWithoutUserInput = {
    create?: XOR<GameOwnerCreateWithoutUserInput, GameOwnerUncheckedCreateWithoutUserInput> | GameOwnerCreateWithoutUserInput[] | GameOwnerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GameOwnerCreateOrConnectWithoutUserInput | GameOwnerCreateOrConnectWithoutUserInput[]
    createMany?: GameOwnerCreateManyUserInputEnvelope
    connect?: GameOwnerWhereUniqueInput | GameOwnerWhereUniqueInput[]
  }

  export type AssetCreateNestedManyWithoutUploaderInput = {
    create?: XOR<AssetCreateWithoutUploaderInput, AssetUncheckedCreateWithoutUploaderInput> | AssetCreateWithoutUploaderInput[] | AssetUncheckedCreateWithoutUploaderInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutUploaderInput | AssetCreateOrConnectWithoutUploaderInput[]
    createMany?: AssetCreateManyUploaderInputEnvelope
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
  }

  export type AssetRevisionCreateNestedManyWithoutUploaderInput = {
    create?: XOR<AssetRevisionCreateWithoutUploaderInput, AssetRevisionUncheckedCreateWithoutUploaderInput> | AssetRevisionCreateWithoutUploaderInput[] | AssetRevisionUncheckedCreateWithoutUploaderInput[]
    connectOrCreate?: AssetRevisionCreateOrConnectWithoutUploaderInput | AssetRevisionCreateOrConnectWithoutUploaderInput[]
    createMany?: AssetRevisionCreateManyUploaderInputEnvelope
    connect?: AssetRevisionWhereUniqueInput | AssetRevisionWhereUniqueInput[]
  }

  export type AssetVoteCreateNestedManyWithoutUserInput = {
    create?: XOR<AssetVoteCreateWithoutUserInput, AssetVoteUncheckedCreateWithoutUserInput> | AssetVoteCreateWithoutUserInput[] | AssetVoteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AssetVoteCreateOrConnectWithoutUserInput | AssetVoteCreateOrConnectWithoutUserInput[]
    createMany?: AssetVoteCreateManyUserInputEnvelope
    connect?: AssetVoteWhereUniqueInput | AssetVoteWhereUniqueInput[]
  }

  export type AssetCommentCreateNestedManyWithoutUserInput = {
    create?: XOR<AssetCommentCreateWithoutUserInput, AssetCommentUncheckedCreateWithoutUserInput> | AssetCommentCreateWithoutUserInput[] | AssetCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AssetCommentCreateOrConnectWithoutUserInput | AssetCommentCreateOrConnectWithoutUserInput[]
    createMany?: AssetCommentCreateManyUserInputEnvelope
    connect?: AssetCommentWhereUniqueInput | AssetCommentWhereUniqueInput[]
  }

  export type RevisionCommentCreateNestedManyWithoutUserInput = {
    create?: XOR<RevisionCommentCreateWithoutUserInput, RevisionCommentUncheckedCreateWithoutUserInput> | RevisionCommentCreateWithoutUserInput[] | RevisionCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RevisionCommentCreateOrConnectWithoutUserInput | RevisionCommentCreateOrConnectWithoutUserInput[]
    createMany?: RevisionCommentCreateManyUserInputEnvelope
    connect?: RevisionCommentWhereUniqueInput | RevisionCommentWhereUniqueInput[]
  }

  export type UserAssetInteractionCreateNestedManyWithoutUserInput = {
    create?: XOR<UserAssetInteractionCreateWithoutUserInput, UserAssetInteractionUncheckedCreateWithoutUserInput> | UserAssetInteractionCreateWithoutUserInput[] | UserAssetInteractionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAssetInteractionCreateOrConnectWithoutUserInput | UserAssetInteractionCreateOrConnectWithoutUserInput[]
    createMany?: UserAssetInteractionCreateManyUserInputEnvelope
    connect?: UserAssetInteractionWhereUniqueInput | UserAssetInteractionWhereUniqueInput[]
  }

  export type GameOwnerUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<GameOwnerCreateWithoutUserInput, GameOwnerUncheckedCreateWithoutUserInput> | GameOwnerCreateWithoutUserInput[] | GameOwnerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GameOwnerCreateOrConnectWithoutUserInput | GameOwnerCreateOrConnectWithoutUserInput[]
    createMany?: GameOwnerCreateManyUserInputEnvelope
    connect?: GameOwnerWhereUniqueInput | GameOwnerWhereUniqueInput[]
  }

  export type AssetUncheckedCreateNestedManyWithoutUploaderInput = {
    create?: XOR<AssetCreateWithoutUploaderInput, AssetUncheckedCreateWithoutUploaderInput> | AssetCreateWithoutUploaderInput[] | AssetUncheckedCreateWithoutUploaderInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutUploaderInput | AssetCreateOrConnectWithoutUploaderInput[]
    createMany?: AssetCreateManyUploaderInputEnvelope
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
  }

  export type AssetRevisionUncheckedCreateNestedManyWithoutUploaderInput = {
    create?: XOR<AssetRevisionCreateWithoutUploaderInput, AssetRevisionUncheckedCreateWithoutUploaderInput> | AssetRevisionCreateWithoutUploaderInput[] | AssetRevisionUncheckedCreateWithoutUploaderInput[]
    connectOrCreate?: AssetRevisionCreateOrConnectWithoutUploaderInput | AssetRevisionCreateOrConnectWithoutUploaderInput[]
    createMany?: AssetRevisionCreateManyUploaderInputEnvelope
    connect?: AssetRevisionWhereUniqueInput | AssetRevisionWhereUniqueInput[]
  }

  export type AssetVoteUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AssetVoteCreateWithoutUserInput, AssetVoteUncheckedCreateWithoutUserInput> | AssetVoteCreateWithoutUserInput[] | AssetVoteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AssetVoteCreateOrConnectWithoutUserInput | AssetVoteCreateOrConnectWithoutUserInput[]
    createMany?: AssetVoteCreateManyUserInputEnvelope
    connect?: AssetVoteWhereUniqueInput | AssetVoteWhereUniqueInput[]
  }

  export type AssetCommentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AssetCommentCreateWithoutUserInput, AssetCommentUncheckedCreateWithoutUserInput> | AssetCommentCreateWithoutUserInput[] | AssetCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AssetCommentCreateOrConnectWithoutUserInput | AssetCommentCreateOrConnectWithoutUserInput[]
    createMany?: AssetCommentCreateManyUserInputEnvelope
    connect?: AssetCommentWhereUniqueInput | AssetCommentWhereUniqueInput[]
  }

  export type RevisionCommentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RevisionCommentCreateWithoutUserInput, RevisionCommentUncheckedCreateWithoutUserInput> | RevisionCommentCreateWithoutUserInput[] | RevisionCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RevisionCommentCreateOrConnectWithoutUserInput | RevisionCommentCreateOrConnectWithoutUserInput[]
    createMany?: RevisionCommentCreateManyUserInputEnvelope
    connect?: RevisionCommentWhereUniqueInput | RevisionCommentWhereUniqueInput[]
  }

  export type UserAssetInteractionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserAssetInteractionCreateWithoutUserInput, UserAssetInteractionUncheckedCreateWithoutUserInput> | UserAssetInteractionCreateWithoutUserInput[] | UserAssetInteractionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAssetInteractionCreateOrConnectWithoutUserInput | UserAssetInteractionCreateOrConnectWithoutUserInput[]
    createMany?: UserAssetInteractionCreateManyUserInputEnvelope
    connect?: UserAssetInteractionWhereUniqueInput | UserAssetInteractionWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type TeamUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<TeamCreateWithoutUsersInput, TeamUncheckedCreateWithoutUsersInput>
    connectOrCreate?: TeamCreateOrConnectWithoutUsersInput
    upsert?: TeamUpsertWithoutUsersInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutUsersInput, TeamUpdateWithoutUsersInput>, TeamUncheckedUpdateWithoutUsersInput>
  }

  export type InviteCodeUpdateOneWithoutUsersNestedInput = {
    create?: XOR<InviteCodeCreateWithoutUsersInput, InviteCodeUncheckedCreateWithoutUsersInput>
    connectOrCreate?: InviteCodeCreateOrConnectWithoutUsersInput
    upsert?: InviteCodeUpsertWithoutUsersInput
    disconnect?: InviteCodeWhereInput | boolean
    delete?: InviteCodeWhereInput | boolean
    connect?: InviteCodeWhereUniqueInput
    update?: XOR<XOR<InviteCodeUpdateToOneWithWhereWithoutUsersInput, InviteCodeUpdateWithoutUsersInput>, InviteCodeUncheckedUpdateWithoutUsersInput>
  }

  export type GameOwnerUpdateManyWithoutUserNestedInput = {
    create?: XOR<GameOwnerCreateWithoutUserInput, GameOwnerUncheckedCreateWithoutUserInput> | GameOwnerCreateWithoutUserInput[] | GameOwnerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GameOwnerCreateOrConnectWithoutUserInput | GameOwnerCreateOrConnectWithoutUserInput[]
    upsert?: GameOwnerUpsertWithWhereUniqueWithoutUserInput | GameOwnerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GameOwnerCreateManyUserInputEnvelope
    set?: GameOwnerWhereUniqueInput | GameOwnerWhereUniqueInput[]
    disconnect?: GameOwnerWhereUniqueInput | GameOwnerWhereUniqueInput[]
    delete?: GameOwnerWhereUniqueInput | GameOwnerWhereUniqueInput[]
    connect?: GameOwnerWhereUniqueInput | GameOwnerWhereUniqueInput[]
    update?: GameOwnerUpdateWithWhereUniqueWithoutUserInput | GameOwnerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GameOwnerUpdateManyWithWhereWithoutUserInput | GameOwnerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GameOwnerScalarWhereInput | GameOwnerScalarWhereInput[]
  }

  export type AssetUpdateManyWithoutUploaderNestedInput = {
    create?: XOR<AssetCreateWithoutUploaderInput, AssetUncheckedCreateWithoutUploaderInput> | AssetCreateWithoutUploaderInput[] | AssetUncheckedCreateWithoutUploaderInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutUploaderInput | AssetCreateOrConnectWithoutUploaderInput[]
    upsert?: AssetUpsertWithWhereUniqueWithoutUploaderInput | AssetUpsertWithWhereUniqueWithoutUploaderInput[]
    createMany?: AssetCreateManyUploaderInputEnvelope
    set?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    disconnect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    delete?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    update?: AssetUpdateWithWhereUniqueWithoutUploaderInput | AssetUpdateWithWhereUniqueWithoutUploaderInput[]
    updateMany?: AssetUpdateManyWithWhereWithoutUploaderInput | AssetUpdateManyWithWhereWithoutUploaderInput[]
    deleteMany?: AssetScalarWhereInput | AssetScalarWhereInput[]
  }

  export type AssetRevisionUpdateManyWithoutUploaderNestedInput = {
    create?: XOR<AssetRevisionCreateWithoutUploaderInput, AssetRevisionUncheckedCreateWithoutUploaderInput> | AssetRevisionCreateWithoutUploaderInput[] | AssetRevisionUncheckedCreateWithoutUploaderInput[]
    connectOrCreate?: AssetRevisionCreateOrConnectWithoutUploaderInput | AssetRevisionCreateOrConnectWithoutUploaderInput[]
    upsert?: AssetRevisionUpsertWithWhereUniqueWithoutUploaderInput | AssetRevisionUpsertWithWhereUniqueWithoutUploaderInput[]
    createMany?: AssetRevisionCreateManyUploaderInputEnvelope
    set?: AssetRevisionWhereUniqueInput | AssetRevisionWhereUniqueInput[]
    disconnect?: AssetRevisionWhereUniqueInput | AssetRevisionWhereUniqueInput[]
    delete?: AssetRevisionWhereUniqueInput | AssetRevisionWhereUniqueInput[]
    connect?: AssetRevisionWhereUniqueInput | AssetRevisionWhereUniqueInput[]
    update?: AssetRevisionUpdateWithWhereUniqueWithoutUploaderInput | AssetRevisionUpdateWithWhereUniqueWithoutUploaderInput[]
    updateMany?: AssetRevisionUpdateManyWithWhereWithoutUploaderInput | AssetRevisionUpdateManyWithWhereWithoutUploaderInput[]
    deleteMany?: AssetRevisionScalarWhereInput | AssetRevisionScalarWhereInput[]
  }

  export type AssetVoteUpdateManyWithoutUserNestedInput = {
    create?: XOR<AssetVoteCreateWithoutUserInput, AssetVoteUncheckedCreateWithoutUserInput> | AssetVoteCreateWithoutUserInput[] | AssetVoteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AssetVoteCreateOrConnectWithoutUserInput | AssetVoteCreateOrConnectWithoutUserInput[]
    upsert?: AssetVoteUpsertWithWhereUniqueWithoutUserInput | AssetVoteUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AssetVoteCreateManyUserInputEnvelope
    set?: AssetVoteWhereUniqueInput | AssetVoteWhereUniqueInput[]
    disconnect?: AssetVoteWhereUniqueInput | AssetVoteWhereUniqueInput[]
    delete?: AssetVoteWhereUniqueInput | AssetVoteWhereUniqueInput[]
    connect?: AssetVoteWhereUniqueInput | AssetVoteWhereUniqueInput[]
    update?: AssetVoteUpdateWithWhereUniqueWithoutUserInput | AssetVoteUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AssetVoteUpdateManyWithWhereWithoutUserInput | AssetVoteUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AssetVoteScalarWhereInput | AssetVoteScalarWhereInput[]
  }

  export type AssetCommentUpdateManyWithoutUserNestedInput = {
    create?: XOR<AssetCommentCreateWithoutUserInput, AssetCommentUncheckedCreateWithoutUserInput> | AssetCommentCreateWithoutUserInput[] | AssetCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AssetCommentCreateOrConnectWithoutUserInput | AssetCommentCreateOrConnectWithoutUserInput[]
    upsert?: AssetCommentUpsertWithWhereUniqueWithoutUserInput | AssetCommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AssetCommentCreateManyUserInputEnvelope
    set?: AssetCommentWhereUniqueInput | AssetCommentWhereUniqueInput[]
    disconnect?: AssetCommentWhereUniqueInput | AssetCommentWhereUniqueInput[]
    delete?: AssetCommentWhereUniqueInput | AssetCommentWhereUniqueInput[]
    connect?: AssetCommentWhereUniqueInput | AssetCommentWhereUniqueInput[]
    update?: AssetCommentUpdateWithWhereUniqueWithoutUserInput | AssetCommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AssetCommentUpdateManyWithWhereWithoutUserInput | AssetCommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AssetCommentScalarWhereInput | AssetCommentScalarWhereInput[]
  }

  export type RevisionCommentUpdateManyWithoutUserNestedInput = {
    create?: XOR<RevisionCommentCreateWithoutUserInput, RevisionCommentUncheckedCreateWithoutUserInput> | RevisionCommentCreateWithoutUserInput[] | RevisionCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RevisionCommentCreateOrConnectWithoutUserInput | RevisionCommentCreateOrConnectWithoutUserInput[]
    upsert?: RevisionCommentUpsertWithWhereUniqueWithoutUserInput | RevisionCommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RevisionCommentCreateManyUserInputEnvelope
    set?: RevisionCommentWhereUniqueInput | RevisionCommentWhereUniqueInput[]
    disconnect?: RevisionCommentWhereUniqueInput | RevisionCommentWhereUniqueInput[]
    delete?: RevisionCommentWhereUniqueInput | RevisionCommentWhereUniqueInput[]
    connect?: RevisionCommentWhereUniqueInput | RevisionCommentWhereUniqueInput[]
    update?: RevisionCommentUpdateWithWhereUniqueWithoutUserInput | RevisionCommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RevisionCommentUpdateManyWithWhereWithoutUserInput | RevisionCommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RevisionCommentScalarWhereInput | RevisionCommentScalarWhereInput[]
  }

  export type UserAssetInteractionUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserAssetInteractionCreateWithoutUserInput, UserAssetInteractionUncheckedCreateWithoutUserInput> | UserAssetInteractionCreateWithoutUserInput[] | UserAssetInteractionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAssetInteractionCreateOrConnectWithoutUserInput | UserAssetInteractionCreateOrConnectWithoutUserInput[]
    upsert?: UserAssetInteractionUpsertWithWhereUniqueWithoutUserInput | UserAssetInteractionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserAssetInteractionCreateManyUserInputEnvelope
    set?: UserAssetInteractionWhereUniqueInput | UserAssetInteractionWhereUniqueInput[]
    disconnect?: UserAssetInteractionWhereUniqueInput | UserAssetInteractionWhereUniqueInput[]
    delete?: UserAssetInteractionWhereUniqueInput | UserAssetInteractionWhereUniqueInput[]
    connect?: UserAssetInteractionWhereUniqueInput | UserAssetInteractionWhereUniqueInput[]
    update?: UserAssetInteractionUpdateWithWhereUniqueWithoutUserInput | UserAssetInteractionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserAssetInteractionUpdateManyWithWhereWithoutUserInput | UserAssetInteractionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserAssetInteractionScalarWhereInput | UserAssetInteractionScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type GameOwnerUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<GameOwnerCreateWithoutUserInput, GameOwnerUncheckedCreateWithoutUserInput> | GameOwnerCreateWithoutUserInput[] | GameOwnerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GameOwnerCreateOrConnectWithoutUserInput | GameOwnerCreateOrConnectWithoutUserInput[]
    upsert?: GameOwnerUpsertWithWhereUniqueWithoutUserInput | GameOwnerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GameOwnerCreateManyUserInputEnvelope
    set?: GameOwnerWhereUniqueInput | GameOwnerWhereUniqueInput[]
    disconnect?: GameOwnerWhereUniqueInput | GameOwnerWhereUniqueInput[]
    delete?: GameOwnerWhereUniqueInput | GameOwnerWhereUniqueInput[]
    connect?: GameOwnerWhereUniqueInput | GameOwnerWhereUniqueInput[]
    update?: GameOwnerUpdateWithWhereUniqueWithoutUserInput | GameOwnerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GameOwnerUpdateManyWithWhereWithoutUserInput | GameOwnerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GameOwnerScalarWhereInput | GameOwnerScalarWhereInput[]
  }

  export type AssetUncheckedUpdateManyWithoutUploaderNestedInput = {
    create?: XOR<AssetCreateWithoutUploaderInput, AssetUncheckedCreateWithoutUploaderInput> | AssetCreateWithoutUploaderInput[] | AssetUncheckedCreateWithoutUploaderInput[]
    connectOrCreate?: AssetCreateOrConnectWithoutUploaderInput | AssetCreateOrConnectWithoutUploaderInput[]
    upsert?: AssetUpsertWithWhereUniqueWithoutUploaderInput | AssetUpsertWithWhereUniqueWithoutUploaderInput[]
    createMany?: AssetCreateManyUploaderInputEnvelope
    set?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    disconnect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    delete?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    connect?: AssetWhereUniqueInput | AssetWhereUniqueInput[]
    update?: AssetUpdateWithWhereUniqueWithoutUploaderInput | AssetUpdateWithWhereUniqueWithoutUploaderInput[]
    updateMany?: AssetUpdateManyWithWhereWithoutUploaderInput | AssetUpdateManyWithWhereWithoutUploaderInput[]
    deleteMany?: AssetScalarWhereInput | AssetScalarWhereInput[]
  }

  export type AssetRevisionUncheckedUpdateManyWithoutUploaderNestedInput = {
    create?: XOR<AssetRevisionCreateWithoutUploaderInput, AssetRevisionUncheckedCreateWithoutUploaderInput> | AssetRevisionCreateWithoutUploaderInput[] | AssetRevisionUncheckedCreateWithoutUploaderInput[]
    connectOrCreate?: AssetRevisionCreateOrConnectWithoutUploaderInput | AssetRevisionCreateOrConnectWithoutUploaderInput[]
    upsert?: AssetRevisionUpsertWithWhereUniqueWithoutUploaderInput | AssetRevisionUpsertWithWhereUniqueWithoutUploaderInput[]
    createMany?: AssetRevisionCreateManyUploaderInputEnvelope
    set?: AssetRevisionWhereUniqueInput | AssetRevisionWhereUniqueInput[]
    disconnect?: AssetRevisionWhereUniqueInput | AssetRevisionWhereUniqueInput[]
    delete?: AssetRevisionWhereUniqueInput | AssetRevisionWhereUniqueInput[]
    connect?: AssetRevisionWhereUniqueInput | AssetRevisionWhereUniqueInput[]
    update?: AssetRevisionUpdateWithWhereUniqueWithoutUploaderInput | AssetRevisionUpdateWithWhereUniqueWithoutUploaderInput[]
    updateMany?: AssetRevisionUpdateManyWithWhereWithoutUploaderInput | AssetRevisionUpdateManyWithWhereWithoutUploaderInput[]
    deleteMany?: AssetRevisionScalarWhereInput | AssetRevisionScalarWhereInput[]
  }

  export type AssetVoteUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AssetVoteCreateWithoutUserInput, AssetVoteUncheckedCreateWithoutUserInput> | AssetVoteCreateWithoutUserInput[] | AssetVoteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AssetVoteCreateOrConnectWithoutUserInput | AssetVoteCreateOrConnectWithoutUserInput[]
    upsert?: AssetVoteUpsertWithWhereUniqueWithoutUserInput | AssetVoteUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AssetVoteCreateManyUserInputEnvelope
    set?: AssetVoteWhereUniqueInput | AssetVoteWhereUniqueInput[]
    disconnect?: AssetVoteWhereUniqueInput | AssetVoteWhereUniqueInput[]
    delete?: AssetVoteWhereUniqueInput | AssetVoteWhereUniqueInput[]
    connect?: AssetVoteWhereUniqueInput | AssetVoteWhereUniqueInput[]
    update?: AssetVoteUpdateWithWhereUniqueWithoutUserInput | AssetVoteUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AssetVoteUpdateManyWithWhereWithoutUserInput | AssetVoteUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AssetVoteScalarWhereInput | AssetVoteScalarWhereInput[]
  }

  export type AssetCommentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AssetCommentCreateWithoutUserInput, AssetCommentUncheckedCreateWithoutUserInput> | AssetCommentCreateWithoutUserInput[] | AssetCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AssetCommentCreateOrConnectWithoutUserInput | AssetCommentCreateOrConnectWithoutUserInput[]
    upsert?: AssetCommentUpsertWithWhereUniqueWithoutUserInput | AssetCommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AssetCommentCreateManyUserInputEnvelope
    set?: AssetCommentWhereUniqueInput | AssetCommentWhereUniqueInput[]
    disconnect?: AssetCommentWhereUniqueInput | AssetCommentWhereUniqueInput[]
    delete?: AssetCommentWhereUniqueInput | AssetCommentWhereUniqueInput[]
    connect?: AssetCommentWhereUniqueInput | AssetCommentWhereUniqueInput[]
    update?: AssetCommentUpdateWithWhereUniqueWithoutUserInput | AssetCommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AssetCommentUpdateManyWithWhereWithoutUserInput | AssetCommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AssetCommentScalarWhereInput | AssetCommentScalarWhereInput[]
  }

  export type RevisionCommentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RevisionCommentCreateWithoutUserInput, RevisionCommentUncheckedCreateWithoutUserInput> | RevisionCommentCreateWithoutUserInput[] | RevisionCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RevisionCommentCreateOrConnectWithoutUserInput | RevisionCommentCreateOrConnectWithoutUserInput[]
    upsert?: RevisionCommentUpsertWithWhereUniqueWithoutUserInput | RevisionCommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RevisionCommentCreateManyUserInputEnvelope
    set?: RevisionCommentWhereUniqueInput | RevisionCommentWhereUniqueInput[]
    disconnect?: RevisionCommentWhereUniqueInput | RevisionCommentWhereUniqueInput[]
    delete?: RevisionCommentWhereUniqueInput | RevisionCommentWhereUniqueInput[]
    connect?: RevisionCommentWhereUniqueInput | RevisionCommentWhereUniqueInput[]
    update?: RevisionCommentUpdateWithWhereUniqueWithoutUserInput | RevisionCommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RevisionCommentUpdateManyWithWhereWithoutUserInput | RevisionCommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RevisionCommentScalarWhereInput | RevisionCommentScalarWhereInput[]
  }

  export type UserAssetInteractionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserAssetInteractionCreateWithoutUserInput, UserAssetInteractionUncheckedCreateWithoutUserInput> | UserAssetInteractionCreateWithoutUserInput[] | UserAssetInteractionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAssetInteractionCreateOrConnectWithoutUserInput | UserAssetInteractionCreateOrConnectWithoutUserInput[]
    upsert?: UserAssetInteractionUpsertWithWhereUniqueWithoutUserInput | UserAssetInteractionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserAssetInteractionCreateManyUserInputEnvelope
    set?: UserAssetInteractionWhereUniqueInput | UserAssetInteractionWhereUniqueInput[]
    disconnect?: UserAssetInteractionWhereUniqueInput | UserAssetInteractionWhereUniqueInput[]
    delete?: UserAssetInteractionWhereUniqueInput | UserAssetInteractionWhereUniqueInput[]
    connect?: UserAssetInteractionWhereUniqueInput | UserAssetInteractionWhereUniqueInput[]
    update?: UserAssetInteractionUpdateWithWhereUniqueWithoutUserInput | UserAssetInteractionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserAssetInteractionUpdateManyWithWhereWithoutUserInput | UserAssetInteractionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserAssetInteractionScalarWhereInput | UserAssetInteractionScalarWhereInput[]
  }

  export type GameCreateNestedOneWithoutGameOwnersInput = {
    create?: XOR<GameCreateWithoutGameOwnersInput, GameUncheckedCreateWithoutGameOwnersInput>
    connectOrCreate?: GameCreateOrConnectWithoutGameOwnersInput
    connect?: GameWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutGameOwnersInput = {
    create?: XOR<UserCreateWithoutGameOwnersInput, UserUncheckedCreateWithoutGameOwnersInput>
    connectOrCreate?: UserCreateOrConnectWithoutGameOwnersInput
    connect?: UserWhereUniqueInput
  }

  export type GameUpdateOneRequiredWithoutGameOwnersNestedInput = {
    create?: XOR<GameCreateWithoutGameOwnersInput, GameUncheckedCreateWithoutGameOwnersInput>
    connectOrCreate?: GameCreateOrConnectWithoutGameOwnersInput
    upsert?: GameUpsertWithoutGameOwnersInput
    connect?: GameWhereUniqueInput
    update?: XOR<XOR<GameUpdateToOneWithWhereWithoutGameOwnersInput, GameUpdateWithoutGameOwnersInput>, GameUncheckedUpdateWithoutGameOwnersInput>
  }

  export type UserUpdateOneRequiredWithoutGameOwnersNestedInput = {
    create?: XOR<UserCreateWithoutGameOwnersInput, UserUncheckedCreateWithoutGameOwnersInput>
    connectOrCreate?: UserCreateOrConnectWithoutGameOwnersInput
    upsert?: UserUpsertWithoutGameOwnersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGameOwnersInput, UserUpdateWithoutGameOwnersInput>, UserUncheckedUpdateWithoutGameOwnersInput>
  }

  export type GameCreateNestedOneWithoutAssetsInput = {
    create?: XOR<GameCreateWithoutAssetsInput, GameUncheckedCreateWithoutAssetsInput>
    connectOrCreate?: GameCreateOrConnectWithoutAssetsInput
    connect?: GameWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUploadedAssetsInput = {
    create?: XOR<UserCreateWithoutUploadedAssetsInput, UserUncheckedCreateWithoutUploadedAssetsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUploadedAssetsInput
    connect?: UserWhereUniqueInput
  }

  export type AssetRevisionCreateNestedManyWithoutAssetInput = {
    create?: XOR<AssetRevisionCreateWithoutAssetInput, AssetRevisionUncheckedCreateWithoutAssetInput> | AssetRevisionCreateWithoutAssetInput[] | AssetRevisionUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: AssetRevisionCreateOrConnectWithoutAssetInput | AssetRevisionCreateOrConnectWithoutAssetInput[]
    createMany?: AssetRevisionCreateManyAssetInputEnvelope
    connect?: AssetRevisionWhereUniqueInput | AssetRevisionWhereUniqueInput[]
  }

  export type AssetVoteCreateNestedManyWithoutAssetInput = {
    create?: XOR<AssetVoteCreateWithoutAssetInput, AssetVoteUncheckedCreateWithoutAssetInput> | AssetVoteCreateWithoutAssetInput[] | AssetVoteUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: AssetVoteCreateOrConnectWithoutAssetInput | AssetVoteCreateOrConnectWithoutAssetInput[]
    createMany?: AssetVoteCreateManyAssetInputEnvelope
    connect?: AssetVoteWhereUniqueInput | AssetVoteWhereUniqueInput[]
  }

  export type AssetCommentCreateNestedManyWithoutAssetInput = {
    create?: XOR<AssetCommentCreateWithoutAssetInput, AssetCommentUncheckedCreateWithoutAssetInput> | AssetCommentCreateWithoutAssetInput[] | AssetCommentUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: AssetCommentCreateOrConnectWithoutAssetInput | AssetCommentCreateOrConnectWithoutAssetInput[]
    createMany?: AssetCommentCreateManyAssetInputEnvelope
    connect?: AssetCommentWhereUniqueInput | AssetCommentWhereUniqueInput[]
  }

  export type UserAssetInteractionCreateNestedManyWithoutAssetInput = {
    create?: XOR<UserAssetInteractionCreateWithoutAssetInput, UserAssetInteractionUncheckedCreateWithoutAssetInput> | UserAssetInteractionCreateWithoutAssetInput[] | UserAssetInteractionUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: UserAssetInteractionCreateOrConnectWithoutAssetInput | UserAssetInteractionCreateOrConnectWithoutAssetInput[]
    createMany?: UserAssetInteractionCreateManyAssetInputEnvelope
    connect?: UserAssetInteractionWhereUniqueInput | UserAssetInteractionWhereUniqueInput[]
  }

  export type AssetFinalReviewTeamCreateNestedManyWithoutAssetInput = {
    create?: XOR<AssetFinalReviewTeamCreateWithoutAssetInput, AssetFinalReviewTeamUncheckedCreateWithoutAssetInput> | AssetFinalReviewTeamCreateWithoutAssetInput[] | AssetFinalReviewTeamUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: AssetFinalReviewTeamCreateOrConnectWithoutAssetInput | AssetFinalReviewTeamCreateOrConnectWithoutAssetInput[]
    createMany?: AssetFinalReviewTeamCreateManyAssetInputEnvelope
    connect?: AssetFinalReviewTeamWhereUniqueInput | AssetFinalReviewTeamWhereUniqueInput[]
  }

  export type AssetRevisionUncheckedCreateNestedManyWithoutAssetInput = {
    create?: XOR<AssetRevisionCreateWithoutAssetInput, AssetRevisionUncheckedCreateWithoutAssetInput> | AssetRevisionCreateWithoutAssetInput[] | AssetRevisionUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: AssetRevisionCreateOrConnectWithoutAssetInput | AssetRevisionCreateOrConnectWithoutAssetInput[]
    createMany?: AssetRevisionCreateManyAssetInputEnvelope
    connect?: AssetRevisionWhereUniqueInput | AssetRevisionWhereUniqueInput[]
  }

  export type AssetVoteUncheckedCreateNestedManyWithoutAssetInput = {
    create?: XOR<AssetVoteCreateWithoutAssetInput, AssetVoteUncheckedCreateWithoutAssetInput> | AssetVoteCreateWithoutAssetInput[] | AssetVoteUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: AssetVoteCreateOrConnectWithoutAssetInput | AssetVoteCreateOrConnectWithoutAssetInput[]
    createMany?: AssetVoteCreateManyAssetInputEnvelope
    connect?: AssetVoteWhereUniqueInput | AssetVoteWhereUniqueInput[]
  }

  export type AssetCommentUncheckedCreateNestedManyWithoutAssetInput = {
    create?: XOR<AssetCommentCreateWithoutAssetInput, AssetCommentUncheckedCreateWithoutAssetInput> | AssetCommentCreateWithoutAssetInput[] | AssetCommentUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: AssetCommentCreateOrConnectWithoutAssetInput | AssetCommentCreateOrConnectWithoutAssetInput[]
    createMany?: AssetCommentCreateManyAssetInputEnvelope
    connect?: AssetCommentWhereUniqueInput | AssetCommentWhereUniqueInput[]
  }

  export type UserAssetInteractionUncheckedCreateNestedManyWithoutAssetInput = {
    create?: XOR<UserAssetInteractionCreateWithoutAssetInput, UserAssetInteractionUncheckedCreateWithoutAssetInput> | UserAssetInteractionCreateWithoutAssetInput[] | UserAssetInteractionUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: UserAssetInteractionCreateOrConnectWithoutAssetInput | UserAssetInteractionCreateOrConnectWithoutAssetInput[]
    createMany?: UserAssetInteractionCreateManyAssetInputEnvelope
    connect?: UserAssetInteractionWhereUniqueInput | UserAssetInteractionWhereUniqueInput[]
  }

  export type AssetFinalReviewTeamUncheckedCreateNestedManyWithoutAssetInput = {
    create?: XOR<AssetFinalReviewTeamCreateWithoutAssetInput, AssetFinalReviewTeamUncheckedCreateWithoutAssetInput> | AssetFinalReviewTeamCreateWithoutAssetInput[] | AssetFinalReviewTeamUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: AssetFinalReviewTeamCreateOrConnectWithoutAssetInput | AssetFinalReviewTeamCreateOrConnectWithoutAssetInput[]
    createMany?: AssetFinalReviewTeamCreateManyAssetInputEnvelope
    connect?: AssetFinalReviewTeamWhereUniqueInput | AssetFinalReviewTeamWhereUniqueInput[]
  }

  export type EnumAssetStatusFieldUpdateOperationsInput = {
    set?: $Enums.AssetStatus
  }

  export type GameUpdateOneRequiredWithoutAssetsNestedInput = {
    create?: XOR<GameCreateWithoutAssetsInput, GameUncheckedCreateWithoutAssetsInput>
    connectOrCreate?: GameCreateOrConnectWithoutAssetsInput
    upsert?: GameUpsertWithoutAssetsInput
    connect?: GameWhereUniqueInput
    update?: XOR<XOR<GameUpdateToOneWithWhereWithoutAssetsInput, GameUpdateWithoutAssetsInput>, GameUncheckedUpdateWithoutAssetsInput>
  }

  export type UserUpdateOneRequiredWithoutUploadedAssetsNestedInput = {
    create?: XOR<UserCreateWithoutUploadedAssetsInput, UserUncheckedCreateWithoutUploadedAssetsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUploadedAssetsInput
    upsert?: UserUpsertWithoutUploadedAssetsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUploadedAssetsInput, UserUpdateWithoutUploadedAssetsInput>, UserUncheckedUpdateWithoutUploadedAssetsInput>
  }

  export type AssetRevisionUpdateManyWithoutAssetNestedInput = {
    create?: XOR<AssetRevisionCreateWithoutAssetInput, AssetRevisionUncheckedCreateWithoutAssetInput> | AssetRevisionCreateWithoutAssetInput[] | AssetRevisionUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: AssetRevisionCreateOrConnectWithoutAssetInput | AssetRevisionCreateOrConnectWithoutAssetInput[]
    upsert?: AssetRevisionUpsertWithWhereUniqueWithoutAssetInput | AssetRevisionUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: AssetRevisionCreateManyAssetInputEnvelope
    set?: AssetRevisionWhereUniqueInput | AssetRevisionWhereUniqueInput[]
    disconnect?: AssetRevisionWhereUniqueInput | AssetRevisionWhereUniqueInput[]
    delete?: AssetRevisionWhereUniqueInput | AssetRevisionWhereUniqueInput[]
    connect?: AssetRevisionWhereUniqueInput | AssetRevisionWhereUniqueInput[]
    update?: AssetRevisionUpdateWithWhereUniqueWithoutAssetInput | AssetRevisionUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: AssetRevisionUpdateManyWithWhereWithoutAssetInput | AssetRevisionUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: AssetRevisionScalarWhereInput | AssetRevisionScalarWhereInput[]
  }

  export type AssetVoteUpdateManyWithoutAssetNestedInput = {
    create?: XOR<AssetVoteCreateWithoutAssetInput, AssetVoteUncheckedCreateWithoutAssetInput> | AssetVoteCreateWithoutAssetInput[] | AssetVoteUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: AssetVoteCreateOrConnectWithoutAssetInput | AssetVoteCreateOrConnectWithoutAssetInput[]
    upsert?: AssetVoteUpsertWithWhereUniqueWithoutAssetInput | AssetVoteUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: AssetVoteCreateManyAssetInputEnvelope
    set?: AssetVoteWhereUniqueInput | AssetVoteWhereUniqueInput[]
    disconnect?: AssetVoteWhereUniqueInput | AssetVoteWhereUniqueInput[]
    delete?: AssetVoteWhereUniqueInput | AssetVoteWhereUniqueInput[]
    connect?: AssetVoteWhereUniqueInput | AssetVoteWhereUniqueInput[]
    update?: AssetVoteUpdateWithWhereUniqueWithoutAssetInput | AssetVoteUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: AssetVoteUpdateManyWithWhereWithoutAssetInput | AssetVoteUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: AssetVoteScalarWhereInput | AssetVoteScalarWhereInput[]
  }

  export type AssetCommentUpdateManyWithoutAssetNestedInput = {
    create?: XOR<AssetCommentCreateWithoutAssetInput, AssetCommentUncheckedCreateWithoutAssetInput> | AssetCommentCreateWithoutAssetInput[] | AssetCommentUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: AssetCommentCreateOrConnectWithoutAssetInput | AssetCommentCreateOrConnectWithoutAssetInput[]
    upsert?: AssetCommentUpsertWithWhereUniqueWithoutAssetInput | AssetCommentUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: AssetCommentCreateManyAssetInputEnvelope
    set?: AssetCommentWhereUniqueInput | AssetCommentWhereUniqueInput[]
    disconnect?: AssetCommentWhereUniqueInput | AssetCommentWhereUniqueInput[]
    delete?: AssetCommentWhereUniqueInput | AssetCommentWhereUniqueInput[]
    connect?: AssetCommentWhereUniqueInput | AssetCommentWhereUniqueInput[]
    update?: AssetCommentUpdateWithWhereUniqueWithoutAssetInput | AssetCommentUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: AssetCommentUpdateManyWithWhereWithoutAssetInput | AssetCommentUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: AssetCommentScalarWhereInput | AssetCommentScalarWhereInput[]
  }

  export type UserAssetInteractionUpdateManyWithoutAssetNestedInput = {
    create?: XOR<UserAssetInteractionCreateWithoutAssetInput, UserAssetInteractionUncheckedCreateWithoutAssetInput> | UserAssetInteractionCreateWithoutAssetInput[] | UserAssetInteractionUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: UserAssetInteractionCreateOrConnectWithoutAssetInput | UserAssetInteractionCreateOrConnectWithoutAssetInput[]
    upsert?: UserAssetInteractionUpsertWithWhereUniqueWithoutAssetInput | UserAssetInteractionUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: UserAssetInteractionCreateManyAssetInputEnvelope
    set?: UserAssetInteractionWhereUniqueInput | UserAssetInteractionWhereUniqueInput[]
    disconnect?: UserAssetInteractionWhereUniqueInput | UserAssetInteractionWhereUniqueInput[]
    delete?: UserAssetInteractionWhereUniqueInput | UserAssetInteractionWhereUniqueInput[]
    connect?: UserAssetInteractionWhereUniqueInput | UserAssetInteractionWhereUniqueInput[]
    update?: UserAssetInteractionUpdateWithWhereUniqueWithoutAssetInput | UserAssetInteractionUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: UserAssetInteractionUpdateManyWithWhereWithoutAssetInput | UserAssetInteractionUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: UserAssetInteractionScalarWhereInput | UserAssetInteractionScalarWhereInput[]
  }

  export type AssetFinalReviewTeamUpdateManyWithoutAssetNestedInput = {
    create?: XOR<AssetFinalReviewTeamCreateWithoutAssetInput, AssetFinalReviewTeamUncheckedCreateWithoutAssetInput> | AssetFinalReviewTeamCreateWithoutAssetInput[] | AssetFinalReviewTeamUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: AssetFinalReviewTeamCreateOrConnectWithoutAssetInput | AssetFinalReviewTeamCreateOrConnectWithoutAssetInput[]
    upsert?: AssetFinalReviewTeamUpsertWithWhereUniqueWithoutAssetInput | AssetFinalReviewTeamUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: AssetFinalReviewTeamCreateManyAssetInputEnvelope
    set?: AssetFinalReviewTeamWhereUniqueInput | AssetFinalReviewTeamWhereUniqueInput[]
    disconnect?: AssetFinalReviewTeamWhereUniqueInput | AssetFinalReviewTeamWhereUniqueInput[]
    delete?: AssetFinalReviewTeamWhereUniqueInput | AssetFinalReviewTeamWhereUniqueInput[]
    connect?: AssetFinalReviewTeamWhereUniqueInput | AssetFinalReviewTeamWhereUniqueInput[]
    update?: AssetFinalReviewTeamUpdateWithWhereUniqueWithoutAssetInput | AssetFinalReviewTeamUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: AssetFinalReviewTeamUpdateManyWithWhereWithoutAssetInput | AssetFinalReviewTeamUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: AssetFinalReviewTeamScalarWhereInput | AssetFinalReviewTeamScalarWhereInput[]
  }

  export type AssetRevisionUncheckedUpdateManyWithoutAssetNestedInput = {
    create?: XOR<AssetRevisionCreateWithoutAssetInput, AssetRevisionUncheckedCreateWithoutAssetInput> | AssetRevisionCreateWithoutAssetInput[] | AssetRevisionUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: AssetRevisionCreateOrConnectWithoutAssetInput | AssetRevisionCreateOrConnectWithoutAssetInput[]
    upsert?: AssetRevisionUpsertWithWhereUniqueWithoutAssetInput | AssetRevisionUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: AssetRevisionCreateManyAssetInputEnvelope
    set?: AssetRevisionWhereUniqueInput | AssetRevisionWhereUniqueInput[]
    disconnect?: AssetRevisionWhereUniqueInput | AssetRevisionWhereUniqueInput[]
    delete?: AssetRevisionWhereUniqueInput | AssetRevisionWhereUniqueInput[]
    connect?: AssetRevisionWhereUniqueInput | AssetRevisionWhereUniqueInput[]
    update?: AssetRevisionUpdateWithWhereUniqueWithoutAssetInput | AssetRevisionUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: AssetRevisionUpdateManyWithWhereWithoutAssetInput | AssetRevisionUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: AssetRevisionScalarWhereInput | AssetRevisionScalarWhereInput[]
  }

  export type AssetVoteUncheckedUpdateManyWithoutAssetNestedInput = {
    create?: XOR<AssetVoteCreateWithoutAssetInput, AssetVoteUncheckedCreateWithoutAssetInput> | AssetVoteCreateWithoutAssetInput[] | AssetVoteUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: AssetVoteCreateOrConnectWithoutAssetInput | AssetVoteCreateOrConnectWithoutAssetInput[]
    upsert?: AssetVoteUpsertWithWhereUniqueWithoutAssetInput | AssetVoteUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: AssetVoteCreateManyAssetInputEnvelope
    set?: AssetVoteWhereUniqueInput | AssetVoteWhereUniqueInput[]
    disconnect?: AssetVoteWhereUniqueInput | AssetVoteWhereUniqueInput[]
    delete?: AssetVoteWhereUniqueInput | AssetVoteWhereUniqueInput[]
    connect?: AssetVoteWhereUniqueInput | AssetVoteWhereUniqueInput[]
    update?: AssetVoteUpdateWithWhereUniqueWithoutAssetInput | AssetVoteUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: AssetVoteUpdateManyWithWhereWithoutAssetInput | AssetVoteUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: AssetVoteScalarWhereInput | AssetVoteScalarWhereInput[]
  }

  export type AssetCommentUncheckedUpdateManyWithoutAssetNestedInput = {
    create?: XOR<AssetCommentCreateWithoutAssetInput, AssetCommentUncheckedCreateWithoutAssetInput> | AssetCommentCreateWithoutAssetInput[] | AssetCommentUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: AssetCommentCreateOrConnectWithoutAssetInput | AssetCommentCreateOrConnectWithoutAssetInput[]
    upsert?: AssetCommentUpsertWithWhereUniqueWithoutAssetInput | AssetCommentUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: AssetCommentCreateManyAssetInputEnvelope
    set?: AssetCommentWhereUniqueInput | AssetCommentWhereUniqueInput[]
    disconnect?: AssetCommentWhereUniqueInput | AssetCommentWhereUniqueInput[]
    delete?: AssetCommentWhereUniqueInput | AssetCommentWhereUniqueInput[]
    connect?: AssetCommentWhereUniqueInput | AssetCommentWhereUniqueInput[]
    update?: AssetCommentUpdateWithWhereUniqueWithoutAssetInput | AssetCommentUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: AssetCommentUpdateManyWithWhereWithoutAssetInput | AssetCommentUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: AssetCommentScalarWhereInput | AssetCommentScalarWhereInput[]
  }

  export type UserAssetInteractionUncheckedUpdateManyWithoutAssetNestedInput = {
    create?: XOR<UserAssetInteractionCreateWithoutAssetInput, UserAssetInteractionUncheckedCreateWithoutAssetInput> | UserAssetInteractionCreateWithoutAssetInput[] | UserAssetInteractionUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: UserAssetInteractionCreateOrConnectWithoutAssetInput | UserAssetInteractionCreateOrConnectWithoutAssetInput[]
    upsert?: UserAssetInteractionUpsertWithWhereUniqueWithoutAssetInput | UserAssetInteractionUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: UserAssetInteractionCreateManyAssetInputEnvelope
    set?: UserAssetInteractionWhereUniqueInput | UserAssetInteractionWhereUniqueInput[]
    disconnect?: UserAssetInteractionWhereUniqueInput | UserAssetInteractionWhereUniqueInput[]
    delete?: UserAssetInteractionWhereUniqueInput | UserAssetInteractionWhereUniqueInput[]
    connect?: UserAssetInteractionWhereUniqueInput | UserAssetInteractionWhereUniqueInput[]
    update?: UserAssetInteractionUpdateWithWhereUniqueWithoutAssetInput | UserAssetInteractionUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: UserAssetInteractionUpdateManyWithWhereWithoutAssetInput | UserAssetInteractionUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: UserAssetInteractionScalarWhereInput | UserAssetInteractionScalarWhereInput[]
  }

  export type AssetFinalReviewTeamUncheckedUpdateManyWithoutAssetNestedInput = {
    create?: XOR<AssetFinalReviewTeamCreateWithoutAssetInput, AssetFinalReviewTeamUncheckedCreateWithoutAssetInput> | AssetFinalReviewTeamCreateWithoutAssetInput[] | AssetFinalReviewTeamUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: AssetFinalReviewTeamCreateOrConnectWithoutAssetInput | AssetFinalReviewTeamCreateOrConnectWithoutAssetInput[]
    upsert?: AssetFinalReviewTeamUpsertWithWhereUniqueWithoutAssetInput | AssetFinalReviewTeamUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: AssetFinalReviewTeamCreateManyAssetInputEnvelope
    set?: AssetFinalReviewTeamWhereUniqueInput | AssetFinalReviewTeamWhereUniqueInput[]
    disconnect?: AssetFinalReviewTeamWhereUniqueInput | AssetFinalReviewTeamWhereUniqueInput[]
    delete?: AssetFinalReviewTeamWhereUniqueInput | AssetFinalReviewTeamWhereUniqueInput[]
    connect?: AssetFinalReviewTeamWhereUniqueInput | AssetFinalReviewTeamWhereUniqueInput[]
    update?: AssetFinalReviewTeamUpdateWithWhereUniqueWithoutAssetInput | AssetFinalReviewTeamUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: AssetFinalReviewTeamUpdateManyWithWhereWithoutAssetInput | AssetFinalReviewTeamUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: AssetFinalReviewTeamScalarWhereInput | AssetFinalReviewTeamScalarWhereInput[]
  }

  export type AssetCreateNestedOneWithoutFinalReviewTeamsInput = {
    create?: XOR<AssetCreateWithoutFinalReviewTeamsInput, AssetUncheckedCreateWithoutFinalReviewTeamsInput>
    connectOrCreate?: AssetCreateOrConnectWithoutFinalReviewTeamsInput
    connect?: AssetWhereUniqueInput
  }

  export type TeamCreateNestedOneWithoutFinalReviewAssetsInput = {
    create?: XOR<TeamCreateWithoutFinalReviewAssetsInput, TeamUncheckedCreateWithoutFinalReviewAssetsInput>
    connectOrCreate?: TeamCreateOrConnectWithoutFinalReviewAssetsInput
    connect?: TeamWhereUniqueInput
  }

  export type AssetUpdateOneRequiredWithoutFinalReviewTeamsNestedInput = {
    create?: XOR<AssetCreateWithoutFinalReviewTeamsInput, AssetUncheckedCreateWithoutFinalReviewTeamsInput>
    connectOrCreate?: AssetCreateOrConnectWithoutFinalReviewTeamsInput
    upsert?: AssetUpsertWithoutFinalReviewTeamsInput
    connect?: AssetWhereUniqueInput
    update?: XOR<XOR<AssetUpdateToOneWithWhereWithoutFinalReviewTeamsInput, AssetUpdateWithoutFinalReviewTeamsInput>, AssetUncheckedUpdateWithoutFinalReviewTeamsInput>
  }

  export type TeamUpdateOneRequiredWithoutFinalReviewAssetsNestedInput = {
    create?: XOR<TeamCreateWithoutFinalReviewAssetsInput, TeamUncheckedCreateWithoutFinalReviewAssetsInput>
    connectOrCreate?: TeamCreateOrConnectWithoutFinalReviewAssetsInput
    upsert?: TeamUpsertWithoutFinalReviewAssetsInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutFinalReviewAssetsInput, TeamUpdateWithoutFinalReviewAssetsInput>, TeamUncheckedUpdateWithoutFinalReviewAssetsInput>
  }

  export type AssetCreateNestedOneWithoutRevisionsInput = {
    create?: XOR<AssetCreateWithoutRevisionsInput, AssetUncheckedCreateWithoutRevisionsInput>
    connectOrCreate?: AssetCreateOrConnectWithoutRevisionsInput
    connect?: AssetWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAssetRevisionsInput = {
    create?: XOR<UserCreateWithoutAssetRevisionsInput, UserUncheckedCreateWithoutAssetRevisionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssetRevisionsInput
    connect?: UserWhereUniqueInput
  }

  export type AssetVoteCreateNestedManyWithoutRevisionInput = {
    create?: XOR<AssetVoteCreateWithoutRevisionInput, AssetVoteUncheckedCreateWithoutRevisionInput> | AssetVoteCreateWithoutRevisionInput[] | AssetVoteUncheckedCreateWithoutRevisionInput[]
    connectOrCreate?: AssetVoteCreateOrConnectWithoutRevisionInput | AssetVoteCreateOrConnectWithoutRevisionInput[]
    createMany?: AssetVoteCreateManyRevisionInputEnvelope
    connect?: AssetVoteWhereUniqueInput | AssetVoteWhereUniqueInput[]
  }

  export type RevisionCommentCreateNestedManyWithoutRevisionInput = {
    create?: XOR<RevisionCommentCreateWithoutRevisionInput, RevisionCommentUncheckedCreateWithoutRevisionInput> | RevisionCommentCreateWithoutRevisionInput[] | RevisionCommentUncheckedCreateWithoutRevisionInput[]
    connectOrCreate?: RevisionCommentCreateOrConnectWithoutRevisionInput | RevisionCommentCreateOrConnectWithoutRevisionInput[]
    createMany?: RevisionCommentCreateManyRevisionInputEnvelope
    connect?: RevisionCommentWhereUniqueInput | RevisionCommentWhereUniqueInput[]
  }

  export type UserAssetInteractionCreateNestedManyWithoutRevisionInput = {
    create?: XOR<UserAssetInteractionCreateWithoutRevisionInput, UserAssetInteractionUncheckedCreateWithoutRevisionInput> | UserAssetInteractionCreateWithoutRevisionInput[] | UserAssetInteractionUncheckedCreateWithoutRevisionInput[]
    connectOrCreate?: UserAssetInteractionCreateOrConnectWithoutRevisionInput | UserAssetInteractionCreateOrConnectWithoutRevisionInput[]
    createMany?: UserAssetInteractionCreateManyRevisionInputEnvelope
    connect?: UserAssetInteractionWhereUniqueInput | UserAssetInteractionWhereUniqueInput[]
  }

  export type AssetVoteUncheckedCreateNestedManyWithoutRevisionInput = {
    create?: XOR<AssetVoteCreateWithoutRevisionInput, AssetVoteUncheckedCreateWithoutRevisionInput> | AssetVoteCreateWithoutRevisionInput[] | AssetVoteUncheckedCreateWithoutRevisionInput[]
    connectOrCreate?: AssetVoteCreateOrConnectWithoutRevisionInput | AssetVoteCreateOrConnectWithoutRevisionInput[]
    createMany?: AssetVoteCreateManyRevisionInputEnvelope
    connect?: AssetVoteWhereUniqueInput | AssetVoteWhereUniqueInput[]
  }

  export type RevisionCommentUncheckedCreateNestedManyWithoutRevisionInput = {
    create?: XOR<RevisionCommentCreateWithoutRevisionInput, RevisionCommentUncheckedCreateWithoutRevisionInput> | RevisionCommentCreateWithoutRevisionInput[] | RevisionCommentUncheckedCreateWithoutRevisionInput[]
    connectOrCreate?: RevisionCommentCreateOrConnectWithoutRevisionInput | RevisionCommentCreateOrConnectWithoutRevisionInput[]
    createMany?: RevisionCommentCreateManyRevisionInputEnvelope
    connect?: RevisionCommentWhereUniqueInput | RevisionCommentWhereUniqueInput[]
  }

  export type UserAssetInteractionUncheckedCreateNestedManyWithoutRevisionInput = {
    create?: XOR<UserAssetInteractionCreateWithoutRevisionInput, UserAssetInteractionUncheckedCreateWithoutRevisionInput> | UserAssetInteractionCreateWithoutRevisionInput[] | UserAssetInteractionUncheckedCreateWithoutRevisionInput[]
    connectOrCreate?: UserAssetInteractionCreateOrConnectWithoutRevisionInput | UserAssetInteractionCreateOrConnectWithoutRevisionInput[]
    createMany?: UserAssetInteractionCreateManyRevisionInputEnvelope
    connect?: UserAssetInteractionWhereUniqueInput | UserAssetInteractionWhereUniqueInput[]
  }

  export type AssetUpdateOneRequiredWithoutRevisionsNestedInput = {
    create?: XOR<AssetCreateWithoutRevisionsInput, AssetUncheckedCreateWithoutRevisionsInput>
    connectOrCreate?: AssetCreateOrConnectWithoutRevisionsInput
    upsert?: AssetUpsertWithoutRevisionsInput
    connect?: AssetWhereUniqueInput
    update?: XOR<XOR<AssetUpdateToOneWithWhereWithoutRevisionsInput, AssetUpdateWithoutRevisionsInput>, AssetUncheckedUpdateWithoutRevisionsInput>
  }

  export type UserUpdateOneRequiredWithoutAssetRevisionsNestedInput = {
    create?: XOR<UserCreateWithoutAssetRevisionsInput, UserUncheckedCreateWithoutAssetRevisionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssetRevisionsInput
    upsert?: UserUpsertWithoutAssetRevisionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssetRevisionsInput, UserUpdateWithoutAssetRevisionsInput>, UserUncheckedUpdateWithoutAssetRevisionsInput>
  }

  export type AssetVoteUpdateManyWithoutRevisionNestedInput = {
    create?: XOR<AssetVoteCreateWithoutRevisionInput, AssetVoteUncheckedCreateWithoutRevisionInput> | AssetVoteCreateWithoutRevisionInput[] | AssetVoteUncheckedCreateWithoutRevisionInput[]
    connectOrCreate?: AssetVoteCreateOrConnectWithoutRevisionInput | AssetVoteCreateOrConnectWithoutRevisionInput[]
    upsert?: AssetVoteUpsertWithWhereUniqueWithoutRevisionInput | AssetVoteUpsertWithWhereUniqueWithoutRevisionInput[]
    createMany?: AssetVoteCreateManyRevisionInputEnvelope
    set?: AssetVoteWhereUniqueInput | AssetVoteWhereUniqueInput[]
    disconnect?: AssetVoteWhereUniqueInput | AssetVoteWhereUniqueInput[]
    delete?: AssetVoteWhereUniqueInput | AssetVoteWhereUniqueInput[]
    connect?: AssetVoteWhereUniqueInput | AssetVoteWhereUniqueInput[]
    update?: AssetVoteUpdateWithWhereUniqueWithoutRevisionInput | AssetVoteUpdateWithWhereUniqueWithoutRevisionInput[]
    updateMany?: AssetVoteUpdateManyWithWhereWithoutRevisionInput | AssetVoteUpdateManyWithWhereWithoutRevisionInput[]
    deleteMany?: AssetVoteScalarWhereInput | AssetVoteScalarWhereInput[]
  }

  export type RevisionCommentUpdateManyWithoutRevisionNestedInput = {
    create?: XOR<RevisionCommentCreateWithoutRevisionInput, RevisionCommentUncheckedCreateWithoutRevisionInput> | RevisionCommentCreateWithoutRevisionInput[] | RevisionCommentUncheckedCreateWithoutRevisionInput[]
    connectOrCreate?: RevisionCommentCreateOrConnectWithoutRevisionInput | RevisionCommentCreateOrConnectWithoutRevisionInput[]
    upsert?: RevisionCommentUpsertWithWhereUniqueWithoutRevisionInput | RevisionCommentUpsertWithWhereUniqueWithoutRevisionInput[]
    createMany?: RevisionCommentCreateManyRevisionInputEnvelope
    set?: RevisionCommentWhereUniqueInput | RevisionCommentWhereUniqueInput[]
    disconnect?: RevisionCommentWhereUniqueInput | RevisionCommentWhereUniqueInput[]
    delete?: RevisionCommentWhereUniqueInput | RevisionCommentWhereUniqueInput[]
    connect?: RevisionCommentWhereUniqueInput | RevisionCommentWhereUniqueInput[]
    update?: RevisionCommentUpdateWithWhereUniqueWithoutRevisionInput | RevisionCommentUpdateWithWhereUniqueWithoutRevisionInput[]
    updateMany?: RevisionCommentUpdateManyWithWhereWithoutRevisionInput | RevisionCommentUpdateManyWithWhereWithoutRevisionInput[]
    deleteMany?: RevisionCommentScalarWhereInput | RevisionCommentScalarWhereInput[]
  }

  export type UserAssetInteractionUpdateManyWithoutRevisionNestedInput = {
    create?: XOR<UserAssetInteractionCreateWithoutRevisionInput, UserAssetInteractionUncheckedCreateWithoutRevisionInput> | UserAssetInteractionCreateWithoutRevisionInput[] | UserAssetInteractionUncheckedCreateWithoutRevisionInput[]
    connectOrCreate?: UserAssetInteractionCreateOrConnectWithoutRevisionInput | UserAssetInteractionCreateOrConnectWithoutRevisionInput[]
    upsert?: UserAssetInteractionUpsertWithWhereUniqueWithoutRevisionInput | UserAssetInteractionUpsertWithWhereUniqueWithoutRevisionInput[]
    createMany?: UserAssetInteractionCreateManyRevisionInputEnvelope
    set?: UserAssetInteractionWhereUniqueInput | UserAssetInteractionWhereUniqueInput[]
    disconnect?: UserAssetInteractionWhereUniqueInput | UserAssetInteractionWhereUniqueInput[]
    delete?: UserAssetInteractionWhereUniqueInput | UserAssetInteractionWhereUniqueInput[]
    connect?: UserAssetInteractionWhereUniqueInput | UserAssetInteractionWhereUniqueInput[]
    update?: UserAssetInteractionUpdateWithWhereUniqueWithoutRevisionInput | UserAssetInteractionUpdateWithWhereUniqueWithoutRevisionInput[]
    updateMany?: UserAssetInteractionUpdateManyWithWhereWithoutRevisionInput | UserAssetInteractionUpdateManyWithWhereWithoutRevisionInput[]
    deleteMany?: UserAssetInteractionScalarWhereInput | UserAssetInteractionScalarWhereInput[]
  }

  export type AssetVoteUncheckedUpdateManyWithoutRevisionNestedInput = {
    create?: XOR<AssetVoteCreateWithoutRevisionInput, AssetVoteUncheckedCreateWithoutRevisionInput> | AssetVoteCreateWithoutRevisionInput[] | AssetVoteUncheckedCreateWithoutRevisionInput[]
    connectOrCreate?: AssetVoteCreateOrConnectWithoutRevisionInput | AssetVoteCreateOrConnectWithoutRevisionInput[]
    upsert?: AssetVoteUpsertWithWhereUniqueWithoutRevisionInput | AssetVoteUpsertWithWhereUniqueWithoutRevisionInput[]
    createMany?: AssetVoteCreateManyRevisionInputEnvelope
    set?: AssetVoteWhereUniqueInput | AssetVoteWhereUniqueInput[]
    disconnect?: AssetVoteWhereUniqueInput | AssetVoteWhereUniqueInput[]
    delete?: AssetVoteWhereUniqueInput | AssetVoteWhereUniqueInput[]
    connect?: AssetVoteWhereUniqueInput | AssetVoteWhereUniqueInput[]
    update?: AssetVoteUpdateWithWhereUniqueWithoutRevisionInput | AssetVoteUpdateWithWhereUniqueWithoutRevisionInput[]
    updateMany?: AssetVoteUpdateManyWithWhereWithoutRevisionInput | AssetVoteUpdateManyWithWhereWithoutRevisionInput[]
    deleteMany?: AssetVoteScalarWhereInput | AssetVoteScalarWhereInput[]
  }

  export type RevisionCommentUncheckedUpdateManyWithoutRevisionNestedInput = {
    create?: XOR<RevisionCommentCreateWithoutRevisionInput, RevisionCommentUncheckedCreateWithoutRevisionInput> | RevisionCommentCreateWithoutRevisionInput[] | RevisionCommentUncheckedCreateWithoutRevisionInput[]
    connectOrCreate?: RevisionCommentCreateOrConnectWithoutRevisionInput | RevisionCommentCreateOrConnectWithoutRevisionInput[]
    upsert?: RevisionCommentUpsertWithWhereUniqueWithoutRevisionInput | RevisionCommentUpsertWithWhereUniqueWithoutRevisionInput[]
    createMany?: RevisionCommentCreateManyRevisionInputEnvelope
    set?: RevisionCommentWhereUniqueInput | RevisionCommentWhereUniqueInput[]
    disconnect?: RevisionCommentWhereUniqueInput | RevisionCommentWhereUniqueInput[]
    delete?: RevisionCommentWhereUniqueInput | RevisionCommentWhereUniqueInput[]
    connect?: RevisionCommentWhereUniqueInput | RevisionCommentWhereUniqueInput[]
    update?: RevisionCommentUpdateWithWhereUniqueWithoutRevisionInput | RevisionCommentUpdateWithWhereUniqueWithoutRevisionInput[]
    updateMany?: RevisionCommentUpdateManyWithWhereWithoutRevisionInput | RevisionCommentUpdateManyWithWhereWithoutRevisionInput[]
    deleteMany?: RevisionCommentScalarWhereInput | RevisionCommentScalarWhereInput[]
  }

  export type UserAssetInteractionUncheckedUpdateManyWithoutRevisionNestedInput = {
    create?: XOR<UserAssetInteractionCreateWithoutRevisionInput, UserAssetInteractionUncheckedCreateWithoutRevisionInput> | UserAssetInteractionCreateWithoutRevisionInput[] | UserAssetInteractionUncheckedCreateWithoutRevisionInput[]
    connectOrCreate?: UserAssetInteractionCreateOrConnectWithoutRevisionInput | UserAssetInteractionCreateOrConnectWithoutRevisionInput[]
    upsert?: UserAssetInteractionUpsertWithWhereUniqueWithoutRevisionInput | UserAssetInteractionUpsertWithWhereUniqueWithoutRevisionInput[]
    createMany?: UserAssetInteractionCreateManyRevisionInputEnvelope
    set?: UserAssetInteractionWhereUniqueInput | UserAssetInteractionWhereUniqueInput[]
    disconnect?: UserAssetInteractionWhereUniqueInput | UserAssetInteractionWhereUniqueInput[]
    delete?: UserAssetInteractionWhereUniqueInput | UserAssetInteractionWhereUniqueInput[]
    connect?: UserAssetInteractionWhereUniqueInput | UserAssetInteractionWhereUniqueInput[]
    update?: UserAssetInteractionUpdateWithWhereUniqueWithoutRevisionInput | UserAssetInteractionUpdateWithWhereUniqueWithoutRevisionInput[]
    updateMany?: UserAssetInteractionUpdateManyWithWhereWithoutRevisionInput | UserAssetInteractionUpdateManyWithWhereWithoutRevisionInput[]
    deleteMany?: UserAssetInteractionScalarWhereInput | UserAssetInteractionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAssetVotesInput = {
    create?: XOR<UserCreateWithoutAssetVotesInput, UserUncheckedCreateWithoutAssetVotesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssetVotesInput
    connect?: UserWhereUniqueInput
  }

  export type AssetCreateNestedOneWithoutVotesInput = {
    create?: XOR<AssetCreateWithoutVotesInput, AssetUncheckedCreateWithoutVotesInput>
    connectOrCreate?: AssetCreateOrConnectWithoutVotesInput
    connect?: AssetWhereUniqueInput
  }

  export type AssetRevisionCreateNestedOneWithoutVotesInput = {
    create?: XOR<AssetRevisionCreateWithoutVotesInput, AssetRevisionUncheckedCreateWithoutVotesInput>
    connectOrCreate?: AssetRevisionCreateOrConnectWithoutVotesInput
    connect?: AssetRevisionWhereUniqueInput
  }

  export type EnumVoteTypeFieldUpdateOperationsInput = {
    set?: $Enums.VoteType
  }

  export type EnumVotePhaseFieldUpdateOperationsInput = {
    set?: $Enums.VotePhase
  }

  export type UserUpdateOneRequiredWithoutAssetVotesNestedInput = {
    create?: XOR<UserCreateWithoutAssetVotesInput, UserUncheckedCreateWithoutAssetVotesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssetVotesInput
    upsert?: UserUpsertWithoutAssetVotesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssetVotesInput, UserUpdateWithoutAssetVotesInput>, UserUncheckedUpdateWithoutAssetVotesInput>
  }

  export type AssetUpdateOneWithoutVotesNestedInput = {
    create?: XOR<AssetCreateWithoutVotesInput, AssetUncheckedCreateWithoutVotesInput>
    connectOrCreate?: AssetCreateOrConnectWithoutVotesInput
    upsert?: AssetUpsertWithoutVotesInput
    disconnect?: AssetWhereInput | boolean
    delete?: AssetWhereInput | boolean
    connect?: AssetWhereUniqueInput
    update?: XOR<XOR<AssetUpdateToOneWithWhereWithoutVotesInput, AssetUpdateWithoutVotesInput>, AssetUncheckedUpdateWithoutVotesInput>
  }

  export type AssetRevisionUpdateOneWithoutVotesNestedInput = {
    create?: XOR<AssetRevisionCreateWithoutVotesInput, AssetRevisionUncheckedCreateWithoutVotesInput>
    connectOrCreate?: AssetRevisionCreateOrConnectWithoutVotesInput
    upsert?: AssetRevisionUpsertWithoutVotesInput
    disconnect?: AssetRevisionWhereInput | boolean
    delete?: AssetRevisionWhereInput | boolean
    connect?: AssetRevisionWhereUniqueInput
    update?: XOR<XOR<AssetRevisionUpdateToOneWithWhereWithoutVotesInput, AssetRevisionUpdateWithoutVotesInput>, AssetRevisionUncheckedUpdateWithoutVotesInput>
  }

  export type UserCreateNestedOneWithoutAssetInteractionsInput = {
    create?: XOR<UserCreateWithoutAssetInteractionsInput, UserUncheckedCreateWithoutAssetInteractionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssetInteractionsInput
    connect?: UserWhereUniqueInput
  }

  export type AssetCreateNestedOneWithoutUserInteractionsInput = {
    create?: XOR<AssetCreateWithoutUserInteractionsInput, AssetUncheckedCreateWithoutUserInteractionsInput>
    connectOrCreate?: AssetCreateOrConnectWithoutUserInteractionsInput
    connect?: AssetWhereUniqueInput
  }

  export type AssetRevisionCreateNestedOneWithoutUserInteractionsInput = {
    create?: XOR<AssetRevisionCreateWithoutUserInteractionsInput, AssetRevisionUncheckedCreateWithoutUserInteractionsInput>
    connectOrCreate?: AssetRevisionCreateOrConnectWithoutUserInteractionsInput
    connect?: AssetRevisionWhereUniqueInput
  }

  export type GameCreateNestedOneWithoutUserInteractionsInput = {
    create?: XOR<GameCreateWithoutUserInteractionsInput, GameUncheckedCreateWithoutUserInteractionsInput>
    connectOrCreate?: GameCreateOrConnectWithoutUserInteractionsInput
    connect?: GameWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAssetInteractionsNestedInput = {
    create?: XOR<UserCreateWithoutAssetInteractionsInput, UserUncheckedCreateWithoutAssetInteractionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssetInteractionsInput
    upsert?: UserUpsertWithoutAssetInteractionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssetInteractionsInput, UserUpdateWithoutAssetInteractionsInput>, UserUncheckedUpdateWithoutAssetInteractionsInput>
  }

  export type AssetUpdateOneWithoutUserInteractionsNestedInput = {
    create?: XOR<AssetCreateWithoutUserInteractionsInput, AssetUncheckedCreateWithoutUserInteractionsInput>
    connectOrCreate?: AssetCreateOrConnectWithoutUserInteractionsInput
    upsert?: AssetUpsertWithoutUserInteractionsInput
    disconnect?: AssetWhereInput | boolean
    delete?: AssetWhereInput | boolean
    connect?: AssetWhereUniqueInput
    update?: XOR<XOR<AssetUpdateToOneWithWhereWithoutUserInteractionsInput, AssetUpdateWithoutUserInteractionsInput>, AssetUncheckedUpdateWithoutUserInteractionsInput>
  }

  export type AssetRevisionUpdateOneWithoutUserInteractionsNestedInput = {
    create?: XOR<AssetRevisionCreateWithoutUserInteractionsInput, AssetRevisionUncheckedCreateWithoutUserInteractionsInput>
    connectOrCreate?: AssetRevisionCreateOrConnectWithoutUserInteractionsInput
    upsert?: AssetRevisionUpsertWithoutUserInteractionsInput
    disconnect?: AssetRevisionWhereInput | boolean
    delete?: AssetRevisionWhereInput | boolean
    connect?: AssetRevisionWhereUniqueInput
    update?: XOR<XOR<AssetRevisionUpdateToOneWithWhereWithoutUserInteractionsInput, AssetRevisionUpdateWithoutUserInteractionsInput>, AssetRevisionUncheckedUpdateWithoutUserInteractionsInput>
  }

  export type GameUpdateOneWithoutUserInteractionsNestedInput = {
    create?: XOR<GameCreateWithoutUserInteractionsInput, GameUncheckedCreateWithoutUserInteractionsInput>
    connectOrCreate?: GameCreateOrConnectWithoutUserInteractionsInput
    upsert?: GameUpsertWithoutUserInteractionsInput
    disconnect?: GameWhereInput | boolean
    delete?: GameWhereInput | boolean
    connect?: GameWhereUniqueInput
    update?: XOR<XOR<GameUpdateToOneWithWhereWithoutUserInteractionsInput, GameUpdateWithoutUserInteractionsInput>, GameUncheckedUpdateWithoutUserInteractionsInput>
  }

  export type AssetCreateNestedOneWithoutCommentsInput = {
    create?: XOR<AssetCreateWithoutCommentsInput, AssetUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: AssetCreateOrConnectWithoutCommentsInput
    connect?: AssetWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAssetCommentsInput = {
    create?: XOR<UserCreateWithoutAssetCommentsInput, UserUncheckedCreateWithoutAssetCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssetCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type AssetUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<AssetCreateWithoutCommentsInput, AssetUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: AssetCreateOrConnectWithoutCommentsInput
    upsert?: AssetUpsertWithoutCommentsInput
    connect?: AssetWhereUniqueInput
    update?: XOR<XOR<AssetUpdateToOneWithWhereWithoutCommentsInput, AssetUpdateWithoutCommentsInput>, AssetUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateOneRequiredWithoutAssetCommentsNestedInput = {
    create?: XOR<UserCreateWithoutAssetCommentsInput, UserUncheckedCreateWithoutAssetCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssetCommentsInput
    upsert?: UserUpsertWithoutAssetCommentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssetCommentsInput, UserUpdateWithoutAssetCommentsInput>, UserUncheckedUpdateWithoutAssetCommentsInput>
  }

  export type AssetRevisionCreateNestedOneWithoutCommentsInput = {
    create?: XOR<AssetRevisionCreateWithoutCommentsInput, AssetRevisionUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: AssetRevisionCreateOrConnectWithoutCommentsInput
    connect?: AssetRevisionWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutRevisionCommentsInput = {
    create?: XOR<UserCreateWithoutRevisionCommentsInput, UserUncheckedCreateWithoutRevisionCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRevisionCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type AssetRevisionUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<AssetRevisionCreateWithoutCommentsInput, AssetRevisionUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: AssetRevisionCreateOrConnectWithoutCommentsInput
    upsert?: AssetRevisionUpsertWithoutCommentsInput
    connect?: AssetRevisionWhereUniqueInput
    update?: XOR<XOR<AssetRevisionUpdateToOneWithWhereWithoutCommentsInput, AssetRevisionUpdateWithoutCommentsInput>, AssetRevisionUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateOneRequiredWithoutRevisionCommentsNestedInput = {
    create?: XOR<UserCreateWithoutRevisionCommentsInput, UserUncheckedCreateWithoutRevisionCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRevisionCommentsInput
    upsert?: UserUpsertWithoutRevisionCommentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRevisionCommentsInput, UserUpdateWithoutRevisionCommentsInput>, UserUncheckedUpdateWithoutRevisionCommentsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumAssetStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AssetStatus | EnumAssetStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AssetStatus[] | ListEnumAssetStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssetStatus[] | ListEnumAssetStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAssetStatusFilter<$PrismaModel> | $Enums.AssetStatus
  }

  export type NestedEnumAssetStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AssetStatus | EnumAssetStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AssetStatus[] | ListEnumAssetStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssetStatus[] | ListEnumAssetStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAssetStatusWithAggregatesFilter<$PrismaModel> | $Enums.AssetStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAssetStatusFilter<$PrismaModel>
    _max?: NestedEnumAssetStatusFilter<$PrismaModel>
  }

  export type NestedEnumVoteTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.VoteType | EnumVoteTypeFieldRefInput<$PrismaModel>
    in?: $Enums.VoteType[] | ListEnumVoteTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.VoteType[] | ListEnumVoteTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumVoteTypeFilter<$PrismaModel> | $Enums.VoteType
  }

  export type NestedEnumVotePhaseFilter<$PrismaModel = never> = {
    equals?: $Enums.VotePhase | EnumVotePhaseFieldRefInput<$PrismaModel>
    in?: $Enums.VotePhase[] | ListEnumVotePhaseFieldRefInput<$PrismaModel>
    notIn?: $Enums.VotePhase[] | ListEnumVotePhaseFieldRefInput<$PrismaModel>
    not?: NestedEnumVotePhaseFilter<$PrismaModel> | $Enums.VotePhase
  }

  export type NestedEnumVoteTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.VoteType | EnumVoteTypeFieldRefInput<$PrismaModel>
    in?: $Enums.VoteType[] | ListEnumVoteTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.VoteType[] | ListEnumVoteTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumVoteTypeWithAggregatesFilter<$PrismaModel> | $Enums.VoteType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumVoteTypeFilter<$PrismaModel>
    _max?: NestedEnumVoteTypeFilter<$PrismaModel>
  }

  export type NestedEnumVotePhaseWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.VotePhase | EnumVotePhaseFieldRefInput<$PrismaModel>
    in?: $Enums.VotePhase[] | ListEnumVotePhaseFieldRefInput<$PrismaModel>
    notIn?: $Enums.VotePhase[] | ListEnumVotePhaseFieldRefInput<$PrismaModel>
    not?: NestedEnumVotePhaseWithAggregatesFilter<$PrismaModel> | $Enums.VotePhase
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumVotePhaseFilter<$PrismaModel>
    _max?: NestedEnumVotePhaseFilter<$PrismaModel>
  }

  export type UserCreateWithoutTeamInput = {
    firstName: string
    lastName: string
    email: string
    passwordHash: string
    avatar?: number
    customAvatar?: string | null
    role: $Enums.UserRole
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    inviteCode?: InviteCodeCreateNestedOneWithoutUsersInput
    gameOwners?: GameOwnerCreateNestedManyWithoutUserInput
    uploadedAssets?: AssetCreateNestedManyWithoutUploaderInput
    assetRevisions?: AssetRevisionCreateNestedManyWithoutUploaderInput
    assetVotes?: AssetVoteCreateNestedManyWithoutUserInput
    assetComments?: AssetCommentCreateNestedManyWithoutUserInput
    revisionComments?: RevisionCommentCreateNestedManyWithoutUserInput
    assetInteractions?: UserAssetInteractionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTeamInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    passwordHash: string
    avatar?: number
    customAvatar?: string | null
    role: $Enums.UserRole
    isActive?: boolean
    lastLogin?: Date | string | null
    invite_code_id?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    gameOwners?: GameOwnerUncheckedCreateNestedManyWithoutUserInput
    uploadedAssets?: AssetUncheckedCreateNestedManyWithoutUploaderInput
    assetRevisions?: AssetRevisionUncheckedCreateNestedManyWithoutUploaderInput
    assetVotes?: AssetVoteUncheckedCreateNestedManyWithoutUserInput
    assetComments?: AssetCommentUncheckedCreateNestedManyWithoutUserInput
    revisionComments?: RevisionCommentUncheckedCreateNestedManyWithoutUserInput
    assetInteractions?: UserAssetInteractionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTeamInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTeamInput, UserUncheckedCreateWithoutTeamInput>
  }

  export type UserCreateManyTeamInputEnvelope = {
    data: UserCreateManyTeamInput | UserCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type GameTeamCreateWithoutTeamInput = {
    startedAt?: Date | string
    endedAt?: Date | string | null
    game: GameCreateNestedOneWithoutGameTeamsInput
  }

  export type GameTeamUncheckedCreateWithoutTeamInput = {
    id?: number
    game_id: number
    startedAt?: Date | string
    endedAt?: Date | string | null
  }

  export type GameTeamCreateOrConnectWithoutTeamInput = {
    where: GameTeamWhereUniqueInput
    create: XOR<GameTeamCreateWithoutTeamInput, GameTeamUncheckedCreateWithoutTeamInput>
  }

  export type GameTeamCreateManyTeamInputEnvelope = {
    data: GameTeamCreateManyTeamInput | GameTeamCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type InviteCodeCreateWithoutTeamInput = {
    code: string
    role: $Enums.UserRole
    description?: string | null
    ownedGameIds?: InviteCodeCreateownedGameIdsInput | number[]
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutInviteCodeInput
  }

  export type InviteCodeUncheckedCreateWithoutTeamInput = {
    id?: number
    code: string
    role: $Enums.UserRole
    description?: string | null
    ownedGameIds?: InviteCodeCreateownedGameIdsInput | number[]
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutInviteCodeInput
  }

  export type InviteCodeCreateOrConnectWithoutTeamInput = {
    where: InviteCodeWhereUniqueInput
    create: XOR<InviteCodeCreateWithoutTeamInput, InviteCodeUncheckedCreateWithoutTeamInput>
  }

  export type InviteCodeCreateManyTeamInputEnvelope = {
    data: InviteCodeCreateManyTeamInput | InviteCodeCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type AssetFinalReviewTeamCreateWithoutTeamInput = {
    createdAt?: Date | string
    asset: AssetCreateNestedOneWithoutFinalReviewTeamsInput
  }

  export type AssetFinalReviewTeamUncheckedCreateWithoutTeamInput = {
    id?: number
    asset_id: number
    createdAt?: Date | string
  }

  export type AssetFinalReviewTeamCreateOrConnectWithoutTeamInput = {
    where: AssetFinalReviewTeamWhereUniqueInput
    create: XOR<AssetFinalReviewTeamCreateWithoutTeamInput, AssetFinalReviewTeamUncheckedCreateWithoutTeamInput>
  }

  export type AssetFinalReviewTeamCreateManyTeamInputEnvelope = {
    data: AssetFinalReviewTeamCreateManyTeamInput | AssetFinalReviewTeamCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutTeamInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutTeamInput, UserUncheckedUpdateWithoutTeamInput>
    create: XOR<UserCreateWithoutTeamInput, UserUncheckedCreateWithoutTeamInput>
  }

  export type UserUpdateWithWhereUniqueWithoutTeamInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutTeamInput, UserUncheckedUpdateWithoutTeamInput>
  }

  export type UserUpdateManyWithWhereWithoutTeamInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutTeamInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: IntFilter<"User"> | number
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    avatar?: IntFilter<"User"> | number
    customAvatar?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    isActive?: BoolFilter<"User"> | boolean
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    team_id?: IntFilter<"User"> | number
    invite_code_id?: IntNullableFilter<"User"> | number | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type GameTeamUpsertWithWhereUniqueWithoutTeamInput = {
    where: GameTeamWhereUniqueInput
    update: XOR<GameTeamUpdateWithoutTeamInput, GameTeamUncheckedUpdateWithoutTeamInput>
    create: XOR<GameTeamCreateWithoutTeamInput, GameTeamUncheckedCreateWithoutTeamInput>
  }

  export type GameTeamUpdateWithWhereUniqueWithoutTeamInput = {
    where: GameTeamWhereUniqueInput
    data: XOR<GameTeamUpdateWithoutTeamInput, GameTeamUncheckedUpdateWithoutTeamInput>
  }

  export type GameTeamUpdateManyWithWhereWithoutTeamInput = {
    where: GameTeamScalarWhereInput
    data: XOR<GameTeamUpdateManyMutationInput, GameTeamUncheckedUpdateManyWithoutTeamInput>
  }

  export type GameTeamScalarWhereInput = {
    AND?: GameTeamScalarWhereInput | GameTeamScalarWhereInput[]
    OR?: GameTeamScalarWhereInput[]
    NOT?: GameTeamScalarWhereInput | GameTeamScalarWhereInput[]
    id?: IntFilter<"GameTeam"> | number
    game_id?: IntFilter<"GameTeam"> | number
    team_id?: IntFilter<"GameTeam"> | number
    startedAt?: DateTimeFilter<"GameTeam"> | Date | string
    endedAt?: DateTimeNullableFilter<"GameTeam"> | Date | string | null
  }

  export type InviteCodeUpsertWithWhereUniqueWithoutTeamInput = {
    where: InviteCodeWhereUniqueInput
    update: XOR<InviteCodeUpdateWithoutTeamInput, InviteCodeUncheckedUpdateWithoutTeamInput>
    create: XOR<InviteCodeCreateWithoutTeamInput, InviteCodeUncheckedCreateWithoutTeamInput>
  }

  export type InviteCodeUpdateWithWhereUniqueWithoutTeamInput = {
    where: InviteCodeWhereUniqueInput
    data: XOR<InviteCodeUpdateWithoutTeamInput, InviteCodeUncheckedUpdateWithoutTeamInput>
  }

  export type InviteCodeUpdateManyWithWhereWithoutTeamInput = {
    where: InviteCodeScalarWhereInput
    data: XOR<InviteCodeUpdateManyMutationInput, InviteCodeUncheckedUpdateManyWithoutTeamInput>
  }

  export type InviteCodeScalarWhereInput = {
    AND?: InviteCodeScalarWhereInput | InviteCodeScalarWhereInput[]
    OR?: InviteCodeScalarWhereInput[]
    NOT?: InviteCodeScalarWhereInput | InviteCodeScalarWhereInput[]
    id?: IntFilter<"InviteCode"> | number
    code?: StringFilter<"InviteCode"> | string
    team_id?: IntFilter<"InviteCode"> | number
    role?: EnumUserRoleFilter<"InviteCode"> | $Enums.UserRole
    description?: StringNullableFilter<"InviteCode"> | string | null
    ownedGameIds?: IntNullableListFilter<"InviteCode">
    createdAt?: DateTimeFilter<"InviteCode"> | Date | string
    updatedAt?: DateTimeFilter<"InviteCode"> | Date | string
  }

  export type AssetFinalReviewTeamUpsertWithWhereUniqueWithoutTeamInput = {
    where: AssetFinalReviewTeamWhereUniqueInput
    update: XOR<AssetFinalReviewTeamUpdateWithoutTeamInput, AssetFinalReviewTeamUncheckedUpdateWithoutTeamInput>
    create: XOR<AssetFinalReviewTeamCreateWithoutTeamInput, AssetFinalReviewTeamUncheckedCreateWithoutTeamInput>
  }

  export type AssetFinalReviewTeamUpdateWithWhereUniqueWithoutTeamInput = {
    where: AssetFinalReviewTeamWhereUniqueInput
    data: XOR<AssetFinalReviewTeamUpdateWithoutTeamInput, AssetFinalReviewTeamUncheckedUpdateWithoutTeamInput>
  }

  export type AssetFinalReviewTeamUpdateManyWithWhereWithoutTeamInput = {
    where: AssetFinalReviewTeamScalarWhereInput
    data: XOR<AssetFinalReviewTeamUpdateManyMutationInput, AssetFinalReviewTeamUncheckedUpdateManyWithoutTeamInput>
  }

  export type AssetFinalReviewTeamScalarWhereInput = {
    AND?: AssetFinalReviewTeamScalarWhereInput | AssetFinalReviewTeamScalarWhereInput[]
    OR?: AssetFinalReviewTeamScalarWhereInput[]
    NOT?: AssetFinalReviewTeamScalarWhereInput | AssetFinalReviewTeamScalarWhereInput[]
    id?: IntFilter<"AssetFinalReviewTeam"> | number
    asset_id?: IntFilter<"AssetFinalReviewTeam"> | number
    team_id?: IntFilter<"AssetFinalReviewTeam"> | number
    createdAt?: DateTimeFilter<"AssetFinalReviewTeam"> | Date | string
  }

  export type GameTeamCreateWithoutGameInput = {
    startedAt?: Date | string
    endedAt?: Date | string | null
    team: TeamCreateNestedOneWithoutGameTeamsInput
  }

  export type GameTeamUncheckedCreateWithoutGameInput = {
    id?: number
    team_id: number
    startedAt?: Date | string
    endedAt?: Date | string | null
  }

  export type GameTeamCreateOrConnectWithoutGameInput = {
    where: GameTeamWhereUniqueInput
    create: XOR<GameTeamCreateWithoutGameInput, GameTeamUncheckedCreateWithoutGameInput>
  }

  export type GameTeamCreateManyGameInputEnvelope = {
    data: GameTeamCreateManyGameInput | GameTeamCreateManyGameInput[]
    skipDuplicates?: boolean
  }

  export type GameOwnerCreateWithoutGameInput = {
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutGameOwnersInput
  }

  export type GameOwnerUncheckedCreateWithoutGameInput = {
    id?: number
    user_id: number
    createdAt?: Date | string
  }

  export type GameOwnerCreateOrConnectWithoutGameInput = {
    where: GameOwnerWhereUniqueInput
    create: XOR<GameOwnerCreateWithoutGameInput, GameOwnerUncheckedCreateWithoutGameInput>
  }

  export type GameOwnerCreateManyGameInputEnvelope = {
    data: GameOwnerCreateManyGameInput | GameOwnerCreateManyGameInput[]
    skipDuplicates?: boolean
  }

  export type AssetCreateWithoutGameInput = {
    name: string
    imageUrl: string
    category: string
    phase1Approvals?: number
    phase1Rejections?: number
    phase1TotalVotes?: number
    phase1CompletedAt?: Date | string | null
    phase2Approvals?: number
    phase2Rejections?: number
    phase2TotalVotes?: number
    phase2CompletedAt?: Date | string | null
    status?: $Enums.AssetStatus
    notificationSent?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    uploader: UserCreateNestedOneWithoutUploadedAssetsInput
    revisions?: AssetRevisionCreateNestedManyWithoutAssetInput
    votes?: AssetVoteCreateNestedManyWithoutAssetInput
    comments?: AssetCommentCreateNestedManyWithoutAssetInput
    userInteractions?: UserAssetInteractionCreateNestedManyWithoutAssetInput
    finalReviewTeams?: AssetFinalReviewTeamCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutGameInput = {
    id?: number
    name: string
    imageUrl: string
    category: string
    uploader_id: number
    phase1Approvals?: number
    phase1Rejections?: number
    phase1TotalVotes?: number
    phase1CompletedAt?: Date | string | null
    phase2Approvals?: number
    phase2Rejections?: number
    phase2TotalVotes?: number
    phase2CompletedAt?: Date | string | null
    status?: $Enums.AssetStatus
    notificationSent?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    revisions?: AssetRevisionUncheckedCreateNestedManyWithoutAssetInput
    votes?: AssetVoteUncheckedCreateNestedManyWithoutAssetInput
    comments?: AssetCommentUncheckedCreateNestedManyWithoutAssetInput
    userInteractions?: UserAssetInteractionUncheckedCreateNestedManyWithoutAssetInput
    finalReviewTeams?: AssetFinalReviewTeamUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutGameInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutGameInput, AssetUncheckedCreateWithoutGameInput>
  }

  export type AssetCreateManyGameInputEnvelope = {
    data: AssetCreateManyGameInput | AssetCreateManyGameInput[]
    skipDuplicates?: boolean
  }

  export type UserAssetInteractionCreateWithoutGameInput = {
    hasVoted?: boolean
    hasCommented?: boolean
    dismissedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAssetInteractionsInput
    asset?: AssetCreateNestedOneWithoutUserInteractionsInput
    revision?: AssetRevisionCreateNestedOneWithoutUserInteractionsInput
  }

  export type UserAssetInteractionUncheckedCreateWithoutGameInput = {
    id?: number
    user_id: number
    asset_id?: number | null
    asset_revision_id?: number | null
    hasVoted?: boolean
    hasCommented?: boolean
    dismissedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserAssetInteractionCreateOrConnectWithoutGameInput = {
    where: UserAssetInteractionWhereUniqueInput
    create: XOR<UserAssetInteractionCreateWithoutGameInput, UserAssetInteractionUncheckedCreateWithoutGameInput>
  }

  export type UserAssetInteractionCreateManyGameInputEnvelope = {
    data: UserAssetInteractionCreateManyGameInput | UserAssetInteractionCreateManyGameInput[]
    skipDuplicates?: boolean
  }

  export type GameTeamUpsertWithWhereUniqueWithoutGameInput = {
    where: GameTeamWhereUniqueInput
    update: XOR<GameTeamUpdateWithoutGameInput, GameTeamUncheckedUpdateWithoutGameInput>
    create: XOR<GameTeamCreateWithoutGameInput, GameTeamUncheckedCreateWithoutGameInput>
  }

  export type GameTeamUpdateWithWhereUniqueWithoutGameInput = {
    where: GameTeamWhereUniqueInput
    data: XOR<GameTeamUpdateWithoutGameInput, GameTeamUncheckedUpdateWithoutGameInput>
  }

  export type GameTeamUpdateManyWithWhereWithoutGameInput = {
    where: GameTeamScalarWhereInput
    data: XOR<GameTeamUpdateManyMutationInput, GameTeamUncheckedUpdateManyWithoutGameInput>
  }

  export type GameOwnerUpsertWithWhereUniqueWithoutGameInput = {
    where: GameOwnerWhereUniqueInput
    update: XOR<GameOwnerUpdateWithoutGameInput, GameOwnerUncheckedUpdateWithoutGameInput>
    create: XOR<GameOwnerCreateWithoutGameInput, GameOwnerUncheckedCreateWithoutGameInput>
  }

  export type GameOwnerUpdateWithWhereUniqueWithoutGameInput = {
    where: GameOwnerWhereUniqueInput
    data: XOR<GameOwnerUpdateWithoutGameInput, GameOwnerUncheckedUpdateWithoutGameInput>
  }

  export type GameOwnerUpdateManyWithWhereWithoutGameInput = {
    where: GameOwnerScalarWhereInput
    data: XOR<GameOwnerUpdateManyMutationInput, GameOwnerUncheckedUpdateManyWithoutGameInput>
  }

  export type GameOwnerScalarWhereInput = {
    AND?: GameOwnerScalarWhereInput | GameOwnerScalarWhereInput[]
    OR?: GameOwnerScalarWhereInput[]
    NOT?: GameOwnerScalarWhereInput | GameOwnerScalarWhereInput[]
    id?: IntFilter<"GameOwner"> | number
    game_id?: IntFilter<"GameOwner"> | number
    user_id?: IntFilter<"GameOwner"> | number
    createdAt?: DateTimeFilter<"GameOwner"> | Date | string
  }

  export type AssetUpsertWithWhereUniqueWithoutGameInput = {
    where: AssetWhereUniqueInput
    update: XOR<AssetUpdateWithoutGameInput, AssetUncheckedUpdateWithoutGameInput>
    create: XOR<AssetCreateWithoutGameInput, AssetUncheckedCreateWithoutGameInput>
  }

  export type AssetUpdateWithWhereUniqueWithoutGameInput = {
    where: AssetWhereUniqueInput
    data: XOR<AssetUpdateWithoutGameInput, AssetUncheckedUpdateWithoutGameInput>
  }

  export type AssetUpdateManyWithWhereWithoutGameInput = {
    where: AssetScalarWhereInput
    data: XOR<AssetUpdateManyMutationInput, AssetUncheckedUpdateManyWithoutGameInput>
  }

  export type AssetScalarWhereInput = {
    AND?: AssetScalarWhereInput | AssetScalarWhereInput[]
    OR?: AssetScalarWhereInput[]
    NOT?: AssetScalarWhereInput | AssetScalarWhereInput[]
    id?: IntFilter<"Asset"> | number
    name?: StringFilter<"Asset"> | string
    imageUrl?: StringFilter<"Asset"> | string
    category?: StringFilter<"Asset"> | string
    game_id?: IntFilter<"Asset"> | number
    uploader_id?: IntFilter<"Asset"> | number
    phase1Approvals?: IntFilter<"Asset"> | number
    phase1Rejections?: IntFilter<"Asset"> | number
    phase1TotalVotes?: IntFilter<"Asset"> | number
    phase1CompletedAt?: DateTimeNullableFilter<"Asset"> | Date | string | null
    phase2Approvals?: IntFilter<"Asset"> | number
    phase2Rejections?: IntFilter<"Asset"> | number
    phase2TotalVotes?: IntFilter<"Asset"> | number
    phase2CompletedAt?: DateTimeNullableFilter<"Asset"> | Date | string | null
    status?: EnumAssetStatusFilter<"Asset"> | $Enums.AssetStatus
    notificationSent?: BoolFilter<"Asset"> | boolean
    archivedAt?: DateTimeNullableFilter<"Asset"> | Date | string | null
    createdAt?: DateTimeFilter<"Asset"> | Date | string
    updatedAt?: DateTimeFilter<"Asset"> | Date | string
  }

  export type UserAssetInteractionUpsertWithWhereUniqueWithoutGameInput = {
    where: UserAssetInteractionWhereUniqueInput
    update: XOR<UserAssetInteractionUpdateWithoutGameInput, UserAssetInteractionUncheckedUpdateWithoutGameInput>
    create: XOR<UserAssetInteractionCreateWithoutGameInput, UserAssetInteractionUncheckedCreateWithoutGameInput>
  }

  export type UserAssetInteractionUpdateWithWhereUniqueWithoutGameInput = {
    where: UserAssetInteractionWhereUniqueInput
    data: XOR<UserAssetInteractionUpdateWithoutGameInput, UserAssetInteractionUncheckedUpdateWithoutGameInput>
  }

  export type UserAssetInteractionUpdateManyWithWhereWithoutGameInput = {
    where: UserAssetInteractionScalarWhereInput
    data: XOR<UserAssetInteractionUpdateManyMutationInput, UserAssetInteractionUncheckedUpdateManyWithoutGameInput>
  }

  export type UserAssetInteractionScalarWhereInput = {
    AND?: UserAssetInteractionScalarWhereInput | UserAssetInteractionScalarWhereInput[]
    OR?: UserAssetInteractionScalarWhereInput[]
    NOT?: UserAssetInteractionScalarWhereInput | UserAssetInteractionScalarWhereInput[]
    id?: IntFilter<"UserAssetInteraction"> | number
    user_id?: IntFilter<"UserAssetInteraction"> | number
    asset_id?: IntNullableFilter<"UserAssetInteraction"> | number | null
    asset_revision_id?: IntNullableFilter<"UserAssetInteraction"> | number | null
    hasVoted?: BoolFilter<"UserAssetInteraction"> | boolean
    hasCommented?: BoolFilter<"UserAssetInteraction"> | boolean
    dismissedAt?: DateTimeNullableFilter<"UserAssetInteraction"> | Date | string | null
    createdAt?: DateTimeFilter<"UserAssetInteraction"> | Date | string
    updatedAt?: DateTimeFilter<"UserAssetInteraction"> | Date | string
    gameId?: IntNullableFilter<"UserAssetInteraction"> | number | null
  }

  export type GameCreateWithoutGameTeamsInput = {
    name: string
    assetCategories?: GameCreateassetCategoriesInput | string[]
    eligiblePhase1Voters?: number
    eligiblePhase2Voters?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    gameOwners?: GameOwnerCreateNestedManyWithoutGameInput
    assets?: AssetCreateNestedManyWithoutGameInput
    userInteractions?: UserAssetInteractionCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutGameTeamsInput = {
    id?: number
    name: string
    assetCategories?: GameCreateassetCategoriesInput | string[]
    eligiblePhase1Voters?: number
    eligiblePhase2Voters?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    gameOwners?: GameOwnerUncheckedCreateNestedManyWithoutGameInput
    assets?: AssetUncheckedCreateNestedManyWithoutGameInput
    userInteractions?: UserAssetInteractionUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutGameTeamsInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutGameTeamsInput, GameUncheckedCreateWithoutGameTeamsInput>
  }

  export type TeamCreateWithoutGameTeamsInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutTeamInput
    inviteCodes?: InviteCodeCreateNestedManyWithoutTeamInput
    finalReviewAssets?: AssetFinalReviewTeamCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutGameTeamsInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutTeamInput
    inviteCodes?: InviteCodeUncheckedCreateNestedManyWithoutTeamInput
    finalReviewAssets?: AssetFinalReviewTeamUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutGameTeamsInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutGameTeamsInput, TeamUncheckedCreateWithoutGameTeamsInput>
  }

  export type GameUpsertWithoutGameTeamsInput = {
    update: XOR<GameUpdateWithoutGameTeamsInput, GameUncheckedUpdateWithoutGameTeamsInput>
    create: XOR<GameCreateWithoutGameTeamsInput, GameUncheckedCreateWithoutGameTeamsInput>
    where?: GameWhereInput
  }

  export type GameUpdateToOneWithWhereWithoutGameTeamsInput = {
    where?: GameWhereInput
    data: XOR<GameUpdateWithoutGameTeamsInput, GameUncheckedUpdateWithoutGameTeamsInput>
  }

  export type GameUpdateWithoutGameTeamsInput = {
    name?: StringFieldUpdateOperationsInput | string
    assetCategories?: GameUpdateassetCategoriesInput | string[]
    eligiblePhase1Voters?: IntFieldUpdateOperationsInput | number
    eligiblePhase2Voters?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameOwners?: GameOwnerUpdateManyWithoutGameNestedInput
    assets?: AssetUpdateManyWithoutGameNestedInput
    userInteractions?: UserAssetInteractionUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutGameTeamsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    assetCategories?: GameUpdateassetCategoriesInput | string[]
    eligiblePhase1Voters?: IntFieldUpdateOperationsInput | number
    eligiblePhase2Voters?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameOwners?: GameOwnerUncheckedUpdateManyWithoutGameNestedInput
    assets?: AssetUncheckedUpdateManyWithoutGameNestedInput
    userInteractions?: UserAssetInteractionUncheckedUpdateManyWithoutGameNestedInput
  }

  export type TeamUpsertWithoutGameTeamsInput = {
    update: XOR<TeamUpdateWithoutGameTeamsInput, TeamUncheckedUpdateWithoutGameTeamsInput>
    create: XOR<TeamCreateWithoutGameTeamsInput, TeamUncheckedCreateWithoutGameTeamsInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutGameTeamsInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutGameTeamsInput, TeamUncheckedUpdateWithoutGameTeamsInput>
  }

  export type TeamUpdateWithoutGameTeamsInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutTeamNestedInput
    inviteCodes?: InviteCodeUpdateManyWithoutTeamNestedInput
    finalReviewAssets?: AssetFinalReviewTeamUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutGameTeamsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutTeamNestedInput
    inviteCodes?: InviteCodeUncheckedUpdateManyWithoutTeamNestedInput
    finalReviewAssets?: AssetFinalReviewTeamUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type TeamCreateWithoutInviteCodesInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutTeamInput
    gameTeams?: GameTeamCreateNestedManyWithoutTeamInput
    finalReviewAssets?: AssetFinalReviewTeamCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutInviteCodesInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutTeamInput
    gameTeams?: GameTeamUncheckedCreateNestedManyWithoutTeamInput
    finalReviewAssets?: AssetFinalReviewTeamUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutInviteCodesInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutInviteCodesInput, TeamUncheckedCreateWithoutInviteCodesInput>
  }

  export type UserCreateWithoutInviteCodeInput = {
    firstName: string
    lastName: string
    email: string
    passwordHash: string
    avatar?: number
    customAvatar?: string | null
    role: $Enums.UserRole
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    team: TeamCreateNestedOneWithoutUsersInput
    gameOwners?: GameOwnerCreateNestedManyWithoutUserInput
    uploadedAssets?: AssetCreateNestedManyWithoutUploaderInput
    assetRevisions?: AssetRevisionCreateNestedManyWithoutUploaderInput
    assetVotes?: AssetVoteCreateNestedManyWithoutUserInput
    assetComments?: AssetCommentCreateNestedManyWithoutUserInput
    revisionComments?: RevisionCommentCreateNestedManyWithoutUserInput
    assetInteractions?: UserAssetInteractionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutInviteCodeInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    passwordHash: string
    avatar?: number
    customAvatar?: string | null
    role: $Enums.UserRole
    isActive?: boolean
    lastLogin?: Date | string | null
    team_id: number
    createdAt?: Date | string
    updatedAt?: Date | string
    gameOwners?: GameOwnerUncheckedCreateNestedManyWithoutUserInput
    uploadedAssets?: AssetUncheckedCreateNestedManyWithoutUploaderInput
    assetRevisions?: AssetRevisionUncheckedCreateNestedManyWithoutUploaderInput
    assetVotes?: AssetVoteUncheckedCreateNestedManyWithoutUserInput
    assetComments?: AssetCommentUncheckedCreateNestedManyWithoutUserInput
    revisionComments?: RevisionCommentUncheckedCreateNestedManyWithoutUserInput
    assetInteractions?: UserAssetInteractionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutInviteCodeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInviteCodeInput, UserUncheckedCreateWithoutInviteCodeInput>
  }

  export type UserCreateManyInviteCodeInputEnvelope = {
    data: UserCreateManyInviteCodeInput | UserCreateManyInviteCodeInput[]
    skipDuplicates?: boolean
  }

  export type TeamUpsertWithoutInviteCodesInput = {
    update: XOR<TeamUpdateWithoutInviteCodesInput, TeamUncheckedUpdateWithoutInviteCodesInput>
    create: XOR<TeamCreateWithoutInviteCodesInput, TeamUncheckedCreateWithoutInviteCodesInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutInviteCodesInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutInviteCodesInput, TeamUncheckedUpdateWithoutInviteCodesInput>
  }

  export type TeamUpdateWithoutInviteCodesInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutTeamNestedInput
    gameTeams?: GameTeamUpdateManyWithoutTeamNestedInput
    finalReviewAssets?: AssetFinalReviewTeamUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutInviteCodesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutTeamNestedInput
    gameTeams?: GameTeamUncheckedUpdateManyWithoutTeamNestedInput
    finalReviewAssets?: AssetFinalReviewTeamUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutInviteCodeInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutInviteCodeInput, UserUncheckedUpdateWithoutInviteCodeInput>
    create: XOR<UserCreateWithoutInviteCodeInput, UserUncheckedCreateWithoutInviteCodeInput>
  }

  export type UserUpdateWithWhereUniqueWithoutInviteCodeInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutInviteCodeInput, UserUncheckedUpdateWithoutInviteCodeInput>
  }

  export type UserUpdateManyWithWhereWithoutInviteCodeInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutInviteCodeInput>
  }

  export type TeamCreateWithoutUsersInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    gameTeams?: GameTeamCreateNestedManyWithoutTeamInput
    inviteCodes?: InviteCodeCreateNestedManyWithoutTeamInput
    finalReviewAssets?: AssetFinalReviewTeamCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    gameTeams?: GameTeamUncheckedCreateNestedManyWithoutTeamInput
    inviteCodes?: InviteCodeUncheckedCreateNestedManyWithoutTeamInput
    finalReviewAssets?: AssetFinalReviewTeamUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutUsersInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutUsersInput, TeamUncheckedCreateWithoutUsersInput>
  }

  export type InviteCodeCreateWithoutUsersInput = {
    code: string
    role: $Enums.UserRole
    description?: string | null
    ownedGameIds?: InviteCodeCreateownedGameIdsInput | number[]
    createdAt?: Date | string
    updatedAt?: Date | string
    team: TeamCreateNestedOneWithoutInviteCodesInput
  }

  export type InviteCodeUncheckedCreateWithoutUsersInput = {
    id?: number
    code: string
    team_id: number
    role: $Enums.UserRole
    description?: string | null
    ownedGameIds?: InviteCodeCreateownedGameIdsInput | number[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InviteCodeCreateOrConnectWithoutUsersInput = {
    where: InviteCodeWhereUniqueInput
    create: XOR<InviteCodeCreateWithoutUsersInput, InviteCodeUncheckedCreateWithoutUsersInput>
  }

  export type GameOwnerCreateWithoutUserInput = {
    createdAt?: Date | string
    game: GameCreateNestedOneWithoutGameOwnersInput
  }

  export type GameOwnerUncheckedCreateWithoutUserInput = {
    id?: number
    game_id: number
    createdAt?: Date | string
  }

  export type GameOwnerCreateOrConnectWithoutUserInput = {
    where: GameOwnerWhereUniqueInput
    create: XOR<GameOwnerCreateWithoutUserInput, GameOwnerUncheckedCreateWithoutUserInput>
  }

  export type GameOwnerCreateManyUserInputEnvelope = {
    data: GameOwnerCreateManyUserInput | GameOwnerCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AssetCreateWithoutUploaderInput = {
    name: string
    imageUrl: string
    category: string
    phase1Approvals?: number
    phase1Rejections?: number
    phase1TotalVotes?: number
    phase1CompletedAt?: Date | string | null
    phase2Approvals?: number
    phase2Rejections?: number
    phase2TotalVotes?: number
    phase2CompletedAt?: Date | string | null
    status?: $Enums.AssetStatus
    notificationSent?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    game: GameCreateNestedOneWithoutAssetsInput
    revisions?: AssetRevisionCreateNestedManyWithoutAssetInput
    votes?: AssetVoteCreateNestedManyWithoutAssetInput
    comments?: AssetCommentCreateNestedManyWithoutAssetInput
    userInteractions?: UserAssetInteractionCreateNestedManyWithoutAssetInput
    finalReviewTeams?: AssetFinalReviewTeamCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutUploaderInput = {
    id?: number
    name: string
    imageUrl: string
    category: string
    game_id: number
    phase1Approvals?: number
    phase1Rejections?: number
    phase1TotalVotes?: number
    phase1CompletedAt?: Date | string | null
    phase2Approvals?: number
    phase2Rejections?: number
    phase2TotalVotes?: number
    phase2CompletedAt?: Date | string | null
    status?: $Enums.AssetStatus
    notificationSent?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    revisions?: AssetRevisionUncheckedCreateNestedManyWithoutAssetInput
    votes?: AssetVoteUncheckedCreateNestedManyWithoutAssetInput
    comments?: AssetCommentUncheckedCreateNestedManyWithoutAssetInput
    userInteractions?: UserAssetInteractionUncheckedCreateNestedManyWithoutAssetInput
    finalReviewTeams?: AssetFinalReviewTeamUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutUploaderInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutUploaderInput, AssetUncheckedCreateWithoutUploaderInput>
  }

  export type AssetCreateManyUploaderInputEnvelope = {
    data: AssetCreateManyUploaderInput | AssetCreateManyUploaderInput[]
    skipDuplicates?: boolean
  }

  export type AssetRevisionCreateWithoutUploaderInput = {
    imageUrl: string
    description?: string | null
    phase1Approvals?: number
    phase1Rejections?: number
    phase1TotalVotes?: number
    phase1CompletedAt?: Date | string | null
    phase2Approvals?: number
    phase2Rejections?: number
    phase2TotalVotes?: number
    phase2CompletedAt?: Date | string | null
    status?: $Enums.AssetStatus
    notificationSent?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    asset: AssetCreateNestedOneWithoutRevisionsInput
    votes?: AssetVoteCreateNestedManyWithoutRevisionInput
    comments?: RevisionCommentCreateNestedManyWithoutRevisionInput
    userInteractions?: UserAssetInteractionCreateNestedManyWithoutRevisionInput
  }

  export type AssetRevisionUncheckedCreateWithoutUploaderInput = {
    id?: number
    asset_id: number
    imageUrl: string
    description?: string | null
    phase1Approvals?: number
    phase1Rejections?: number
    phase1TotalVotes?: number
    phase1CompletedAt?: Date | string | null
    phase2Approvals?: number
    phase2Rejections?: number
    phase2TotalVotes?: number
    phase2CompletedAt?: Date | string | null
    status?: $Enums.AssetStatus
    notificationSent?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    votes?: AssetVoteUncheckedCreateNestedManyWithoutRevisionInput
    comments?: RevisionCommentUncheckedCreateNestedManyWithoutRevisionInput
    userInteractions?: UserAssetInteractionUncheckedCreateNestedManyWithoutRevisionInput
  }

  export type AssetRevisionCreateOrConnectWithoutUploaderInput = {
    where: AssetRevisionWhereUniqueInput
    create: XOR<AssetRevisionCreateWithoutUploaderInput, AssetRevisionUncheckedCreateWithoutUploaderInput>
  }

  export type AssetRevisionCreateManyUploaderInputEnvelope = {
    data: AssetRevisionCreateManyUploaderInput | AssetRevisionCreateManyUploaderInput[]
    skipDuplicates?: boolean
  }

  export type AssetVoteCreateWithoutUserInput = {
    vote: $Enums.VoteType
    phase: $Enums.VotePhase
    weight?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    asset?: AssetCreateNestedOneWithoutVotesInput
    revision?: AssetRevisionCreateNestedOneWithoutVotesInput
  }

  export type AssetVoteUncheckedCreateWithoutUserInput = {
    id?: number
    vote: $Enums.VoteType
    phase: $Enums.VotePhase
    weight?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    asset_id?: number | null
    asset_revision_id?: number | null
  }

  export type AssetVoteCreateOrConnectWithoutUserInput = {
    where: AssetVoteWhereUniqueInput
    create: XOR<AssetVoteCreateWithoutUserInput, AssetVoteUncheckedCreateWithoutUserInput>
  }

  export type AssetVoteCreateManyUserInputEnvelope = {
    data: AssetVoteCreateManyUserInput | AssetVoteCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AssetCommentCreateWithoutUserInput = {
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    asset: AssetCreateNestedOneWithoutCommentsInput
  }

  export type AssetCommentUncheckedCreateWithoutUserInput = {
    id?: number
    asset_id: number
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssetCommentCreateOrConnectWithoutUserInput = {
    where: AssetCommentWhereUniqueInput
    create: XOR<AssetCommentCreateWithoutUserInput, AssetCommentUncheckedCreateWithoutUserInput>
  }

  export type AssetCommentCreateManyUserInputEnvelope = {
    data: AssetCommentCreateManyUserInput | AssetCommentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RevisionCommentCreateWithoutUserInput = {
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    revision: AssetRevisionCreateNestedOneWithoutCommentsInput
  }

  export type RevisionCommentUncheckedCreateWithoutUserInput = {
    id?: number
    asset_revision_id: number
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RevisionCommentCreateOrConnectWithoutUserInput = {
    where: RevisionCommentWhereUniqueInput
    create: XOR<RevisionCommentCreateWithoutUserInput, RevisionCommentUncheckedCreateWithoutUserInput>
  }

  export type RevisionCommentCreateManyUserInputEnvelope = {
    data: RevisionCommentCreateManyUserInput | RevisionCommentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserAssetInteractionCreateWithoutUserInput = {
    hasVoted?: boolean
    hasCommented?: boolean
    dismissedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    asset?: AssetCreateNestedOneWithoutUserInteractionsInput
    revision?: AssetRevisionCreateNestedOneWithoutUserInteractionsInput
    Game?: GameCreateNestedOneWithoutUserInteractionsInput
  }

  export type UserAssetInteractionUncheckedCreateWithoutUserInput = {
    id?: number
    asset_id?: number | null
    asset_revision_id?: number | null
    hasVoted?: boolean
    hasCommented?: boolean
    dismissedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    gameId?: number | null
  }

  export type UserAssetInteractionCreateOrConnectWithoutUserInput = {
    where: UserAssetInteractionWhereUniqueInput
    create: XOR<UserAssetInteractionCreateWithoutUserInput, UserAssetInteractionUncheckedCreateWithoutUserInput>
  }

  export type UserAssetInteractionCreateManyUserInputEnvelope = {
    data: UserAssetInteractionCreateManyUserInput | UserAssetInteractionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TeamUpsertWithoutUsersInput = {
    update: XOR<TeamUpdateWithoutUsersInput, TeamUncheckedUpdateWithoutUsersInput>
    create: XOR<TeamCreateWithoutUsersInput, TeamUncheckedCreateWithoutUsersInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutUsersInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutUsersInput, TeamUncheckedUpdateWithoutUsersInput>
  }

  export type TeamUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameTeams?: GameTeamUpdateManyWithoutTeamNestedInput
    inviteCodes?: InviteCodeUpdateManyWithoutTeamNestedInput
    finalReviewAssets?: AssetFinalReviewTeamUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameTeams?: GameTeamUncheckedUpdateManyWithoutTeamNestedInput
    inviteCodes?: InviteCodeUncheckedUpdateManyWithoutTeamNestedInput
    finalReviewAssets?: AssetFinalReviewTeamUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type InviteCodeUpsertWithoutUsersInput = {
    update: XOR<InviteCodeUpdateWithoutUsersInput, InviteCodeUncheckedUpdateWithoutUsersInput>
    create: XOR<InviteCodeCreateWithoutUsersInput, InviteCodeUncheckedCreateWithoutUsersInput>
    where?: InviteCodeWhereInput
  }

  export type InviteCodeUpdateToOneWithWhereWithoutUsersInput = {
    where?: InviteCodeWhereInput
    data: XOR<InviteCodeUpdateWithoutUsersInput, InviteCodeUncheckedUpdateWithoutUsersInput>
  }

  export type InviteCodeUpdateWithoutUsersInput = {
    code?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownedGameIds?: InviteCodeUpdateownedGameIdsInput | number[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneRequiredWithoutInviteCodesNestedInput
  }

  export type InviteCodeUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    team_id?: IntFieldUpdateOperationsInput | number
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownedGameIds?: InviteCodeUpdateownedGameIdsInput | number[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameOwnerUpsertWithWhereUniqueWithoutUserInput = {
    where: GameOwnerWhereUniqueInput
    update: XOR<GameOwnerUpdateWithoutUserInput, GameOwnerUncheckedUpdateWithoutUserInput>
    create: XOR<GameOwnerCreateWithoutUserInput, GameOwnerUncheckedCreateWithoutUserInput>
  }

  export type GameOwnerUpdateWithWhereUniqueWithoutUserInput = {
    where: GameOwnerWhereUniqueInput
    data: XOR<GameOwnerUpdateWithoutUserInput, GameOwnerUncheckedUpdateWithoutUserInput>
  }

  export type GameOwnerUpdateManyWithWhereWithoutUserInput = {
    where: GameOwnerScalarWhereInput
    data: XOR<GameOwnerUpdateManyMutationInput, GameOwnerUncheckedUpdateManyWithoutUserInput>
  }

  export type AssetUpsertWithWhereUniqueWithoutUploaderInput = {
    where: AssetWhereUniqueInput
    update: XOR<AssetUpdateWithoutUploaderInput, AssetUncheckedUpdateWithoutUploaderInput>
    create: XOR<AssetCreateWithoutUploaderInput, AssetUncheckedCreateWithoutUploaderInput>
  }

  export type AssetUpdateWithWhereUniqueWithoutUploaderInput = {
    where: AssetWhereUniqueInput
    data: XOR<AssetUpdateWithoutUploaderInput, AssetUncheckedUpdateWithoutUploaderInput>
  }

  export type AssetUpdateManyWithWhereWithoutUploaderInput = {
    where: AssetScalarWhereInput
    data: XOR<AssetUpdateManyMutationInput, AssetUncheckedUpdateManyWithoutUploaderInput>
  }

  export type AssetRevisionUpsertWithWhereUniqueWithoutUploaderInput = {
    where: AssetRevisionWhereUniqueInput
    update: XOR<AssetRevisionUpdateWithoutUploaderInput, AssetRevisionUncheckedUpdateWithoutUploaderInput>
    create: XOR<AssetRevisionCreateWithoutUploaderInput, AssetRevisionUncheckedCreateWithoutUploaderInput>
  }

  export type AssetRevisionUpdateWithWhereUniqueWithoutUploaderInput = {
    where: AssetRevisionWhereUniqueInput
    data: XOR<AssetRevisionUpdateWithoutUploaderInput, AssetRevisionUncheckedUpdateWithoutUploaderInput>
  }

  export type AssetRevisionUpdateManyWithWhereWithoutUploaderInput = {
    where: AssetRevisionScalarWhereInput
    data: XOR<AssetRevisionUpdateManyMutationInput, AssetRevisionUncheckedUpdateManyWithoutUploaderInput>
  }

  export type AssetRevisionScalarWhereInput = {
    AND?: AssetRevisionScalarWhereInput | AssetRevisionScalarWhereInput[]
    OR?: AssetRevisionScalarWhereInput[]
    NOT?: AssetRevisionScalarWhereInput | AssetRevisionScalarWhereInput[]
    id?: IntFilter<"AssetRevision"> | number
    asset_id?: IntFilter<"AssetRevision"> | number
    imageUrl?: StringFilter<"AssetRevision"> | string
    uploader_id?: IntFilter<"AssetRevision"> | number
    description?: StringNullableFilter<"AssetRevision"> | string | null
    phase1Approvals?: IntFilter<"AssetRevision"> | number
    phase1Rejections?: IntFilter<"AssetRevision"> | number
    phase1TotalVotes?: IntFilter<"AssetRevision"> | number
    phase1CompletedAt?: DateTimeNullableFilter<"AssetRevision"> | Date | string | null
    phase2Approvals?: IntFilter<"AssetRevision"> | number
    phase2Rejections?: IntFilter<"AssetRevision"> | number
    phase2TotalVotes?: IntFilter<"AssetRevision"> | number
    phase2CompletedAt?: DateTimeNullableFilter<"AssetRevision"> | Date | string | null
    status?: EnumAssetStatusFilter<"AssetRevision"> | $Enums.AssetStatus
    notificationSent?: BoolFilter<"AssetRevision"> | boolean
    archivedAt?: DateTimeNullableFilter<"AssetRevision"> | Date | string | null
    createdAt?: DateTimeFilter<"AssetRevision"> | Date | string
    updatedAt?: DateTimeFilter<"AssetRevision"> | Date | string
  }

  export type AssetVoteUpsertWithWhereUniqueWithoutUserInput = {
    where: AssetVoteWhereUniqueInput
    update: XOR<AssetVoteUpdateWithoutUserInput, AssetVoteUncheckedUpdateWithoutUserInput>
    create: XOR<AssetVoteCreateWithoutUserInput, AssetVoteUncheckedCreateWithoutUserInput>
  }

  export type AssetVoteUpdateWithWhereUniqueWithoutUserInput = {
    where: AssetVoteWhereUniqueInput
    data: XOR<AssetVoteUpdateWithoutUserInput, AssetVoteUncheckedUpdateWithoutUserInput>
  }

  export type AssetVoteUpdateManyWithWhereWithoutUserInput = {
    where: AssetVoteScalarWhereInput
    data: XOR<AssetVoteUpdateManyMutationInput, AssetVoteUncheckedUpdateManyWithoutUserInput>
  }

  export type AssetVoteScalarWhereInput = {
    AND?: AssetVoteScalarWhereInput | AssetVoteScalarWhereInput[]
    OR?: AssetVoteScalarWhereInput[]
    NOT?: AssetVoteScalarWhereInput | AssetVoteScalarWhereInput[]
    id?: IntFilter<"AssetVote"> | number
    user_id?: IntFilter<"AssetVote"> | number
    vote?: EnumVoteTypeFilter<"AssetVote"> | $Enums.VoteType
    phase?: EnumVotePhaseFilter<"AssetVote"> | $Enums.VotePhase
    weight?: IntFilter<"AssetVote"> | number
    createdAt?: DateTimeFilter<"AssetVote"> | Date | string
    updatedAt?: DateTimeFilter<"AssetVote"> | Date | string
    asset_id?: IntNullableFilter<"AssetVote"> | number | null
    asset_revision_id?: IntNullableFilter<"AssetVote"> | number | null
  }

  export type AssetCommentUpsertWithWhereUniqueWithoutUserInput = {
    where: AssetCommentWhereUniqueInput
    update: XOR<AssetCommentUpdateWithoutUserInput, AssetCommentUncheckedUpdateWithoutUserInput>
    create: XOR<AssetCommentCreateWithoutUserInput, AssetCommentUncheckedCreateWithoutUserInput>
  }

  export type AssetCommentUpdateWithWhereUniqueWithoutUserInput = {
    where: AssetCommentWhereUniqueInput
    data: XOR<AssetCommentUpdateWithoutUserInput, AssetCommentUncheckedUpdateWithoutUserInput>
  }

  export type AssetCommentUpdateManyWithWhereWithoutUserInput = {
    where: AssetCommentScalarWhereInput
    data: XOR<AssetCommentUpdateManyMutationInput, AssetCommentUncheckedUpdateManyWithoutUserInput>
  }

  export type AssetCommentScalarWhereInput = {
    AND?: AssetCommentScalarWhereInput | AssetCommentScalarWhereInput[]
    OR?: AssetCommentScalarWhereInput[]
    NOT?: AssetCommentScalarWhereInput | AssetCommentScalarWhereInput[]
    id?: IntFilter<"AssetComment"> | number
    asset_id?: IntFilter<"AssetComment"> | number
    user_id?: IntFilter<"AssetComment"> | number
    content?: StringFilter<"AssetComment"> | string
    createdAt?: DateTimeFilter<"AssetComment"> | Date | string
    updatedAt?: DateTimeFilter<"AssetComment"> | Date | string
  }

  export type RevisionCommentUpsertWithWhereUniqueWithoutUserInput = {
    where: RevisionCommentWhereUniqueInput
    update: XOR<RevisionCommentUpdateWithoutUserInput, RevisionCommentUncheckedUpdateWithoutUserInput>
    create: XOR<RevisionCommentCreateWithoutUserInput, RevisionCommentUncheckedCreateWithoutUserInput>
  }

  export type RevisionCommentUpdateWithWhereUniqueWithoutUserInput = {
    where: RevisionCommentWhereUniqueInput
    data: XOR<RevisionCommentUpdateWithoutUserInput, RevisionCommentUncheckedUpdateWithoutUserInput>
  }

  export type RevisionCommentUpdateManyWithWhereWithoutUserInput = {
    where: RevisionCommentScalarWhereInput
    data: XOR<RevisionCommentUpdateManyMutationInput, RevisionCommentUncheckedUpdateManyWithoutUserInput>
  }

  export type RevisionCommentScalarWhereInput = {
    AND?: RevisionCommentScalarWhereInput | RevisionCommentScalarWhereInput[]
    OR?: RevisionCommentScalarWhereInput[]
    NOT?: RevisionCommentScalarWhereInput | RevisionCommentScalarWhereInput[]
    id?: IntFilter<"RevisionComment"> | number
    asset_revision_id?: IntFilter<"RevisionComment"> | number
    user_id?: IntFilter<"RevisionComment"> | number
    content?: StringFilter<"RevisionComment"> | string
    createdAt?: DateTimeFilter<"RevisionComment"> | Date | string
    updatedAt?: DateTimeFilter<"RevisionComment"> | Date | string
  }

  export type UserAssetInteractionUpsertWithWhereUniqueWithoutUserInput = {
    where: UserAssetInteractionWhereUniqueInput
    update: XOR<UserAssetInteractionUpdateWithoutUserInput, UserAssetInteractionUncheckedUpdateWithoutUserInput>
    create: XOR<UserAssetInteractionCreateWithoutUserInput, UserAssetInteractionUncheckedCreateWithoutUserInput>
  }

  export type UserAssetInteractionUpdateWithWhereUniqueWithoutUserInput = {
    where: UserAssetInteractionWhereUniqueInput
    data: XOR<UserAssetInteractionUpdateWithoutUserInput, UserAssetInteractionUncheckedUpdateWithoutUserInput>
  }

  export type UserAssetInteractionUpdateManyWithWhereWithoutUserInput = {
    where: UserAssetInteractionScalarWhereInput
    data: XOR<UserAssetInteractionUpdateManyMutationInput, UserAssetInteractionUncheckedUpdateManyWithoutUserInput>
  }

  export type GameCreateWithoutGameOwnersInput = {
    name: string
    assetCategories?: GameCreateassetCategoriesInput | string[]
    eligiblePhase1Voters?: number
    eligiblePhase2Voters?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    gameTeams?: GameTeamCreateNestedManyWithoutGameInput
    assets?: AssetCreateNestedManyWithoutGameInput
    userInteractions?: UserAssetInteractionCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutGameOwnersInput = {
    id?: number
    name: string
    assetCategories?: GameCreateassetCategoriesInput | string[]
    eligiblePhase1Voters?: number
    eligiblePhase2Voters?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    gameTeams?: GameTeamUncheckedCreateNestedManyWithoutGameInput
    assets?: AssetUncheckedCreateNestedManyWithoutGameInput
    userInteractions?: UserAssetInteractionUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutGameOwnersInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutGameOwnersInput, GameUncheckedCreateWithoutGameOwnersInput>
  }

  export type UserCreateWithoutGameOwnersInput = {
    firstName: string
    lastName: string
    email: string
    passwordHash: string
    avatar?: number
    customAvatar?: string | null
    role: $Enums.UserRole
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    team: TeamCreateNestedOneWithoutUsersInput
    inviteCode?: InviteCodeCreateNestedOneWithoutUsersInput
    uploadedAssets?: AssetCreateNestedManyWithoutUploaderInput
    assetRevisions?: AssetRevisionCreateNestedManyWithoutUploaderInput
    assetVotes?: AssetVoteCreateNestedManyWithoutUserInput
    assetComments?: AssetCommentCreateNestedManyWithoutUserInput
    revisionComments?: RevisionCommentCreateNestedManyWithoutUserInput
    assetInteractions?: UserAssetInteractionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutGameOwnersInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    passwordHash: string
    avatar?: number
    customAvatar?: string | null
    role: $Enums.UserRole
    isActive?: boolean
    lastLogin?: Date | string | null
    team_id: number
    invite_code_id?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    uploadedAssets?: AssetUncheckedCreateNestedManyWithoutUploaderInput
    assetRevisions?: AssetRevisionUncheckedCreateNestedManyWithoutUploaderInput
    assetVotes?: AssetVoteUncheckedCreateNestedManyWithoutUserInput
    assetComments?: AssetCommentUncheckedCreateNestedManyWithoutUserInput
    revisionComments?: RevisionCommentUncheckedCreateNestedManyWithoutUserInput
    assetInteractions?: UserAssetInteractionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutGameOwnersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGameOwnersInput, UserUncheckedCreateWithoutGameOwnersInput>
  }

  export type GameUpsertWithoutGameOwnersInput = {
    update: XOR<GameUpdateWithoutGameOwnersInput, GameUncheckedUpdateWithoutGameOwnersInput>
    create: XOR<GameCreateWithoutGameOwnersInput, GameUncheckedCreateWithoutGameOwnersInput>
    where?: GameWhereInput
  }

  export type GameUpdateToOneWithWhereWithoutGameOwnersInput = {
    where?: GameWhereInput
    data: XOR<GameUpdateWithoutGameOwnersInput, GameUncheckedUpdateWithoutGameOwnersInput>
  }

  export type GameUpdateWithoutGameOwnersInput = {
    name?: StringFieldUpdateOperationsInput | string
    assetCategories?: GameUpdateassetCategoriesInput | string[]
    eligiblePhase1Voters?: IntFieldUpdateOperationsInput | number
    eligiblePhase2Voters?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameTeams?: GameTeamUpdateManyWithoutGameNestedInput
    assets?: AssetUpdateManyWithoutGameNestedInput
    userInteractions?: UserAssetInteractionUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutGameOwnersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    assetCategories?: GameUpdateassetCategoriesInput | string[]
    eligiblePhase1Voters?: IntFieldUpdateOperationsInput | number
    eligiblePhase2Voters?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameTeams?: GameTeamUncheckedUpdateManyWithoutGameNestedInput
    assets?: AssetUncheckedUpdateManyWithoutGameNestedInput
    userInteractions?: UserAssetInteractionUncheckedUpdateManyWithoutGameNestedInput
  }

  export type UserUpsertWithoutGameOwnersInput = {
    update: XOR<UserUpdateWithoutGameOwnersInput, UserUncheckedUpdateWithoutGameOwnersInput>
    create: XOR<UserCreateWithoutGameOwnersInput, UserUncheckedCreateWithoutGameOwnersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGameOwnersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGameOwnersInput, UserUncheckedUpdateWithoutGameOwnersInput>
  }

  export type UserUpdateWithoutGameOwnersInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    avatar?: IntFieldUpdateOperationsInput | number
    customAvatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneRequiredWithoutUsersNestedInput
    inviteCode?: InviteCodeUpdateOneWithoutUsersNestedInput
    uploadedAssets?: AssetUpdateManyWithoutUploaderNestedInput
    assetRevisions?: AssetRevisionUpdateManyWithoutUploaderNestedInput
    assetVotes?: AssetVoteUpdateManyWithoutUserNestedInput
    assetComments?: AssetCommentUpdateManyWithoutUserNestedInput
    revisionComments?: RevisionCommentUpdateManyWithoutUserNestedInput
    assetInteractions?: UserAssetInteractionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutGameOwnersInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    avatar?: IntFieldUpdateOperationsInput | number
    customAvatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    team_id?: IntFieldUpdateOperationsInput | number
    invite_code_id?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedAssets?: AssetUncheckedUpdateManyWithoutUploaderNestedInput
    assetRevisions?: AssetRevisionUncheckedUpdateManyWithoutUploaderNestedInput
    assetVotes?: AssetVoteUncheckedUpdateManyWithoutUserNestedInput
    assetComments?: AssetCommentUncheckedUpdateManyWithoutUserNestedInput
    revisionComments?: RevisionCommentUncheckedUpdateManyWithoutUserNestedInput
    assetInteractions?: UserAssetInteractionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GameCreateWithoutAssetsInput = {
    name: string
    assetCategories?: GameCreateassetCategoriesInput | string[]
    eligiblePhase1Voters?: number
    eligiblePhase2Voters?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    gameTeams?: GameTeamCreateNestedManyWithoutGameInput
    gameOwners?: GameOwnerCreateNestedManyWithoutGameInput
    userInteractions?: UserAssetInteractionCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutAssetsInput = {
    id?: number
    name: string
    assetCategories?: GameCreateassetCategoriesInput | string[]
    eligiblePhase1Voters?: number
    eligiblePhase2Voters?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    gameTeams?: GameTeamUncheckedCreateNestedManyWithoutGameInput
    gameOwners?: GameOwnerUncheckedCreateNestedManyWithoutGameInput
    userInteractions?: UserAssetInteractionUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutAssetsInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutAssetsInput, GameUncheckedCreateWithoutAssetsInput>
  }

  export type UserCreateWithoutUploadedAssetsInput = {
    firstName: string
    lastName: string
    email: string
    passwordHash: string
    avatar?: number
    customAvatar?: string | null
    role: $Enums.UserRole
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    team: TeamCreateNestedOneWithoutUsersInput
    inviteCode?: InviteCodeCreateNestedOneWithoutUsersInput
    gameOwners?: GameOwnerCreateNestedManyWithoutUserInput
    assetRevisions?: AssetRevisionCreateNestedManyWithoutUploaderInput
    assetVotes?: AssetVoteCreateNestedManyWithoutUserInput
    assetComments?: AssetCommentCreateNestedManyWithoutUserInput
    revisionComments?: RevisionCommentCreateNestedManyWithoutUserInput
    assetInteractions?: UserAssetInteractionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUploadedAssetsInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    passwordHash: string
    avatar?: number
    customAvatar?: string | null
    role: $Enums.UserRole
    isActive?: boolean
    lastLogin?: Date | string | null
    team_id: number
    invite_code_id?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    gameOwners?: GameOwnerUncheckedCreateNestedManyWithoutUserInput
    assetRevisions?: AssetRevisionUncheckedCreateNestedManyWithoutUploaderInput
    assetVotes?: AssetVoteUncheckedCreateNestedManyWithoutUserInput
    assetComments?: AssetCommentUncheckedCreateNestedManyWithoutUserInput
    revisionComments?: RevisionCommentUncheckedCreateNestedManyWithoutUserInput
    assetInteractions?: UserAssetInteractionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUploadedAssetsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUploadedAssetsInput, UserUncheckedCreateWithoutUploadedAssetsInput>
  }

  export type AssetRevisionCreateWithoutAssetInput = {
    imageUrl: string
    description?: string | null
    phase1Approvals?: number
    phase1Rejections?: number
    phase1TotalVotes?: number
    phase1CompletedAt?: Date | string | null
    phase2Approvals?: number
    phase2Rejections?: number
    phase2TotalVotes?: number
    phase2CompletedAt?: Date | string | null
    status?: $Enums.AssetStatus
    notificationSent?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    uploader: UserCreateNestedOneWithoutAssetRevisionsInput
    votes?: AssetVoteCreateNestedManyWithoutRevisionInput
    comments?: RevisionCommentCreateNestedManyWithoutRevisionInput
    userInteractions?: UserAssetInteractionCreateNestedManyWithoutRevisionInput
  }

  export type AssetRevisionUncheckedCreateWithoutAssetInput = {
    id?: number
    imageUrl: string
    uploader_id: number
    description?: string | null
    phase1Approvals?: number
    phase1Rejections?: number
    phase1TotalVotes?: number
    phase1CompletedAt?: Date | string | null
    phase2Approvals?: number
    phase2Rejections?: number
    phase2TotalVotes?: number
    phase2CompletedAt?: Date | string | null
    status?: $Enums.AssetStatus
    notificationSent?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    votes?: AssetVoteUncheckedCreateNestedManyWithoutRevisionInput
    comments?: RevisionCommentUncheckedCreateNestedManyWithoutRevisionInput
    userInteractions?: UserAssetInteractionUncheckedCreateNestedManyWithoutRevisionInput
  }

  export type AssetRevisionCreateOrConnectWithoutAssetInput = {
    where: AssetRevisionWhereUniqueInput
    create: XOR<AssetRevisionCreateWithoutAssetInput, AssetRevisionUncheckedCreateWithoutAssetInput>
  }

  export type AssetRevisionCreateManyAssetInputEnvelope = {
    data: AssetRevisionCreateManyAssetInput | AssetRevisionCreateManyAssetInput[]
    skipDuplicates?: boolean
  }

  export type AssetVoteCreateWithoutAssetInput = {
    vote: $Enums.VoteType
    phase: $Enums.VotePhase
    weight?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAssetVotesInput
    revision?: AssetRevisionCreateNestedOneWithoutVotesInput
  }

  export type AssetVoteUncheckedCreateWithoutAssetInput = {
    id?: number
    user_id: number
    vote: $Enums.VoteType
    phase: $Enums.VotePhase
    weight?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    asset_revision_id?: number | null
  }

  export type AssetVoteCreateOrConnectWithoutAssetInput = {
    where: AssetVoteWhereUniqueInput
    create: XOR<AssetVoteCreateWithoutAssetInput, AssetVoteUncheckedCreateWithoutAssetInput>
  }

  export type AssetVoteCreateManyAssetInputEnvelope = {
    data: AssetVoteCreateManyAssetInput | AssetVoteCreateManyAssetInput[]
    skipDuplicates?: boolean
  }

  export type AssetCommentCreateWithoutAssetInput = {
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAssetCommentsInput
  }

  export type AssetCommentUncheckedCreateWithoutAssetInput = {
    id?: number
    user_id: number
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssetCommentCreateOrConnectWithoutAssetInput = {
    where: AssetCommentWhereUniqueInput
    create: XOR<AssetCommentCreateWithoutAssetInput, AssetCommentUncheckedCreateWithoutAssetInput>
  }

  export type AssetCommentCreateManyAssetInputEnvelope = {
    data: AssetCommentCreateManyAssetInput | AssetCommentCreateManyAssetInput[]
    skipDuplicates?: boolean
  }

  export type UserAssetInteractionCreateWithoutAssetInput = {
    hasVoted?: boolean
    hasCommented?: boolean
    dismissedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAssetInteractionsInput
    revision?: AssetRevisionCreateNestedOneWithoutUserInteractionsInput
    Game?: GameCreateNestedOneWithoutUserInteractionsInput
  }

  export type UserAssetInteractionUncheckedCreateWithoutAssetInput = {
    id?: number
    user_id: number
    asset_revision_id?: number | null
    hasVoted?: boolean
    hasCommented?: boolean
    dismissedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    gameId?: number | null
  }

  export type UserAssetInteractionCreateOrConnectWithoutAssetInput = {
    where: UserAssetInteractionWhereUniqueInput
    create: XOR<UserAssetInteractionCreateWithoutAssetInput, UserAssetInteractionUncheckedCreateWithoutAssetInput>
  }

  export type UserAssetInteractionCreateManyAssetInputEnvelope = {
    data: UserAssetInteractionCreateManyAssetInput | UserAssetInteractionCreateManyAssetInput[]
    skipDuplicates?: boolean
  }

  export type AssetFinalReviewTeamCreateWithoutAssetInput = {
    createdAt?: Date | string
    team: TeamCreateNestedOneWithoutFinalReviewAssetsInput
  }

  export type AssetFinalReviewTeamUncheckedCreateWithoutAssetInput = {
    id?: number
    team_id: number
    createdAt?: Date | string
  }

  export type AssetFinalReviewTeamCreateOrConnectWithoutAssetInput = {
    where: AssetFinalReviewTeamWhereUniqueInput
    create: XOR<AssetFinalReviewTeamCreateWithoutAssetInput, AssetFinalReviewTeamUncheckedCreateWithoutAssetInput>
  }

  export type AssetFinalReviewTeamCreateManyAssetInputEnvelope = {
    data: AssetFinalReviewTeamCreateManyAssetInput | AssetFinalReviewTeamCreateManyAssetInput[]
    skipDuplicates?: boolean
  }

  export type GameUpsertWithoutAssetsInput = {
    update: XOR<GameUpdateWithoutAssetsInput, GameUncheckedUpdateWithoutAssetsInput>
    create: XOR<GameCreateWithoutAssetsInput, GameUncheckedCreateWithoutAssetsInput>
    where?: GameWhereInput
  }

  export type GameUpdateToOneWithWhereWithoutAssetsInput = {
    where?: GameWhereInput
    data: XOR<GameUpdateWithoutAssetsInput, GameUncheckedUpdateWithoutAssetsInput>
  }

  export type GameUpdateWithoutAssetsInput = {
    name?: StringFieldUpdateOperationsInput | string
    assetCategories?: GameUpdateassetCategoriesInput | string[]
    eligiblePhase1Voters?: IntFieldUpdateOperationsInput | number
    eligiblePhase2Voters?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameTeams?: GameTeamUpdateManyWithoutGameNestedInput
    gameOwners?: GameOwnerUpdateManyWithoutGameNestedInput
    userInteractions?: UserAssetInteractionUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutAssetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    assetCategories?: GameUpdateassetCategoriesInput | string[]
    eligiblePhase1Voters?: IntFieldUpdateOperationsInput | number
    eligiblePhase2Voters?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameTeams?: GameTeamUncheckedUpdateManyWithoutGameNestedInput
    gameOwners?: GameOwnerUncheckedUpdateManyWithoutGameNestedInput
    userInteractions?: UserAssetInteractionUncheckedUpdateManyWithoutGameNestedInput
  }

  export type UserUpsertWithoutUploadedAssetsInput = {
    update: XOR<UserUpdateWithoutUploadedAssetsInput, UserUncheckedUpdateWithoutUploadedAssetsInput>
    create: XOR<UserCreateWithoutUploadedAssetsInput, UserUncheckedCreateWithoutUploadedAssetsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUploadedAssetsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUploadedAssetsInput, UserUncheckedUpdateWithoutUploadedAssetsInput>
  }

  export type UserUpdateWithoutUploadedAssetsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    avatar?: IntFieldUpdateOperationsInput | number
    customAvatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneRequiredWithoutUsersNestedInput
    inviteCode?: InviteCodeUpdateOneWithoutUsersNestedInput
    gameOwners?: GameOwnerUpdateManyWithoutUserNestedInput
    assetRevisions?: AssetRevisionUpdateManyWithoutUploaderNestedInput
    assetVotes?: AssetVoteUpdateManyWithoutUserNestedInput
    assetComments?: AssetCommentUpdateManyWithoutUserNestedInput
    revisionComments?: RevisionCommentUpdateManyWithoutUserNestedInput
    assetInteractions?: UserAssetInteractionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUploadedAssetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    avatar?: IntFieldUpdateOperationsInput | number
    customAvatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    team_id?: IntFieldUpdateOperationsInput | number
    invite_code_id?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameOwners?: GameOwnerUncheckedUpdateManyWithoutUserNestedInput
    assetRevisions?: AssetRevisionUncheckedUpdateManyWithoutUploaderNestedInput
    assetVotes?: AssetVoteUncheckedUpdateManyWithoutUserNestedInput
    assetComments?: AssetCommentUncheckedUpdateManyWithoutUserNestedInput
    revisionComments?: RevisionCommentUncheckedUpdateManyWithoutUserNestedInput
    assetInteractions?: UserAssetInteractionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AssetRevisionUpsertWithWhereUniqueWithoutAssetInput = {
    where: AssetRevisionWhereUniqueInput
    update: XOR<AssetRevisionUpdateWithoutAssetInput, AssetRevisionUncheckedUpdateWithoutAssetInput>
    create: XOR<AssetRevisionCreateWithoutAssetInput, AssetRevisionUncheckedCreateWithoutAssetInput>
  }

  export type AssetRevisionUpdateWithWhereUniqueWithoutAssetInput = {
    where: AssetRevisionWhereUniqueInput
    data: XOR<AssetRevisionUpdateWithoutAssetInput, AssetRevisionUncheckedUpdateWithoutAssetInput>
  }

  export type AssetRevisionUpdateManyWithWhereWithoutAssetInput = {
    where: AssetRevisionScalarWhereInput
    data: XOR<AssetRevisionUpdateManyMutationInput, AssetRevisionUncheckedUpdateManyWithoutAssetInput>
  }

  export type AssetVoteUpsertWithWhereUniqueWithoutAssetInput = {
    where: AssetVoteWhereUniqueInput
    update: XOR<AssetVoteUpdateWithoutAssetInput, AssetVoteUncheckedUpdateWithoutAssetInput>
    create: XOR<AssetVoteCreateWithoutAssetInput, AssetVoteUncheckedCreateWithoutAssetInput>
  }

  export type AssetVoteUpdateWithWhereUniqueWithoutAssetInput = {
    where: AssetVoteWhereUniqueInput
    data: XOR<AssetVoteUpdateWithoutAssetInput, AssetVoteUncheckedUpdateWithoutAssetInput>
  }

  export type AssetVoteUpdateManyWithWhereWithoutAssetInput = {
    where: AssetVoteScalarWhereInput
    data: XOR<AssetVoteUpdateManyMutationInput, AssetVoteUncheckedUpdateManyWithoutAssetInput>
  }

  export type AssetCommentUpsertWithWhereUniqueWithoutAssetInput = {
    where: AssetCommentWhereUniqueInput
    update: XOR<AssetCommentUpdateWithoutAssetInput, AssetCommentUncheckedUpdateWithoutAssetInput>
    create: XOR<AssetCommentCreateWithoutAssetInput, AssetCommentUncheckedCreateWithoutAssetInput>
  }

  export type AssetCommentUpdateWithWhereUniqueWithoutAssetInput = {
    where: AssetCommentWhereUniqueInput
    data: XOR<AssetCommentUpdateWithoutAssetInput, AssetCommentUncheckedUpdateWithoutAssetInput>
  }

  export type AssetCommentUpdateManyWithWhereWithoutAssetInput = {
    where: AssetCommentScalarWhereInput
    data: XOR<AssetCommentUpdateManyMutationInput, AssetCommentUncheckedUpdateManyWithoutAssetInput>
  }

  export type UserAssetInteractionUpsertWithWhereUniqueWithoutAssetInput = {
    where: UserAssetInteractionWhereUniqueInput
    update: XOR<UserAssetInteractionUpdateWithoutAssetInput, UserAssetInteractionUncheckedUpdateWithoutAssetInput>
    create: XOR<UserAssetInteractionCreateWithoutAssetInput, UserAssetInteractionUncheckedCreateWithoutAssetInput>
  }

  export type UserAssetInteractionUpdateWithWhereUniqueWithoutAssetInput = {
    where: UserAssetInteractionWhereUniqueInput
    data: XOR<UserAssetInteractionUpdateWithoutAssetInput, UserAssetInteractionUncheckedUpdateWithoutAssetInput>
  }

  export type UserAssetInteractionUpdateManyWithWhereWithoutAssetInput = {
    where: UserAssetInteractionScalarWhereInput
    data: XOR<UserAssetInteractionUpdateManyMutationInput, UserAssetInteractionUncheckedUpdateManyWithoutAssetInput>
  }

  export type AssetFinalReviewTeamUpsertWithWhereUniqueWithoutAssetInput = {
    where: AssetFinalReviewTeamWhereUniqueInput
    update: XOR<AssetFinalReviewTeamUpdateWithoutAssetInput, AssetFinalReviewTeamUncheckedUpdateWithoutAssetInput>
    create: XOR<AssetFinalReviewTeamCreateWithoutAssetInput, AssetFinalReviewTeamUncheckedCreateWithoutAssetInput>
  }

  export type AssetFinalReviewTeamUpdateWithWhereUniqueWithoutAssetInput = {
    where: AssetFinalReviewTeamWhereUniqueInput
    data: XOR<AssetFinalReviewTeamUpdateWithoutAssetInput, AssetFinalReviewTeamUncheckedUpdateWithoutAssetInput>
  }

  export type AssetFinalReviewTeamUpdateManyWithWhereWithoutAssetInput = {
    where: AssetFinalReviewTeamScalarWhereInput
    data: XOR<AssetFinalReviewTeamUpdateManyMutationInput, AssetFinalReviewTeamUncheckedUpdateManyWithoutAssetInput>
  }

  export type AssetCreateWithoutFinalReviewTeamsInput = {
    name: string
    imageUrl: string
    category: string
    phase1Approvals?: number
    phase1Rejections?: number
    phase1TotalVotes?: number
    phase1CompletedAt?: Date | string | null
    phase2Approvals?: number
    phase2Rejections?: number
    phase2TotalVotes?: number
    phase2CompletedAt?: Date | string | null
    status?: $Enums.AssetStatus
    notificationSent?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    game: GameCreateNestedOneWithoutAssetsInput
    uploader: UserCreateNestedOneWithoutUploadedAssetsInput
    revisions?: AssetRevisionCreateNestedManyWithoutAssetInput
    votes?: AssetVoteCreateNestedManyWithoutAssetInput
    comments?: AssetCommentCreateNestedManyWithoutAssetInput
    userInteractions?: UserAssetInteractionCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutFinalReviewTeamsInput = {
    id?: number
    name: string
    imageUrl: string
    category: string
    game_id: number
    uploader_id: number
    phase1Approvals?: number
    phase1Rejections?: number
    phase1TotalVotes?: number
    phase1CompletedAt?: Date | string | null
    phase2Approvals?: number
    phase2Rejections?: number
    phase2TotalVotes?: number
    phase2CompletedAt?: Date | string | null
    status?: $Enums.AssetStatus
    notificationSent?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    revisions?: AssetRevisionUncheckedCreateNestedManyWithoutAssetInput
    votes?: AssetVoteUncheckedCreateNestedManyWithoutAssetInput
    comments?: AssetCommentUncheckedCreateNestedManyWithoutAssetInput
    userInteractions?: UserAssetInteractionUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutFinalReviewTeamsInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutFinalReviewTeamsInput, AssetUncheckedCreateWithoutFinalReviewTeamsInput>
  }

  export type TeamCreateWithoutFinalReviewAssetsInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutTeamInput
    gameTeams?: GameTeamCreateNestedManyWithoutTeamInput
    inviteCodes?: InviteCodeCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutFinalReviewAssetsInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutTeamInput
    gameTeams?: GameTeamUncheckedCreateNestedManyWithoutTeamInput
    inviteCodes?: InviteCodeUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutFinalReviewAssetsInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutFinalReviewAssetsInput, TeamUncheckedCreateWithoutFinalReviewAssetsInput>
  }

  export type AssetUpsertWithoutFinalReviewTeamsInput = {
    update: XOR<AssetUpdateWithoutFinalReviewTeamsInput, AssetUncheckedUpdateWithoutFinalReviewTeamsInput>
    create: XOR<AssetCreateWithoutFinalReviewTeamsInput, AssetUncheckedCreateWithoutFinalReviewTeamsInput>
    where?: AssetWhereInput
  }

  export type AssetUpdateToOneWithWhereWithoutFinalReviewTeamsInput = {
    where?: AssetWhereInput
    data: XOR<AssetUpdateWithoutFinalReviewTeamsInput, AssetUncheckedUpdateWithoutFinalReviewTeamsInput>
  }

  export type AssetUpdateWithoutFinalReviewTeamsInput = {
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    phase1Approvals?: IntFieldUpdateOperationsInput | number
    phase1Rejections?: IntFieldUpdateOperationsInput | number
    phase1TotalVotes?: IntFieldUpdateOperationsInput | number
    phase1CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phase2Approvals?: IntFieldUpdateOperationsInput | number
    phase2Rejections?: IntFieldUpdateOperationsInput | number
    phase2TotalVotes?: IntFieldUpdateOperationsInput | number
    phase2CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    notificationSent?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    game?: GameUpdateOneRequiredWithoutAssetsNestedInput
    uploader?: UserUpdateOneRequiredWithoutUploadedAssetsNestedInput
    revisions?: AssetRevisionUpdateManyWithoutAssetNestedInput
    votes?: AssetVoteUpdateManyWithoutAssetNestedInput
    comments?: AssetCommentUpdateManyWithoutAssetNestedInput
    userInteractions?: UserAssetInteractionUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutFinalReviewTeamsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    game_id?: IntFieldUpdateOperationsInput | number
    uploader_id?: IntFieldUpdateOperationsInput | number
    phase1Approvals?: IntFieldUpdateOperationsInput | number
    phase1Rejections?: IntFieldUpdateOperationsInput | number
    phase1TotalVotes?: IntFieldUpdateOperationsInput | number
    phase1CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phase2Approvals?: IntFieldUpdateOperationsInput | number
    phase2Rejections?: IntFieldUpdateOperationsInput | number
    phase2TotalVotes?: IntFieldUpdateOperationsInput | number
    phase2CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    notificationSent?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revisions?: AssetRevisionUncheckedUpdateManyWithoutAssetNestedInput
    votes?: AssetVoteUncheckedUpdateManyWithoutAssetNestedInput
    comments?: AssetCommentUncheckedUpdateManyWithoutAssetNestedInput
    userInteractions?: UserAssetInteractionUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type TeamUpsertWithoutFinalReviewAssetsInput = {
    update: XOR<TeamUpdateWithoutFinalReviewAssetsInput, TeamUncheckedUpdateWithoutFinalReviewAssetsInput>
    create: XOR<TeamCreateWithoutFinalReviewAssetsInput, TeamUncheckedCreateWithoutFinalReviewAssetsInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutFinalReviewAssetsInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutFinalReviewAssetsInput, TeamUncheckedUpdateWithoutFinalReviewAssetsInput>
  }

  export type TeamUpdateWithoutFinalReviewAssetsInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutTeamNestedInput
    gameTeams?: GameTeamUpdateManyWithoutTeamNestedInput
    inviteCodes?: InviteCodeUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutFinalReviewAssetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutTeamNestedInput
    gameTeams?: GameTeamUncheckedUpdateManyWithoutTeamNestedInput
    inviteCodes?: InviteCodeUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type AssetCreateWithoutRevisionsInput = {
    name: string
    imageUrl: string
    category: string
    phase1Approvals?: number
    phase1Rejections?: number
    phase1TotalVotes?: number
    phase1CompletedAt?: Date | string | null
    phase2Approvals?: number
    phase2Rejections?: number
    phase2TotalVotes?: number
    phase2CompletedAt?: Date | string | null
    status?: $Enums.AssetStatus
    notificationSent?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    game: GameCreateNestedOneWithoutAssetsInput
    uploader: UserCreateNestedOneWithoutUploadedAssetsInput
    votes?: AssetVoteCreateNestedManyWithoutAssetInput
    comments?: AssetCommentCreateNestedManyWithoutAssetInput
    userInteractions?: UserAssetInteractionCreateNestedManyWithoutAssetInput
    finalReviewTeams?: AssetFinalReviewTeamCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutRevisionsInput = {
    id?: number
    name: string
    imageUrl: string
    category: string
    game_id: number
    uploader_id: number
    phase1Approvals?: number
    phase1Rejections?: number
    phase1TotalVotes?: number
    phase1CompletedAt?: Date | string | null
    phase2Approvals?: number
    phase2Rejections?: number
    phase2TotalVotes?: number
    phase2CompletedAt?: Date | string | null
    status?: $Enums.AssetStatus
    notificationSent?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    votes?: AssetVoteUncheckedCreateNestedManyWithoutAssetInput
    comments?: AssetCommentUncheckedCreateNestedManyWithoutAssetInput
    userInteractions?: UserAssetInteractionUncheckedCreateNestedManyWithoutAssetInput
    finalReviewTeams?: AssetFinalReviewTeamUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutRevisionsInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutRevisionsInput, AssetUncheckedCreateWithoutRevisionsInput>
  }

  export type UserCreateWithoutAssetRevisionsInput = {
    firstName: string
    lastName: string
    email: string
    passwordHash: string
    avatar?: number
    customAvatar?: string | null
    role: $Enums.UserRole
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    team: TeamCreateNestedOneWithoutUsersInput
    inviteCode?: InviteCodeCreateNestedOneWithoutUsersInput
    gameOwners?: GameOwnerCreateNestedManyWithoutUserInput
    uploadedAssets?: AssetCreateNestedManyWithoutUploaderInput
    assetVotes?: AssetVoteCreateNestedManyWithoutUserInput
    assetComments?: AssetCommentCreateNestedManyWithoutUserInput
    revisionComments?: RevisionCommentCreateNestedManyWithoutUserInput
    assetInteractions?: UserAssetInteractionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAssetRevisionsInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    passwordHash: string
    avatar?: number
    customAvatar?: string | null
    role: $Enums.UserRole
    isActive?: boolean
    lastLogin?: Date | string | null
    team_id: number
    invite_code_id?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    gameOwners?: GameOwnerUncheckedCreateNestedManyWithoutUserInput
    uploadedAssets?: AssetUncheckedCreateNestedManyWithoutUploaderInput
    assetVotes?: AssetVoteUncheckedCreateNestedManyWithoutUserInput
    assetComments?: AssetCommentUncheckedCreateNestedManyWithoutUserInput
    revisionComments?: RevisionCommentUncheckedCreateNestedManyWithoutUserInput
    assetInteractions?: UserAssetInteractionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAssetRevisionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssetRevisionsInput, UserUncheckedCreateWithoutAssetRevisionsInput>
  }

  export type AssetVoteCreateWithoutRevisionInput = {
    vote: $Enums.VoteType
    phase: $Enums.VotePhase
    weight?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAssetVotesInput
    asset?: AssetCreateNestedOneWithoutVotesInput
  }

  export type AssetVoteUncheckedCreateWithoutRevisionInput = {
    id?: number
    user_id: number
    vote: $Enums.VoteType
    phase: $Enums.VotePhase
    weight?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    asset_id?: number | null
  }

  export type AssetVoteCreateOrConnectWithoutRevisionInput = {
    where: AssetVoteWhereUniqueInput
    create: XOR<AssetVoteCreateWithoutRevisionInput, AssetVoteUncheckedCreateWithoutRevisionInput>
  }

  export type AssetVoteCreateManyRevisionInputEnvelope = {
    data: AssetVoteCreateManyRevisionInput | AssetVoteCreateManyRevisionInput[]
    skipDuplicates?: boolean
  }

  export type RevisionCommentCreateWithoutRevisionInput = {
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutRevisionCommentsInput
  }

  export type RevisionCommentUncheckedCreateWithoutRevisionInput = {
    id?: number
    user_id: number
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RevisionCommentCreateOrConnectWithoutRevisionInput = {
    where: RevisionCommentWhereUniqueInput
    create: XOR<RevisionCommentCreateWithoutRevisionInput, RevisionCommentUncheckedCreateWithoutRevisionInput>
  }

  export type RevisionCommentCreateManyRevisionInputEnvelope = {
    data: RevisionCommentCreateManyRevisionInput | RevisionCommentCreateManyRevisionInput[]
    skipDuplicates?: boolean
  }

  export type UserAssetInteractionCreateWithoutRevisionInput = {
    hasVoted?: boolean
    hasCommented?: boolean
    dismissedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAssetInteractionsInput
    asset?: AssetCreateNestedOneWithoutUserInteractionsInput
    Game?: GameCreateNestedOneWithoutUserInteractionsInput
  }

  export type UserAssetInteractionUncheckedCreateWithoutRevisionInput = {
    id?: number
    user_id: number
    asset_id?: number | null
    hasVoted?: boolean
    hasCommented?: boolean
    dismissedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    gameId?: number | null
  }

  export type UserAssetInteractionCreateOrConnectWithoutRevisionInput = {
    where: UserAssetInteractionWhereUniqueInput
    create: XOR<UserAssetInteractionCreateWithoutRevisionInput, UserAssetInteractionUncheckedCreateWithoutRevisionInput>
  }

  export type UserAssetInteractionCreateManyRevisionInputEnvelope = {
    data: UserAssetInteractionCreateManyRevisionInput | UserAssetInteractionCreateManyRevisionInput[]
    skipDuplicates?: boolean
  }

  export type AssetUpsertWithoutRevisionsInput = {
    update: XOR<AssetUpdateWithoutRevisionsInput, AssetUncheckedUpdateWithoutRevisionsInput>
    create: XOR<AssetCreateWithoutRevisionsInput, AssetUncheckedCreateWithoutRevisionsInput>
    where?: AssetWhereInput
  }

  export type AssetUpdateToOneWithWhereWithoutRevisionsInput = {
    where?: AssetWhereInput
    data: XOR<AssetUpdateWithoutRevisionsInput, AssetUncheckedUpdateWithoutRevisionsInput>
  }

  export type AssetUpdateWithoutRevisionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    phase1Approvals?: IntFieldUpdateOperationsInput | number
    phase1Rejections?: IntFieldUpdateOperationsInput | number
    phase1TotalVotes?: IntFieldUpdateOperationsInput | number
    phase1CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phase2Approvals?: IntFieldUpdateOperationsInput | number
    phase2Rejections?: IntFieldUpdateOperationsInput | number
    phase2TotalVotes?: IntFieldUpdateOperationsInput | number
    phase2CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    notificationSent?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    game?: GameUpdateOneRequiredWithoutAssetsNestedInput
    uploader?: UserUpdateOneRequiredWithoutUploadedAssetsNestedInput
    votes?: AssetVoteUpdateManyWithoutAssetNestedInput
    comments?: AssetCommentUpdateManyWithoutAssetNestedInput
    userInteractions?: UserAssetInteractionUpdateManyWithoutAssetNestedInput
    finalReviewTeams?: AssetFinalReviewTeamUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutRevisionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    game_id?: IntFieldUpdateOperationsInput | number
    uploader_id?: IntFieldUpdateOperationsInput | number
    phase1Approvals?: IntFieldUpdateOperationsInput | number
    phase1Rejections?: IntFieldUpdateOperationsInput | number
    phase1TotalVotes?: IntFieldUpdateOperationsInput | number
    phase1CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phase2Approvals?: IntFieldUpdateOperationsInput | number
    phase2Rejections?: IntFieldUpdateOperationsInput | number
    phase2TotalVotes?: IntFieldUpdateOperationsInput | number
    phase2CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    notificationSent?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    votes?: AssetVoteUncheckedUpdateManyWithoutAssetNestedInput
    comments?: AssetCommentUncheckedUpdateManyWithoutAssetNestedInput
    userInteractions?: UserAssetInteractionUncheckedUpdateManyWithoutAssetNestedInput
    finalReviewTeams?: AssetFinalReviewTeamUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type UserUpsertWithoutAssetRevisionsInput = {
    update: XOR<UserUpdateWithoutAssetRevisionsInput, UserUncheckedUpdateWithoutAssetRevisionsInput>
    create: XOR<UserCreateWithoutAssetRevisionsInput, UserUncheckedCreateWithoutAssetRevisionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssetRevisionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssetRevisionsInput, UserUncheckedUpdateWithoutAssetRevisionsInput>
  }

  export type UserUpdateWithoutAssetRevisionsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    avatar?: IntFieldUpdateOperationsInput | number
    customAvatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneRequiredWithoutUsersNestedInput
    inviteCode?: InviteCodeUpdateOneWithoutUsersNestedInput
    gameOwners?: GameOwnerUpdateManyWithoutUserNestedInput
    uploadedAssets?: AssetUpdateManyWithoutUploaderNestedInput
    assetVotes?: AssetVoteUpdateManyWithoutUserNestedInput
    assetComments?: AssetCommentUpdateManyWithoutUserNestedInput
    revisionComments?: RevisionCommentUpdateManyWithoutUserNestedInput
    assetInteractions?: UserAssetInteractionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAssetRevisionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    avatar?: IntFieldUpdateOperationsInput | number
    customAvatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    team_id?: IntFieldUpdateOperationsInput | number
    invite_code_id?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameOwners?: GameOwnerUncheckedUpdateManyWithoutUserNestedInput
    uploadedAssets?: AssetUncheckedUpdateManyWithoutUploaderNestedInput
    assetVotes?: AssetVoteUncheckedUpdateManyWithoutUserNestedInput
    assetComments?: AssetCommentUncheckedUpdateManyWithoutUserNestedInput
    revisionComments?: RevisionCommentUncheckedUpdateManyWithoutUserNestedInput
    assetInteractions?: UserAssetInteractionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AssetVoteUpsertWithWhereUniqueWithoutRevisionInput = {
    where: AssetVoteWhereUniqueInput
    update: XOR<AssetVoteUpdateWithoutRevisionInput, AssetVoteUncheckedUpdateWithoutRevisionInput>
    create: XOR<AssetVoteCreateWithoutRevisionInput, AssetVoteUncheckedCreateWithoutRevisionInput>
  }

  export type AssetVoteUpdateWithWhereUniqueWithoutRevisionInput = {
    where: AssetVoteWhereUniqueInput
    data: XOR<AssetVoteUpdateWithoutRevisionInput, AssetVoteUncheckedUpdateWithoutRevisionInput>
  }

  export type AssetVoteUpdateManyWithWhereWithoutRevisionInput = {
    where: AssetVoteScalarWhereInput
    data: XOR<AssetVoteUpdateManyMutationInput, AssetVoteUncheckedUpdateManyWithoutRevisionInput>
  }

  export type RevisionCommentUpsertWithWhereUniqueWithoutRevisionInput = {
    where: RevisionCommentWhereUniqueInput
    update: XOR<RevisionCommentUpdateWithoutRevisionInput, RevisionCommentUncheckedUpdateWithoutRevisionInput>
    create: XOR<RevisionCommentCreateWithoutRevisionInput, RevisionCommentUncheckedCreateWithoutRevisionInput>
  }

  export type RevisionCommentUpdateWithWhereUniqueWithoutRevisionInput = {
    where: RevisionCommentWhereUniqueInput
    data: XOR<RevisionCommentUpdateWithoutRevisionInput, RevisionCommentUncheckedUpdateWithoutRevisionInput>
  }

  export type RevisionCommentUpdateManyWithWhereWithoutRevisionInput = {
    where: RevisionCommentScalarWhereInput
    data: XOR<RevisionCommentUpdateManyMutationInput, RevisionCommentUncheckedUpdateManyWithoutRevisionInput>
  }

  export type UserAssetInteractionUpsertWithWhereUniqueWithoutRevisionInput = {
    where: UserAssetInteractionWhereUniqueInput
    update: XOR<UserAssetInteractionUpdateWithoutRevisionInput, UserAssetInteractionUncheckedUpdateWithoutRevisionInput>
    create: XOR<UserAssetInteractionCreateWithoutRevisionInput, UserAssetInteractionUncheckedCreateWithoutRevisionInput>
  }

  export type UserAssetInteractionUpdateWithWhereUniqueWithoutRevisionInput = {
    where: UserAssetInteractionWhereUniqueInput
    data: XOR<UserAssetInteractionUpdateWithoutRevisionInput, UserAssetInteractionUncheckedUpdateWithoutRevisionInput>
  }

  export type UserAssetInteractionUpdateManyWithWhereWithoutRevisionInput = {
    where: UserAssetInteractionScalarWhereInput
    data: XOR<UserAssetInteractionUpdateManyMutationInput, UserAssetInteractionUncheckedUpdateManyWithoutRevisionInput>
  }

  export type UserCreateWithoutAssetVotesInput = {
    firstName: string
    lastName: string
    email: string
    passwordHash: string
    avatar?: number
    customAvatar?: string | null
    role: $Enums.UserRole
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    team: TeamCreateNestedOneWithoutUsersInput
    inviteCode?: InviteCodeCreateNestedOneWithoutUsersInput
    gameOwners?: GameOwnerCreateNestedManyWithoutUserInput
    uploadedAssets?: AssetCreateNestedManyWithoutUploaderInput
    assetRevisions?: AssetRevisionCreateNestedManyWithoutUploaderInput
    assetComments?: AssetCommentCreateNestedManyWithoutUserInput
    revisionComments?: RevisionCommentCreateNestedManyWithoutUserInput
    assetInteractions?: UserAssetInteractionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAssetVotesInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    passwordHash: string
    avatar?: number
    customAvatar?: string | null
    role: $Enums.UserRole
    isActive?: boolean
    lastLogin?: Date | string | null
    team_id: number
    invite_code_id?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    gameOwners?: GameOwnerUncheckedCreateNestedManyWithoutUserInput
    uploadedAssets?: AssetUncheckedCreateNestedManyWithoutUploaderInput
    assetRevisions?: AssetRevisionUncheckedCreateNestedManyWithoutUploaderInput
    assetComments?: AssetCommentUncheckedCreateNestedManyWithoutUserInput
    revisionComments?: RevisionCommentUncheckedCreateNestedManyWithoutUserInput
    assetInteractions?: UserAssetInteractionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAssetVotesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssetVotesInput, UserUncheckedCreateWithoutAssetVotesInput>
  }

  export type AssetCreateWithoutVotesInput = {
    name: string
    imageUrl: string
    category: string
    phase1Approvals?: number
    phase1Rejections?: number
    phase1TotalVotes?: number
    phase1CompletedAt?: Date | string | null
    phase2Approvals?: number
    phase2Rejections?: number
    phase2TotalVotes?: number
    phase2CompletedAt?: Date | string | null
    status?: $Enums.AssetStatus
    notificationSent?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    game: GameCreateNestedOneWithoutAssetsInput
    uploader: UserCreateNestedOneWithoutUploadedAssetsInput
    revisions?: AssetRevisionCreateNestedManyWithoutAssetInput
    comments?: AssetCommentCreateNestedManyWithoutAssetInput
    userInteractions?: UserAssetInteractionCreateNestedManyWithoutAssetInput
    finalReviewTeams?: AssetFinalReviewTeamCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutVotesInput = {
    id?: number
    name: string
    imageUrl: string
    category: string
    game_id: number
    uploader_id: number
    phase1Approvals?: number
    phase1Rejections?: number
    phase1TotalVotes?: number
    phase1CompletedAt?: Date | string | null
    phase2Approvals?: number
    phase2Rejections?: number
    phase2TotalVotes?: number
    phase2CompletedAt?: Date | string | null
    status?: $Enums.AssetStatus
    notificationSent?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    revisions?: AssetRevisionUncheckedCreateNestedManyWithoutAssetInput
    comments?: AssetCommentUncheckedCreateNestedManyWithoutAssetInput
    userInteractions?: UserAssetInteractionUncheckedCreateNestedManyWithoutAssetInput
    finalReviewTeams?: AssetFinalReviewTeamUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutVotesInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutVotesInput, AssetUncheckedCreateWithoutVotesInput>
  }

  export type AssetRevisionCreateWithoutVotesInput = {
    imageUrl: string
    description?: string | null
    phase1Approvals?: number
    phase1Rejections?: number
    phase1TotalVotes?: number
    phase1CompletedAt?: Date | string | null
    phase2Approvals?: number
    phase2Rejections?: number
    phase2TotalVotes?: number
    phase2CompletedAt?: Date | string | null
    status?: $Enums.AssetStatus
    notificationSent?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    asset: AssetCreateNestedOneWithoutRevisionsInput
    uploader: UserCreateNestedOneWithoutAssetRevisionsInput
    comments?: RevisionCommentCreateNestedManyWithoutRevisionInput
    userInteractions?: UserAssetInteractionCreateNestedManyWithoutRevisionInput
  }

  export type AssetRevisionUncheckedCreateWithoutVotesInput = {
    id?: number
    asset_id: number
    imageUrl: string
    uploader_id: number
    description?: string | null
    phase1Approvals?: number
    phase1Rejections?: number
    phase1TotalVotes?: number
    phase1CompletedAt?: Date | string | null
    phase2Approvals?: number
    phase2Rejections?: number
    phase2TotalVotes?: number
    phase2CompletedAt?: Date | string | null
    status?: $Enums.AssetStatus
    notificationSent?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: RevisionCommentUncheckedCreateNestedManyWithoutRevisionInput
    userInteractions?: UserAssetInteractionUncheckedCreateNestedManyWithoutRevisionInput
  }

  export type AssetRevisionCreateOrConnectWithoutVotesInput = {
    where: AssetRevisionWhereUniqueInput
    create: XOR<AssetRevisionCreateWithoutVotesInput, AssetRevisionUncheckedCreateWithoutVotesInput>
  }

  export type UserUpsertWithoutAssetVotesInput = {
    update: XOR<UserUpdateWithoutAssetVotesInput, UserUncheckedUpdateWithoutAssetVotesInput>
    create: XOR<UserCreateWithoutAssetVotesInput, UserUncheckedCreateWithoutAssetVotesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssetVotesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssetVotesInput, UserUncheckedUpdateWithoutAssetVotesInput>
  }

  export type UserUpdateWithoutAssetVotesInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    avatar?: IntFieldUpdateOperationsInput | number
    customAvatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneRequiredWithoutUsersNestedInput
    inviteCode?: InviteCodeUpdateOneWithoutUsersNestedInput
    gameOwners?: GameOwnerUpdateManyWithoutUserNestedInput
    uploadedAssets?: AssetUpdateManyWithoutUploaderNestedInput
    assetRevisions?: AssetRevisionUpdateManyWithoutUploaderNestedInput
    assetComments?: AssetCommentUpdateManyWithoutUserNestedInput
    revisionComments?: RevisionCommentUpdateManyWithoutUserNestedInput
    assetInteractions?: UserAssetInteractionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAssetVotesInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    avatar?: IntFieldUpdateOperationsInput | number
    customAvatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    team_id?: IntFieldUpdateOperationsInput | number
    invite_code_id?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameOwners?: GameOwnerUncheckedUpdateManyWithoutUserNestedInput
    uploadedAssets?: AssetUncheckedUpdateManyWithoutUploaderNestedInput
    assetRevisions?: AssetRevisionUncheckedUpdateManyWithoutUploaderNestedInput
    assetComments?: AssetCommentUncheckedUpdateManyWithoutUserNestedInput
    revisionComments?: RevisionCommentUncheckedUpdateManyWithoutUserNestedInput
    assetInteractions?: UserAssetInteractionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AssetUpsertWithoutVotesInput = {
    update: XOR<AssetUpdateWithoutVotesInput, AssetUncheckedUpdateWithoutVotesInput>
    create: XOR<AssetCreateWithoutVotesInput, AssetUncheckedCreateWithoutVotesInput>
    where?: AssetWhereInput
  }

  export type AssetUpdateToOneWithWhereWithoutVotesInput = {
    where?: AssetWhereInput
    data: XOR<AssetUpdateWithoutVotesInput, AssetUncheckedUpdateWithoutVotesInput>
  }

  export type AssetUpdateWithoutVotesInput = {
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    phase1Approvals?: IntFieldUpdateOperationsInput | number
    phase1Rejections?: IntFieldUpdateOperationsInput | number
    phase1TotalVotes?: IntFieldUpdateOperationsInput | number
    phase1CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phase2Approvals?: IntFieldUpdateOperationsInput | number
    phase2Rejections?: IntFieldUpdateOperationsInput | number
    phase2TotalVotes?: IntFieldUpdateOperationsInput | number
    phase2CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    notificationSent?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    game?: GameUpdateOneRequiredWithoutAssetsNestedInput
    uploader?: UserUpdateOneRequiredWithoutUploadedAssetsNestedInput
    revisions?: AssetRevisionUpdateManyWithoutAssetNestedInput
    comments?: AssetCommentUpdateManyWithoutAssetNestedInput
    userInteractions?: UserAssetInteractionUpdateManyWithoutAssetNestedInput
    finalReviewTeams?: AssetFinalReviewTeamUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutVotesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    game_id?: IntFieldUpdateOperationsInput | number
    uploader_id?: IntFieldUpdateOperationsInput | number
    phase1Approvals?: IntFieldUpdateOperationsInput | number
    phase1Rejections?: IntFieldUpdateOperationsInput | number
    phase1TotalVotes?: IntFieldUpdateOperationsInput | number
    phase1CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phase2Approvals?: IntFieldUpdateOperationsInput | number
    phase2Rejections?: IntFieldUpdateOperationsInput | number
    phase2TotalVotes?: IntFieldUpdateOperationsInput | number
    phase2CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    notificationSent?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revisions?: AssetRevisionUncheckedUpdateManyWithoutAssetNestedInput
    comments?: AssetCommentUncheckedUpdateManyWithoutAssetNestedInput
    userInteractions?: UserAssetInteractionUncheckedUpdateManyWithoutAssetNestedInput
    finalReviewTeams?: AssetFinalReviewTeamUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type AssetRevisionUpsertWithoutVotesInput = {
    update: XOR<AssetRevisionUpdateWithoutVotesInput, AssetRevisionUncheckedUpdateWithoutVotesInput>
    create: XOR<AssetRevisionCreateWithoutVotesInput, AssetRevisionUncheckedCreateWithoutVotesInput>
    where?: AssetRevisionWhereInput
  }

  export type AssetRevisionUpdateToOneWithWhereWithoutVotesInput = {
    where?: AssetRevisionWhereInput
    data: XOR<AssetRevisionUpdateWithoutVotesInput, AssetRevisionUncheckedUpdateWithoutVotesInput>
  }

  export type AssetRevisionUpdateWithoutVotesInput = {
    imageUrl?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    phase1Approvals?: IntFieldUpdateOperationsInput | number
    phase1Rejections?: IntFieldUpdateOperationsInput | number
    phase1TotalVotes?: IntFieldUpdateOperationsInput | number
    phase1CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phase2Approvals?: IntFieldUpdateOperationsInput | number
    phase2Rejections?: IntFieldUpdateOperationsInput | number
    phase2TotalVotes?: IntFieldUpdateOperationsInput | number
    phase2CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    notificationSent?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset?: AssetUpdateOneRequiredWithoutRevisionsNestedInput
    uploader?: UserUpdateOneRequiredWithoutAssetRevisionsNestedInput
    comments?: RevisionCommentUpdateManyWithoutRevisionNestedInput
    userInteractions?: UserAssetInteractionUpdateManyWithoutRevisionNestedInput
  }

  export type AssetRevisionUncheckedUpdateWithoutVotesInput = {
    id?: IntFieldUpdateOperationsInput | number
    asset_id?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
    uploader_id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    phase1Approvals?: IntFieldUpdateOperationsInput | number
    phase1Rejections?: IntFieldUpdateOperationsInput | number
    phase1TotalVotes?: IntFieldUpdateOperationsInput | number
    phase1CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phase2Approvals?: IntFieldUpdateOperationsInput | number
    phase2Rejections?: IntFieldUpdateOperationsInput | number
    phase2TotalVotes?: IntFieldUpdateOperationsInput | number
    phase2CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    notificationSent?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: RevisionCommentUncheckedUpdateManyWithoutRevisionNestedInput
    userInteractions?: UserAssetInteractionUncheckedUpdateManyWithoutRevisionNestedInput
  }

  export type UserCreateWithoutAssetInteractionsInput = {
    firstName: string
    lastName: string
    email: string
    passwordHash: string
    avatar?: number
    customAvatar?: string | null
    role: $Enums.UserRole
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    team: TeamCreateNestedOneWithoutUsersInput
    inviteCode?: InviteCodeCreateNestedOneWithoutUsersInput
    gameOwners?: GameOwnerCreateNestedManyWithoutUserInput
    uploadedAssets?: AssetCreateNestedManyWithoutUploaderInput
    assetRevisions?: AssetRevisionCreateNestedManyWithoutUploaderInput
    assetVotes?: AssetVoteCreateNestedManyWithoutUserInput
    assetComments?: AssetCommentCreateNestedManyWithoutUserInput
    revisionComments?: RevisionCommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAssetInteractionsInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    passwordHash: string
    avatar?: number
    customAvatar?: string | null
    role: $Enums.UserRole
    isActive?: boolean
    lastLogin?: Date | string | null
    team_id: number
    invite_code_id?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    gameOwners?: GameOwnerUncheckedCreateNestedManyWithoutUserInput
    uploadedAssets?: AssetUncheckedCreateNestedManyWithoutUploaderInput
    assetRevisions?: AssetRevisionUncheckedCreateNestedManyWithoutUploaderInput
    assetVotes?: AssetVoteUncheckedCreateNestedManyWithoutUserInput
    assetComments?: AssetCommentUncheckedCreateNestedManyWithoutUserInput
    revisionComments?: RevisionCommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAssetInteractionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssetInteractionsInput, UserUncheckedCreateWithoutAssetInteractionsInput>
  }

  export type AssetCreateWithoutUserInteractionsInput = {
    name: string
    imageUrl: string
    category: string
    phase1Approvals?: number
    phase1Rejections?: number
    phase1TotalVotes?: number
    phase1CompletedAt?: Date | string | null
    phase2Approvals?: number
    phase2Rejections?: number
    phase2TotalVotes?: number
    phase2CompletedAt?: Date | string | null
    status?: $Enums.AssetStatus
    notificationSent?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    game: GameCreateNestedOneWithoutAssetsInput
    uploader: UserCreateNestedOneWithoutUploadedAssetsInput
    revisions?: AssetRevisionCreateNestedManyWithoutAssetInput
    votes?: AssetVoteCreateNestedManyWithoutAssetInput
    comments?: AssetCommentCreateNestedManyWithoutAssetInput
    finalReviewTeams?: AssetFinalReviewTeamCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutUserInteractionsInput = {
    id?: number
    name: string
    imageUrl: string
    category: string
    game_id: number
    uploader_id: number
    phase1Approvals?: number
    phase1Rejections?: number
    phase1TotalVotes?: number
    phase1CompletedAt?: Date | string | null
    phase2Approvals?: number
    phase2Rejections?: number
    phase2TotalVotes?: number
    phase2CompletedAt?: Date | string | null
    status?: $Enums.AssetStatus
    notificationSent?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    revisions?: AssetRevisionUncheckedCreateNestedManyWithoutAssetInput
    votes?: AssetVoteUncheckedCreateNestedManyWithoutAssetInput
    comments?: AssetCommentUncheckedCreateNestedManyWithoutAssetInput
    finalReviewTeams?: AssetFinalReviewTeamUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutUserInteractionsInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutUserInteractionsInput, AssetUncheckedCreateWithoutUserInteractionsInput>
  }

  export type AssetRevisionCreateWithoutUserInteractionsInput = {
    imageUrl: string
    description?: string | null
    phase1Approvals?: number
    phase1Rejections?: number
    phase1TotalVotes?: number
    phase1CompletedAt?: Date | string | null
    phase2Approvals?: number
    phase2Rejections?: number
    phase2TotalVotes?: number
    phase2CompletedAt?: Date | string | null
    status?: $Enums.AssetStatus
    notificationSent?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    asset: AssetCreateNestedOneWithoutRevisionsInput
    uploader: UserCreateNestedOneWithoutAssetRevisionsInput
    votes?: AssetVoteCreateNestedManyWithoutRevisionInput
    comments?: RevisionCommentCreateNestedManyWithoutRevisionInput
  }

  export type AssetRevisionUncheckedCreateWithoutUserInteractionsInput = {
    id?: number
    asset_id: number
    imageUrl: string
    uploader_id: number
    description?: string | null
    phase1Approvals?: number
    phase1Rejections?: number
    phase1TotalVotes?: number
    phase1CompletedAt?: Date | string | null
    phase2Approvals?: number
    phase2Rejections?: number
    phase2TotalVotes?: number
    phase2CompletedAt?: Date | string | null
    status?: $Enums.AssetStatus
    notificationSent?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    votes?: AssetVoteUncheckedCreateNestedManyWithoutRevisionInput
    comments?: RevisionCommentUncheckedCreateNestedManyWithoutRevisionInput
  }

  export type AssetRevisionCreateOrConnectWithoutUserInteractionsInput = {
    where: AssetRevisionWhereUniqueInput
    create: XOR<AssetRevisionCreateWithoutUserInteractionsInput, AssetRevisionUncheckedCreateWithoutUserInteractionsInput>
  }

  export type GameCreateWithoutUserInteractionsInput = {
    name: string
    assetCategories?: GameCreateassetCategoriesInput | string[]
    eligiblePhase1Voters?: number
    eligiblePhase2Voters?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    gameTeams?: GameTeamCreateNestedManyWithoutGameInput
    gameOwners?: GameOwnerCreateNestedManyWithoutGameInput
    assets?: AssetCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutUserInteractionsInput = {
    id?: number
    name: string
    assetCategories?: GameCreateassetCategoriesInput | string[]
    eligiblePhase1Voters?: number
    eligiblePhase2Voters?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    gameTeams?: GameTeamUncheckedCreateNestedManyWithoutGameInput
    gameOwners?: GameOwnerUncheckedCreateNestedManyWithoutGameInput
    assets?: AssetUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutUserInteractionsInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutUserInteractionsInput, GameUncheckedCreateWithoutUserInteractionsInput>
  }

  export type UserUpsertWithoutAssetInteractionsInput = {
    update: XOR<UserUpdateWithoutAssetInteractionsInput, UserUncheckedUpdateWithoutAssetInteractionsInput>
    create: XOR<UserCreateWithoutAssetInteractionsInput, UserUncheckedCreateWithoutAssetInteractionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssetInteractionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssetInteractionsInput, UserUncheckedUpdateWithoutAssetInteractionsInput>
  }

  export type UserUpdateWithoutAssetInteractionsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    avatar?: IntFieldUpdateOperationsInput | number
    customAvatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneRequiredWithoutUsersNestedInput
    inviteCode?: InviteCodeUpdateOneWithoutUsersNestedInput
    gameOwners?: GameOwnerUpdateManyWithoutUserNestedInput
    uploadedAssets?: AssetUpdateManyWithoutUploaderNestedInput
    assetRevisions?: AssetRevisionUpdateManyWithoutUploaderNestedInput
    assetVotes?: AssetVoteUpdateManyWithoutUserNestedInput
    assetComments?: AssetCommentUpdateManyWithoutUserNestedInput
    revisionComments?: RevisionCommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAssetInteractionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    avatar?: IntFieldUpdateOperationsInput | number
    customAvatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    team_id?: IntFieldUpdateOperationsInput | number
    invite_code_id?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameOwners?: GameOwnerUncheckedUpdateManyWithoutUserNestedInput
    uploadedAssets?: AssetUncheckedUpdateManyWithoutUploaderNestedInput
    assetRevisions?: AssetRevisionUncheckedUpdateManyWithoutUploaderNestedInput
    assetVotes?: AssetVoteUncheckedUpdateManyWithoutUserNestedInput
    assetComments?: AssetCommentUncheckedUpdateManyWithoutUserNestedInput
    revisionComments?: RevisionCommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AssetUpsertWithoutUserInteractionsInput = {
    update: XOR<AssetUpdateWithoutUserInteractionsInput, AssetUncheckedUpdateWithoutUserInteractionsInput>
    create: XOR<AssetCreateWithoutUserInteractionsInput, AssetUncheckedCreateWithoutUserInteractionsInput>
    where?: AssetWhereInput
  }

  export type AssetUpdateToOneWithWhereWithoutUserInteractionsInput = {
    where?: AssetWhereInput
    data: XOR<AssetUpdateWithoutUserInteractionsInput, AssetUncheckedUpdateWithoutUserInteractionsInput>
  }

  export type AssetUpdateWithoutUserInteractionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    phase1Approvals?: IntFieldUpdateOperationsInput | number
    phase1Rejections?: IntFieldUpdateOperationsInput | number
    phase1TotalVotes?: IntFieldUpdateOperationsInput | number
    phase1CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phase2Approvals?: IntFieldUpdateOperationsInput | number
    phase2Rejections?: IntFieldUpdateOperationsInput | number
    phase2TotalVotes?: IntFieldUpdateOperationsInput | number
    phase2CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    notificationSent?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    game?: GameUpdateOneRequiredWithoutAssetsNestedInput
    uploader?: UserUpdateOneRequiredWithoutUploadedAssetsNestedInput
    revisions?: AssetRevisionUpdateManyWithoutAssetNestedInput
    votes?: AssetVoteUpdateManyWithoutAssetNestedInput
    comments?: AssetCommentUpdateManyWithoutAssetNestedInput
    finalReviewTeams?: AssetFinalReviewTeamUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutUserInteractionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    game_id?: IntFieldUpdateOperationsInput | number
    uploader_id?: IntFieldUpdateOperationsInput | number
    phase1Approvals?: IntFieldUpdateOperationsInput | number
    phase1Rejections?: IntFieldUpdateOperationsInput | number
    phase1TotalVotes?: IntFieldUpdateOperationsInput | number
    phase1CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phase2Approvals?: IntFieldUpdateOperationsInput | number
    phase2Rejections?: IntFieldUpdateOperationsInput | number
    phase2TotalVotes?: IntFieldUpdateOperationsInput | number
    phase2CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    notificationSent?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revisions?: AssetRevisionUncheckedUpdateManyWithoutAssetNestedInput
    votes?: AssetVoteUncheckedUpdateManyWithoutAssetNestedInput
    comments?: AssetCommentUncheckedUpdateManyWithoutAssetNestedInput
    finalReviewTeams?: AssetFinalReviewTeamUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type AssetRevisionUpsertWithoutUserInteractionsInput = {
    update: XOR<AssetRevisionUpdateWithoutUserInteractionsInput, AssetRevisionUncheckedUpdateWithoutUserInteractionsInput>
    create: XOR<AssetRevisionCreateWithoutUserInteractionsInput, AssetRevisionUncheckedCreateWithoutUserInteractionsInput>
    where?: AssetRevisionWhereInput
  }

  export type AssetRevisionUpdateToOneWithWhereWithoutUserInteractionsInput = {
    where?: AssetRevisionWhereInput
    data: XOR<AssetRevisionUpdateWithoutUserInteractionsInput, AssetRevisionUncheckedUpdateWithoutUserInteractionsInput>
  }

  export type AssetRevisionUpdateWithoutUserInteractionsInput = {
    imageUrl?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    phase1Approvals?: IntFieldUpdateOperationsInput | number
    phase1Rejections?: IntFieldUpdateOperationsInput | number
    phase1TotalVotes?: IntFieldUpdateOperationsInput | number
    phase1CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phase2Approvals?: IntFieldUpdateOperationsInput | number
    phase2Rejections?: IntFieldUpdateOperationsInput | number
    phase2TotalVotes?: IntFieldUpdateOperationsInput | number
    phase2CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    notificationSent?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset?: AssetUpdateOneRequiredWithoutRevisionsNestedInput
    uploader?: UserUpdateOneRequiredWithoutAssetRevisionsNestedInput
    votes?: AssetVoteUpdateManyWithoutRevisionNestedInput
    comments?: RevisionCommentUpdateManyWithoutRevisionNestedInput
  }

  export type AssetRevisionUncheckedUpdateWithoutUserInteractionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    asset_id?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
    uploader_id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    phase1Approvals?: IntFieldUpdateOperationsInput | number
    phase1Rejections?: IntFieldUpdateOperationsInput | number
    phase1TotalVotes?: IntFieldUpdateOperationsInput | number
    phase1CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phase2Approvals?: IntFieldUpdateOperationsInput | number
    phase2Rejections?: IntFieldUpdateOperationsInput | number
    phase2TotalVotes?: IntFieldUpdateOperationsInput | number
    phase2CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    notificationSent?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    votes?: AssetVoteUncheckedUpdateManyWithoutRevisionNestedInput
    comments?: RevisionCommentUncheckedUpdateManyWithoutRevisionNestedInput
  }

  export type GameUpsertWithoutUserInteractionsInput = {
    update: XOR<GameUpdateWithoutUserInteractionsInput, GameUncheckedUpdateWithoutUserInteractionsInput>
    create: XOR<GameCreateWithoutUserInteractionsInput, GameUncheckedCreateWithoutUserInteractionsInput>
    where?: GameWhereInput
  }

  export type GameUpdateToOneWithWhereWithoutUserInteractionsInput = {
    where?: GameWhereInput
    data: XOR<GameUpdateWithoutUserInteractionsInput, GameUncheckedUpdateWithoutUserInteractionsInput>
  }

  export type GameUpdateWithoutUserInteractionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    assetCategories?: GameUpdateassetCategoriesInput | string[]
    eligiblePhase1Voters?: IntFieldUpdateOperationsInput | number
    eligiblePhase2Voters?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameTeams?: GameTeamUpdateManyWithoutGameNestedInput
    gameOwners?: GameOwnerUpdateManyWithoutGameNestedInput
    assets?: AssetUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutUserInteractionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    assetCategories?: GameUpdateassetCategoriesInput | string[]
    eligiblePhase1Voters?: IntFieldUpdateOperationsInput | number
    eligiblePhase2Voters?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameTeams?: GameTeamUncheckedUpdateManyWithoutGameNestedInput
    gameOwners?: GameOwnerUncheckedUpdateManyWithoutGameNestedInput
    assets?: AssetUncheckedUpdateManyWithoutGameNestedInput
  }

  export type AssetCreateWithoutCommentsInput = {
    name: string
    imageUrl: string
    category: string
    phase1Approvals?: number
    phase1Rejections?: number
    phase1TotalVotes?: number
    phase1CompletedAt?: Date | string | null
    phase2Approvals?: number
    phase2Rejections?: number
    phase2TotalVotes?: number
    phase2CompletedAt?: Date | string | null
    status?: $Enums.AssetStatus
    notificationSent?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    game: GameCreateNestedOneWithoutAssetsInput
    uploader: UserCreateNestedOneWithoutUploadedAssetsInput
    revisions?: AssetRevisionCreateNestedManyWithoutAssetInput
    votes?: AssetVoteCreateNestedManyWithoutAssetInput
    userInteractions?: UserAssetInteractionCreateNestedManyWithoutAssetInput
    finalReviewTeams?: AssetFinalReviewTeamCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutCommentsInput = {
    id?: number
    name: string
    imageUrl: string
    category: string
    game_id: number
    uploader_id: number
    phase1Approvals?: number
    phase1Rejections?: number
    phase1TotalVotes?: number
    phase1CompletedAt?: Date | string | null
    phase2Approvals?: number
    phase2Rejections?: number
    phase2TotalVotes?: number
    phase2CompletedAt?: Date | string | null
    status?: $Enums.AssetStatus
    notificationSent?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    revisions?: AssetRevisionUncheckedCreateNestedManyWithoutAssetInput
    votes?: AssetVoteUncheckedCreateNestedManyWithoutAssetInput
    userInteractions?: UserAssetInteractionUncheckedCreateNestedManyWithoutAssetInput
    finalReviewTeams?: AssetFinalReviewTeamUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutCommentsInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutCommentsInput, AssetUncheckedCreateWithoutCommentsInput>
  }

  export type UserCreateWithoutAssetCommentsInput = {
    firstName: string
    lastName: string
    email: string
    passwordHash: string
    avatar?: number
    customAvatar?: string | null
    role: $Enums.UserRole
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    team: TeamCreateNestedOneWithoutUsersInput
    inviteCode?: InviteCodeCreateNestedOneWithoutUsersInput
    gameOwners?: GameOwnerCreateNestedManyWithoutUserInput
    uploadedAssets?: AssetCreateNestedManyWithoutUploaderInput
    assetRevisions?: AssetRevisionCreateNestedManyWithoutUploaderInput
    assetVotes?: AssetVoteCreateNestedManyWithoutUserInput
    revisionComments?: RevisionCommentCreateNestedManyWithoutUserInput
    assetInteractions?: UserAssetInteractionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAssetCommentsInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    passwordHash: string
    avatar?: number
    customAvatar?: string | null
    role: $Enums.UserRole
    isActive?: boolean
    lastLogin?: Date | string | null
    team_id: number
    invite_code_id?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    gameOwners?: GameOwnerUncheckedCreateNestedManyWithoutUserInput
    uploadedAssets?: AssetUncheckedCreateNestedManyWithoutUploaderInput
    assetRevisions?: AssetRevisionUncheckedCreateNestedManyWithoutUploaderInput
    assetVotes?: AssetVoteUncheckedCreateNestedManyWithoutUserInput
    revisionComments?: RevisionCommentUncheckedCreateNestedManyWithoutUserInput
    assetInteractions?: UserAssetInteractionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAssetCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssetCommentsInput, UserUncheckedCreateWithoutAssetCommentsInput>
  }

  export type AssetUpsertWithoutCommentsInput = {
    update: XOR<AssetUpdateWithoutCommentsInput, AssetUncheckedUpdateWithoutCommentsInput>
    create: XOR<AssetCreateWithoutCommentsInput, AssetUncheckedCreateWithoutCommentsInput>
    where?: AssetWhereInput
  }

  export type AssetUpdateToOneWithWhereWithoutCommentsInput = {
    where?: AssetWhereInput
    data: XOR<AssetUpdateWithoutCommentsInput, AssetUncheckedUpdateWithoutCommentsInput>
  }

  export type AssetUpdateWithoutCommentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    phase1Approvals?: IntFieldUpdateOperationsInput | number
    phase1Rejections?: IntFieldUpdateOperationsInput | number
    phase1TotalVotes?: IntFieldUpdateOperationsInput | number
    phase1CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phase2Approvals?: IntFieldUpdateOperationsInput | number
    phase2Rejections?: IntFieldUpdateOperationsInput | number
    phase2TotalVotes?: IntFieldUpdateOperationsInput | number
    phase2CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    notificationSent?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    game?: GameUpdateOneRequiredWithoutAssetsNestedInput
    uploader?: UserUpdateOneRequiredWithoutUploadedAssetsNestedInput
    revisions?: AssetRevisionUpdateManyWithoutAssetNestedInput
    votes?: AssetVoteUpdateManyWithoutAssetNestedInput
    userInteractions?: UserAssetInteractionUpdateManyWithoutAssetNestedInput
    finalReviewTeams?: AssetFinalReviewTeamUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    game_id?: IntFieldUpdateOperationsInput | number
    uploader_id?: IntFieldUpdateOperationsInput | number
    phase1Approvals?: IntFieldUpdateOperationsInput | number
    phase1Rejections?: IntFieldUpdateOperationsInput | number
    phase1TotalVotes?: IntFieldUpdateOperationsInput | number
    phase1CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phase2Approvals?: IntFieldUpdateOperationsInput | number
    phase2Rejections?: IntFieldUpdateOperationsInput | number
    phase2TotalVotes?: IntFieldUpdateOperationsInput | number
    phase2CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    notificationSent?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revisions?: AssetRevisionUncheckedUpdateManyWithoutAssetNestedInput
    votes?: AssetVoteUncheckedUpdateManyWithoutAssetNestedInput
    userInteractions?: UserAssetInteractionUncheckedUpdateManyWithoutAssetNestedInput
    finalReviewTeams?: AssetFinalReviewTeamUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type UserUpsertWithoutAssetCommentsInput = {
    update: XOR<UserUpdateWithoutAssetCommentsInput, UserUncheckedUpdateWithoutAssetCommentsInput>
    create: XOR<UserCreateWithoutAssetCommentsInput, UserUncheckedCreateWithoutAssetCommentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssetCommentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssetCommentsInput, UserUncheckedUpdateWithoutAssetCommentsInput>
  }

  export type UserUpdateWithoutAssetCommentsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    avatar?: IntFieldUpdateOperationsInput | number
    customAvatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneRequiredWithoutUsersNestedInput
    inviteCode?: InviteCodeUpdateOneWithoutUsersNestedInput
    gameOwners?: GameOwnerUpdateManyWithoutUserNestedInput
    uploadedAssets?: AssetUpdateManyWithoutUploaderNestedInput
    assetRevisions?: AssetRevisionUpdateManyWithoutUploaderNestedInput
    assetVotes?: AssetVoteUpdateManyWithoutUserNestedInput
    revisionComments?: RevisionCommentUpdateManyWithoutUserNestedInput
    assetInteractions?: UserAssetInteractionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAssetCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    avatar?: IntFieldUpdateOperationsInput | number
    customAvatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    team_id?: IntFieldUpdateOperationsInput | number
    invite_code_id?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameOwners?: GameOwnerUncheckedUpdateManyWithoutUserNestedInput
    uploadedAssets?: AssetUncheckedUpdateManyWithoutUploaderNestedInput
    assetRevisions?: AssetRevisionUncheckedUpdateManyWithoutUploaderNestedInput
    assetVotes?: AssetVoteUncheckedUpdateManyWithoutUserNestedInput
    revisionComments?: RevisionCommentUncheckedUpdateManyWithoutUserNestedInput
    assetInteractions?: UserAssetInteractionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AssetRevisionCreateWithoutCommentsInput = {
    imageUrl: string
    description?: string | null
    phase1Approvals?: number
    phase1Rejections?: number
    phase1TotalVotes?: number
    phase1CompletedAt?: Date | string | null
    phase2Approvals?: number
    phase2Rejections?: number
    phase2TotalVotes?: number
    phase2CompletedAt?: Date | string | null
    status?: $Enums.AssetStatus
    notificationSent?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    asset: AssetCreateNestedOneWithoutRevisionsInput
    uploader: UserCreateNestedOneWithoutAssetRevisionsInput
    votes?: AssetVoteCreateNestedManyWithoutRevisionInput
    userInteractions?: UserAssetInteractionCreateNestedManyWithoutRevisionInput
  }

  export type AssetRevisionUncheckedCreateWithoutCommentsInput = {
    id?: number
    asset_id: number
    imageUrl: string
    uploader_id: number
    description?: string | null
    phase1Approvals?: number
    phase1Rejections?: number
    phase1TotalVotes?: number
    phase1CompletedAt?: Date | string | null
    phase2Approvals?: number
    phase2Rejections?: number
    phase2TotalVotes?: number
    phase2CompletedAt?: Date | string | null
    status?: $Enums.AssetStatus
    notificationSent?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    votes?: AssetVoteUncheckedCreateNestedManyWithoutRevisionInput
    userInteractions?: UserAssetInteractionUncheckedCreateNestedManyWithoutRevisionInput
  }

  export type AssetRevisionCreateOrConnectWithoutCommentsInput = {
    where: AssetRevisionWhereUniqueInput
    create: XOR<AssetRevisionCreateWithoutCommentsInput, AssetRevisionUncheckedCreateWithoutCommentsInput>
  }

  export type UserCreateWithoutRevisionCommentsInput = {
    firstName: string
    lastName: string
    email: string
    passwordHash: string
    avatar?: number
    customAvatar?: string | null
    role: $Enums.UserRole
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    team: TeamCreateNestedOneWithoutUsersInput
    inviteCode?: InviteCodeCreateNestedOneWithoutUsersInput
    gameOwners?: GameOwnerCreateNestedManyWithoutUserInput
    uploadedAssets?: AssetCreateNestedManyWithoutUploaderInput
    assetRevisions?: AssetRevisionCreateNestedManyWithoutUploaderInput
    assetVotes?: AssetVoteCreateNestedManyWithoutUserInput
    assetComments?: AssetCommentCreateNestedManyWithoutUserInput
    assetInteractions?: UserAssetInteractionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRevisionCommentsInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    passwordHash: string
    avatar?: number
    customAvatar?: string | null
    role: $Enums.UserRole
    isActive?: boolean
    lastLogin?: Date | string | null
    team_id: number
    invite_code_id?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    gameOwners?: GameOwnerUncheckedCreateNestedManyWithoutUserInput
    uploadedAssets?: AssetUncheckedCreateNestedManyWithoutUploaderInput
    assetRevisions?: AssetRevisionUncheckedCreateNestedManyWithoutUploaderInput
    assetVotes?: AssetVoteUncheckedCreateNestedManyWithoutUserInput
    assetComments?: AssetCommentUncheckedCreateNestedManyWithoutUserInput
    assetInteractions?: UserAssetInteractionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRevisionCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRevisionCommentsInput, UserUncheckedCreateWithoutRevisionCommentsInput>
  }

  export type AssetRevisionUpsertWithoutCommentsInput = {
    update: XOR<AssetRevisionUpdateWithoutCommentsInput, AssetRevisionUncheckedUpdateWithoutCommentsInput>
    create: XOR<AssetRevisionCreateWithoutCommentsInput, AssetRevisionUncheckedCreateWithoutCommentsInput>
    where?: AssetRevisionWhereInput
  }

  export type AssetRevisionUpdateToOneWithWhereWithoutCommentsInput = {
    where?: AssetRevisionWhereInput
    data: XOR<AssetRevisionUpdateWithoutCommentsInput, AssetRevisionUncheckedUpdateWithoutCommentsInput>
  }

  export type AssetRevisionUpdateWithoutCommentsInput = {
    imageUrl?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    phase1Approvals?: IntFieldUpdateOperationsInput | number
    phase1Rejections?: IntFieldUpdateOperationsInput | number
    phase1TotalVotes?: IntFieldUpdateOperationsInput | number
    phase1CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phase2Approvals?: IntFieldUpdateOperationsInput | number
    phase2Rejections?: IntFieldUpdateOperationsInput | number
    phase2TotalVotes?: IntFieldUpdateOperationsInput | number
    phase2CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    notificationSent?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset?: AssetUpdateOneRequiredWithoutRevisionsNestedInput
    uploader?: UserUpdateOneRequiredWithoutAssetRevisionsNestedInput
    votes?: AssetVoteUpdateManyWithoutRevisionNestedInput
    userInteractions?: UserAssetInteractionUpdateManyWithoutRevisionNestedInput
  }

  export type AssetRevisionUncheckedUpdateWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    asset_id?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
    uploader_id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    phase1Approvals?: IntFieldUpdateOperationsInput | number
    phase1Rejections?: IntFieldUpdateOperationsInput | number
    phase1TotalVotes?: IntFieldUpdateOperationsInput | number
    phase1CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phase2Approvals?: IntFieldUpdateOperationsInput | number
    phase2Rejections?: IntFieldUpdateOperationsInput | number
    phase2TotalVotes?: IntFieldUpdateOperationsInput | number
    phase2CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    notificationSent?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    votes?: AssetVoteUncheckedUpdateManyWithoutRevisionNestedInput
    userInteractions?: UserAssetInteractionUncheckedUpdateManyWithoutRevisionNestedInput
  }

  export type UserUpsertWithoutRevisionCommentsInput = {
    update: XOR<UserUpdateWithoutRevisionCommentsInput, UserUncheckedUpdateWithoutRevisionCommentsInput>
    create: XOR<UserCreateWithoutRevisionCommentsInput, UserUncheckedCreateWithoutRevisionCommentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRevisionCommentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRevisionCommentsInput, UserUncheckedUpdateWithoutRevisionCommentsInput>
  }

  export type UserUpdateWithoutRevisionCommentsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    avatar?: IntFieldUpdateOperationsInput | number
    customAvatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneRequiredWithoutUsersNestedInput
    inviteCode?: InviteCodeUpdateOneWithoutUsersNestedInput
    gameOwners?: GameOwnerUpdateManyWithoutUserNestedInput
    uploadedAssets?: AssetUpdateManyWithoutUploaderNestedInput
    assetRevisions?: AssetRevisionUpdateManyWithoutUploaderNestedInput
    assetVotes?: AssetVoteUpdateManyWithoutUserNestedInput
    assetComments?: AssetCommentUpdateManyWithoutUserNestedInput
    assetInteractions?: UserAssetInteractionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRevisionCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    avatar?: IntFieldUpdateOperationsInput | number
    customAvatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    team_id?: IntFieldUpdateOperationsInput | number
    invite_code_id?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameOwners?: GameOwnerUncheckedUpdateManyWithoutUserNestedInput
    uploadedAssets?: AssetUncheckedUpdateManyWithoutUploaderNestedInput
    assetRevisions?: AssetRevisionUncheckedUpdateManyWithoutUploaderNestedInput
    assetVotes?: AssetVoteUncheckedUpdateManyWithoutUserNestedInput
    assetComments?: AssetCommentUncheckedUpdateManyWithoutUserNestedInput
    assetInteractions?: UserAssetInteractionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyTeamInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    passwordHash: string
    avatar?: number
    customAvatar?: string | null
    role: $Enums.UserRole
    isActive?: boolean
    lastLogin?: Date | string | null
    invite_code_id?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameTeamCreateManyTeamInput = {
    id?: number
    game_id: number
    startedAt?: Date | string
    endedAt?: Date | string | null
  }

  export type InviteCodeCreateManyTeamInput = {
    id?: number
    code: string
    role: $Enums.UserRole
    description?: string | null
    ownedGameIds?: InviteCodeCreateownedGameIdsInput | number[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssetFinalReviewTeamCreateManyTeamInput = {
    id?: number
    asset_id: number
    createdAt?: Date | string
  }

  export type UserUpdateWithoutTeamInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    avatar?: IntFieldUpdateOperationsInput | number
    customAvatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inviteCode?: InviteCodeUpdateOneWithoutUsersNestedInput
    gameOwners?: GameOwnerUpdateManyWithoutUserNestedInput
    uploadedAssets?: AssetUpdateManyWithoutUploaderNestedInput
    assetRevisions?: AssetRevisionUpdateManyWithoutUploaderNestedInput
    assetVotes?: AssetVoteUpdateManyWithoutUserNestedInput
    assetComments?: AssetCommentUpdateManyWithoutUserNestedInput
    revisionComments?: RevisionCommentUpdateManyWithoutUserNestedInput
    assetInteractions?: UserAssetInteractionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    avatar?: IntFieldUpdateOperationsInput | number
    customAvatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    invite_code_id?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameOwners?: GameOwnerUncheckedUpdateManyWithoutUserNestedInput
    uploadedAssets?: AssetUncheckedUpdateManyWithoutUploaderNestedInput
    assetRevisions?: AssetRevisionUncheckedUpdateManyWithoutUploaderNestedInput
    assetVotes?: AssetVoteUncheckedUpdateManyWithoutUserNestedInput
    assetComments?: AssetCommentUncheckedUpdateManyWithoutUserNestedInput
    revisionComments?: RevisionCommentUncheckedUpdateManyWithoutUserNestedInput
    assetInteractions?: UserAssetInteractionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    avatar?: IntFieldUpdateOperationsInput | number
    customAvatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    invite_code_id?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameTeamUpdateWithoutTeamInput = {
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    game?: GameUpdateOneRequiredWithoutGameTeamsNestedInput
  }

  export type GameTeamUncheckedUpdateWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    game_id?: IntFieldUpdateOperationsInput | number
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type GameTeamUncheckedUpdateManyWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    game_id?: IntFieldUpdateOperationsInput | number
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type InviteCodeUpdateWithoutTeamInput = {
    code?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownedGameIds?: InviteCodeUpdateownedGameIdsInput | number[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutInviteCodeNestedInput
  }

  export type InviteCodeUncheckedUpdateWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownedGameIds?: InviteCodeUpdateownedGameIdsInput | number[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutInviteCodeNestedInput
  }

  export type InviteCodeUncheckedUpdateManyWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownedGameIds?: InviteCodeUpdateownedGameIdsInput | number[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetFinalReviewTeamUpdateWithoutTeamInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset?: AssetUpdateOneRequiredWithoutFinalReviewTeamsNestedInput
  }

  export type AssetFinalReviewTeamUncheckedUpdateWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    asset_id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetFinalReviewTeamUncheckedUpdateManyWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    asset_id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameTeamCreateManyGameInput = {
    id?: number
    team_id: number
    startedAt?: Date | string
    endedAt?: Date | string | null
  }

  export type GameOwnerCreateManyGameInput = {
    id?: number
    user_id: number
    createdAt?: Date | string
  }

  export type AssetCreateManyGameInput = {
    id?: number
    name: string
    imageUrl: string
    category: string
    uploader_id: number
    phase1Approvals?: number
    phase1Rejections?: number
    phase1TotalVotes?: number
    phase1CompletedAt?: Date | string | null
    phase2Approvals?: number
    phase2Rejections?: number
    phase2TotalVotes?: number
    phase2CompletedAt?: Date | string | null
    status?: $Enums.AssetStatus
    notificationSent?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserAssetInteractionCreateManyGameInput = {
    id?: number
    user_id: number
    asset_id?: number | null
    asset_revision_id?: number | null
    hasVoted?: boolean
    hasCommented?: boolean
    dismissedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameTeamUpdateWithoutGameInput = {
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    team?: TeamUpdateOneRequiredWithoutGameTeamsNestedInput
  }

  export type GameTeamUncheckedUpdateWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_id?: IntFieldUpdateOperationsInput | number
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type GameTeamUncheckedUpdateManyWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_id?: IntFieldUpdateOperationsInput | number
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type GameOwnerUpdateWithoutGameInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutGameOwnersNestedInput
  }

  export type GameOwnerUncheckedUpdateWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameOwnerUncheckedUpdateManyWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetUpdateWithoutGameInput = {
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    phase1Approvals?: IntFieldUpdateOperationsInput | number
    phase1Rejections?: IntFieldUpdateOperationsInput | number
    phase1TotalVotes?: IntFieldUpdateOperationsInput | number
    phase1CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phase2Approvals?: IntFieldUpdateOperationsInput | number
    phase2Rejections?: IntFieldUpdateOperationsInput | number
    phase2TotalVotes?: IntFieldUpdateOperationsInput | number
    phase2CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    notificationSent?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploader?: UserUpdateOneRequiredWithoutUploadedAssetsNestedInput
    revisions?: AssetRevisionUpdateManyWithoutAssetNestedInput
    votes?: AssetVoteUpdateManyWithoutAssetNestedInput
    comments?: AssetCommentUpdateManyWithoutAssetNestedInput
    userInteractions?: UserAssetInteractionUpdateManyWithoutAssetNestedInput
    finalReviewTeams?: AssetFinalReviewTeamUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    uploader_id?: IntFieldUpdateOperationsInput | number
    phase1Approvals?: IntFieldUpdateOperationsInput | number
    phase1Rejections?: IntFieldUpdateOperationsInput | number
    phase1TotalVotes?: IntFieldUpdateOperationsInput | number
    phase1CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phase2Approvals?: IntFieldUpdateOperationsInput | number
    phase2Rejections?: IntFieldUpdateOperationsInput | number
    phase2TotalVotes?: IntFieldUpdateOperationsInput | number
    phase2CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    notificationSent?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revisions?: AssetRevisionUncheckedUpdateManyWithoutAssetNestedInput
    votes?: AssetVoteUncheckedUpdateManyWithoutAssetNestedInput
    comments?: AssetCommentUncheckedUpdateManyWithoutAssetNestedInput
    userInteractions?: UserAssetInteractionUncheckedUpdateManyWithoutAssetNestedInput
    finalReviewTeams?: AssetFinalReviewTeamUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateManyWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    uploader_id?: IntFieldUpdateOperationsInput | number
    phase1Approvals?: IntFieldUpdateOperationsInput | number
    phase1Rejections?: IntFieldUpdateOperationsInput | number
    phase1TotalVotes?: IntFieldUpdateOperationsInput | number
    phase1CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phase2Approvals?: IntFieldUpdateOperationsInput | number
    phase2Rejections?: IntFieldUpdateOperationsInput | number
    phase2TotalVotes?: IntFieldUpdateOperationsInput | number
    phase2CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    notificationSent?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAssetInteractionUpdateWithoutGameInput = {
    hasVoted?: BoolFieldUpdateOperationsInput | boolean
    hasCommented?: BoolFieldUpdateOperationsInput | boolean
    dismissedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAssetInteractionsNestedInput
    asset?: AssetUpdateOneWithoutUserInteractionsNestedInput
    revision?: AssetRevisionUpdateOneWithoutUserInteractionsNestedInput
  }

  export type UserAssetInteractionUncheckedUpdateWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    asset_id?: NullableIntFieldUpdateOperationsInput | number | null
    asset_revision_id?: NullableIntFieldUpdateOperationsInput | number | null
    hasVoted?: BoolFieldUpdateOperationsInput | boolean
    hasCommented?: BoolFieldUpdateOperationsInput | boolean
    dismissedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAssetInteractionUncheckedUpdateManyWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    asset_id?: NullableIntFieldUpdateOperationsInput | number | null
    asset_revision_id?: NullableIntFieldUpdateOperationsInput | number | null
    hasVoted?: BoolFieldUpdateOperationsInput | boolean
    hasCommented?: BoolFieldUpdateOperationsInput | boolean
    dismissedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyInviteCodeInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    passwordHash: string
    avatar?: number
    customAvatar?: string | null
    role: $Enums.UserRole
    isActive?: boolean
    lastLogin?: Date | string | null
    team_id: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateWithoutInviteCodeInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    avatar?: IntFieldUpdateOperationsInput | number
    customAvatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneRequiredWithoutUsersNestedInput
    gameOwners?: GameOwnerUpdateManyWithoutUserNestedInput
    uploadedAssets?: AssetUpdateManyWithoutUploaderNestedInput
    assetRevisions?: AssetRevisionUpdateManyWithoutUploaderNestedInput
    assetVotes?: AssetVoteUpdateManyWithoutUserNestedInput
    assetComments?: AssetCommentUpdateManyWithoutUserNestedInput
    revisionComments?: RevisionCommentUpdateManyWithoutUserNestedInput
    assetInteractions?: UserAssetInteractionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutInviteCodeInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    avatar?: IntFieldUpdateOperationsInput | number
    customAvatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    team_id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameOwners?: GameOwnerUncheckedUpdateManyWithoutUserNestedInput
    uploadedAssets?: AssetUncheckedUpdateManyWithoutUploaderNestedInput
    assetRevisions?: AssetRevisionUncheckedUpdateManyWithoutUploaderNestedInput
    assetVotes?: AssetVoteUncheckedUpdateManyWithoutUserNestedInput
    assetComments?: AssetCommentUncheckedUpdateManyWithoutUserNestedInput
    revisionComments?: RevisionCommentUncheckedUpdateManyWithoutUserNestedInput
    assetInteractions?: UserAssetInteractionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutInviteCodeInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    avatar?: IntFieldUpdateOperationsInput | number
    customAvatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    team_id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameOwnerCreateManyUserInput = {
    id?: number
    game_id: number
    createdAt?: Date | string
  }

  export type AssetCreateManyUploaderInput = {
    id?: number
    name: string
    imageUrl: string
    category: string
    game_id: number
    phase1Approvals?: number
    phase1Rejections?: number
    phase1TotalVotes?: number
    phase1CompletedAt?: Date | string | null
    phase2Approvals?: number
    phase2Rejections?: number
    phase2TotalVotes?: number
    phase2CompletedAt?: Date | string | null
    status?: $Enums.AssetStatus
    notificationSent?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssetRevisionCreateManyUploaderInput = {
    id?: number
    asset_id: number
    imageUrl: string
    description?: string | null
    phase1Approvals?: number
    phase1Rejections?: number
    phase1TotalVotes?: number
    phase1CompletedAt?: Date | string | null
    phase2Approvals?: number
    phase2Rejections?: number
    phase2TotalVotes?: number
    phase2CompletedAt?: Date | string | null
    status?: $Enums.AssetStatus
    notificationSent?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssetVoteCreateManyUserInput = {
    id?: number
    vote: $Enums.VoteType
    phase: $Enums.VotePhase
    weight?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    asset_id?: number | null
    asset_revision_id?: number | null
  }

  export type AssetCommentCreateManyUserInput = {
    id?: number
    asset_id: number
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RevisionCommentCreateManyUserInput = {
    id?: number
    asset_revision_id: number
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserAssetInteractionCreateManyUserInput = {
    id?: number
    asset_id?: number | null
    asset_revision_id?: number | null
    hasVoted?: boolean
    hasCommented?: boolean
    dismissedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    gameId?: number | null
  }

  export type GameOwnerUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    game?: GameUpdateOneRequiredWithoutGameOwnersNestedInput
  }

  export type GameOwnerUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    game_id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameOwnerUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    game_id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetUpdateWithoutUploaderInput = {
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    phase1Approvals?: IntFieldUpdateOperationsInput | number
    phase1Rejections?: IntFieldUpdateOperationsInput | number
    phase1TotalVotes?: IntFieldUpdateOperationsInput | number
    phase1CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phase2Approvals?: IntFieldUpdateOperationsInput | number
    phase2Rejections?: IntFieldUpdateOperationsInput | number
    phase2TotalVotes?: IntFieldUpdateOperationsInput | number
    phase2CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    notificationSent?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    game?: GameUpdateOneRequiredWithoutAssetsNestedInput
    revisions?: AssetRevisionUpdateManyWithoutAssetNestedInput
    votes?: AssetVoteUpdateManyWithoutAssetNestedInput
    comments?: AssetCommentUpdateManyWithoutAssetNestedInput
    userInteractions?: UserAssetInteractionUpdateManyWithoutAssetNestedInput
    finalReviewTeams?: AssetFinalReviewTeamUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutUploaderInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    game_id?: IntFieldUpdateOperationsInput | number
    phase1Approvals?: IntFieldUpdateOperationsInput | number
    phase1Rejections?: IntFieldUpdateOperationsInput | number
    phase1TotalVotes?: IntFieldUpdateOperationsInput | number
    phase1CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phase2Approvals?: IntFieldUpdateOperationsInput | number
    phase2Rejections?: IntFieldUpdateOperationsInput | number
    phase2TotalVotes?: IntFieldUpdateOperationsInput | number
    phase2CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    notificationSent?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revisions?: AssetRevisionUncheckedUpdateManyWithoutAssetNestedInput
    votes?: AssetVoteUncheckedUpdateManyWithoutAssetNestedInput
    comments?: AssetCommentUncheckedUpdateManyWithoutAssetNestedInput
    userInteractions?: UserAssetInteractionUncheckedUpdateManyWithoutAssetNestedInput
    finalReviewTeams?: AssetFinalReviewTeamUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateManyWithoutUploaderInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    game_id?: IntFieldUpdateOperationsInput | number
    phase1Approvals?: IntFieldUpdateOperationsInput | number
    phase1Rejections?: IntFieldUpdateOperationsInput | number
    phase1TotalVotes?: IntFieldUpdateOperationsInput | number
    phase1CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phase2Approvals?: IntFieldUpdateOperationsInput | number
    phase2Rejections?: IntFieldUpdateOperationsInput | number
    phase2TotalVotes?: IntFieldUpdateOperationsInput | number
    phase2CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    notificationSent?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetRevisionUpdateWithoutUploaderInput = {
    imageUrl?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    phase1Approvals?: IntFieldUpdateOperationsInput | number
    phase1Rejections?: IntFieldUpdateOperationsInput | number
    phase1TotalVotes?: IntFieldUpdateOperationsInput | number
    phase1CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phase2Approvals?: IntFieldUpdateOperationsInput | number
    phase2Rejections?: IntFieldUpdateOperationsInput | number
    phase2TotalVotes?: IntFieldUpdateOperationsInput | number
    phase2CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    notificationSent?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset?: AssetUpdateOneRequiredWithoutRevisionsNestedInput
    votes?: AssetVoteUpdateManyWithoutRevisionNestedInput
    comments?: RevisionCommentUpdateManyWithoutRevisionNestedInput
    userInteractions?: UserAssetInteractionUpdateManyWithoutRevisionNestedInput
  }

  export type AssetRevisionUncheckedUpdateWithoutUploaderInput = {
    id?: IntFieldUpdateOperationsInput | number
    asset_id?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    phase1Approvals?: IntFieldUpdateOperationsInput | number
    phase1Rejections?: IntFieldUpdateOperationsInput | number
    phase1TotalVotes?: IntFieldUpdateOperationsInput | number
    phase1CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phase2Approvals?: IntFieldUpdateOperationsInput | number
    phase2Rejections?: IntFieldUpdateOperationsInput | number
    phase2TotalVotes?: IntFieldUpdateOperationsInput | number
    phase2CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    notificationSent?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    votes?: AssetVoteUncheckedUpdateManyWithoutRevisionNestedInput
    comments?: RevisionCommentUncheckedUpdateManyWithoutRevisionNestedInput
    userInteractions?: UserAssetInteractionUncheckedUpdateManyWithoutRevisionNestedInput
  }

  export type AssetRevisionUncheckedUpdateManyWithoutUploaderInput = {
    id?: IntFieldUpdateOperationsInput | number
    asset_id?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    phase1Approvals?: IntFieldUpdateOperationsInput | number
    phase1Rejections?: IntFieldUpdateOperationsInput | number
    phase1TotalVotes?: IntFieldUpdateOperationsInput | number
    phase1CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phase2Approvals?: IntFieldUpdateOperationsInput | number
    phase2Rejections?: IntFieldUpdateOperationsInput | number
    phase2TotalVotes?: IntFieldUpdateOperationsInput | number
    phase2CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    notificationSent?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetVoteUpdateWithoutUserInput = {
    vote?: EnumVoteTypeFieldUpdateOperationsInput | $Enums.VoteType
    phase?: EnumVotePhaseFieldUpdateOperationsInput | $Enums.VotePhase
    weight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset?: AssetUpdateOneWithoutVotesNestedInput
    revision?: AssetRevisionUpdateOneWithoutVotesNestedInput
  }

  export type AssetVoteUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    vote?: EnumVoteTypeFieldUpdateOperationsInput | $Enums.VoteType
    phase?: EnumVotePhaseFieldUpdateOperationsInput | $Enums.VotePhase
    weight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset_id?: NullableIntFieldUpdateOperationsInput | number | null
    asset_revision_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AssetVoteUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    vote?: EnumVoteTypeFieldUpdateOperationsInput | $Enums.VoteType
    phase?: EnumVotePhaseFieldUpdateOperationsInput | $Enums.VotePhase
    weight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset_id?: NullableIntFieldUpdateOperationsInput | number | null
    asset_revision_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AssetCommentUpdateWithoutUserInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset?: AssetUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type AssetCommentUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    asset_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetCommentUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    asset_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RevisionCommentUpdateWithoutUserInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revision?: AssetRevisionUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type RevisionCommentUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    asset_revision_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RevisionCommentUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    asset_revision_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAssetInteractionUpdateWithoutUserInput = {
    hasVoted?: BoolFieldUpdateOperationsInput | boolean
    hasCommented?: BoolFieldUpdateOperationsInput | boolean
    dismissedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset?: AssetUpdateOneWithoutUserInteractionsNestedInput
    revision?: AssetRevisionUpdateOneWithoutUserInteractionsNestedInput
    Game?: GameUpdateOneWithoutUserInteractionsNestedInput
  }

  export type UserAssetInteractionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    asset_id?: NullableIntFieldUpdateOperationsInput | number | null
    asset_revision_id?: NullableIntFieldUpdateOperationsInput | number | null
    hasVoted?: BoolFieldUpdateOperationsInput | boolean
    hasCommented?: BoolFieldUpdateOperationsInput | boolean
    dismissedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserAssetInteractionUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    asset_id?: NullableIntFieldUpdateOperationsInput | number | null
    asset_revision_id?: NullableIntFieldUpdateOperationsInput | number | null
    hasVoted?: BoolFieldUpdateOperationsInput | boolean
    hasCommented?: BoolFieldUpdateOperationsInput | boolean
    dismissedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AssetRevisionCreateManyAssetInput = {
    id?: number
    imageUrl: string
    uploader_id: number
    description?: string | null
    phase1Approvals?: number
    phase1Rejections?: number
    phase1TotalVotes?: number
    phase1CompletedAt?: Date | string | null
    phase2Approvals?: number
    phase2Rejections?: number
    phase2TotalVotes?: number
    phase2CompletedAt?: Date | string | null
    status?: $Enums.AssetStatus
    notificationSent?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssetVoteCreateManyAssetInput = {
    id?: number
    user_id: number
    vote: $Enums.VoteType
    phase: $Enums.VotePhase
    weight?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    asset_revision_id?: number | null
  }

  export type AssetCommentCreateManyAssetInput = {
    id?: number
    user_id: number
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserAssetInteractionCreateManyAssetInput = {
    id?: number
    user_id: number
    asset_revision_id?: number | null
    hasVoted?: boolean
    hasCommented?: boolean
    dismissedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    gameId?: number | null
  }

  export type AssetFinalReviewTeamCreateManyAssetInput = {
    id?: number
    team_id: number
    createdAt?: Date | string
  }

  export type AssetRevisionUpdateWithoutAssetInput = {
    imageUrl?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    phase1Approvals?: IntFieldUpdateOperationsInput | number
    phase1Rejections?: IntFieldUpdateOperationsInput | number
    phase1TotalVotes?: IntFieldUpdateOperationsInput | number
    phase1CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phase2Approvals?: IntFieldUpdateOperationsInput | number
    phase2Rejections?: IntFieldUpdateOperationsInput | number
    phase2TotalVotes?: IntFieldUpdateOperationsInput | number
    phase2CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    notificationSent?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploader?: UserUpdateOneRequiredWithoutAssetRevisionsNestedInput
    votes?: AssetVoteUpdateManyWithoutRevisionNestedInput
    comments?: RevisionCommentUpdateManyWithoutRevisionNestedInput
    userInteractions?: UserAssetInteractionUpdateManyWithoutRevisionNestedInput
  }

  export type AssetRevisionUncheckedUpdateWithoutAssetInput = {
    id?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
    uploader_id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    phase1Approvals?: IntFieldUpdateOperationsInput | number
    phase1Rejections?: IntFieldUpdateOperationsInput | number
    phase1TotalVotes?: IntFieldUpdateOperationsInput | number
    phase1CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phase2Approvals?: IntFieldUpdateOperationsInput | number
    phase2Rejections?: IntFieldUpdateOperationsInput | number
    phase2TotalVotes?: IntFieldUpdateOperationsInput | number
    phase2CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    notificationSent?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    votes?: AssetVoteUncheckedUpdateManyWithoutRevisionNestedInput
    comments?: RevisionCommentUncheckedUpdateManyWithoutRevisionNestedInput
    userInteractions?: UserAssetInteractionUncheckedUpdateManyWithoutRevisionNestedInput
  }

  export type AssetRevisionUncheckedUpdateManyWithoutAssetInput = {
    id?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
    uploader_id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    phase1Approvals?: IntFieldUpdateOperationsInput | number
    phase1Rejections?: IntFieldUpdateOperationsInput | number
    phase1TotalVotes?: IntFieldUpdateOperationsInput | number
    phase1CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phase2Approvals?: IntFieldUpdateOperationsInput | number
    phase2Rejections?: IntFieldUpdateOperationsInput | number
    phase2TotalVotes?: IntFieldUpdateOperationsInput | number
    phase2CompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumAssetStatusFieldUpdateOperationsInput | $Enums.AssetStatus
    notificationSent?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetVoteUpdateWithoutAssetInput = {
    vote?: EnumVoteTypeFieldUpdateOperationsInput | $Enums.VoteType
    phase?: EnumVotePhaseFieldUpdateOperationsInput | $Enums.VotePhase
    weight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAssetVotesNestedInput
    revision?: AssetRevisionUpdateOneWithoutVotesNestedInput
  }

  export type AssetVoteUncheckedUpdateWithoutAssetInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    vote?: EnumVoteTypeFieldUpdateOperationsInput | $Enums.VoteType
    phase?: EnumVotePhaseFieldUpdateOperationsInput | $Enums.VotePhase
    weight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset_revision_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AssetVoteUncheckedUpdateManyWithoutAssetInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    vote?: EnumVoteTypeFieldUpdateOperationsInput | $Enums.VoteType
    phase?: EnumVotePhaseFieldUpdateOperationsInput | $Enums.VotePhase
    weight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset_revision_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AssetCommentUpdateWithoutAssetInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAssetCommentsNestedInput
  }

  export type AssetCommentUncheckedUpdateWithoutAssetInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetCommentUncheckedUpdateManyWithoutAssetInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAssetInteractionUpdateWithoutAssetInput = {
    hasVoted?: BoolFieldUpdateOperationsInput | boolean
    hasCommented?: BoolFieldUpdateOperationsInput | boolean
    dismissedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAssetInteractionsNestedInput
    revision?: AssetRevisionUpdateOneWithoutUserInteractionsNestedInput
    Game?: GameUpdateOneWithoutUserInteractionsNestedInput
  }

  export type UserAssetInteractionUncheckedUpdateWithoutAssetInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    asset_revision_id?: NullableIntFieldUpdateOperationsInput | number | null
    hasVoted?: BoolFieldUpdateOperationsInput | boolean
    hasCommented?: BoolFieldUpdateOperationsInput | boolean
    dismissedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserAssetInteractionUncheckedUpdateManyWithoutAssetInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    asset_revision_id?: NullableIntFieldUpdateOperationsInput | number | null
    hasVoted?: BoolFieldUpdateOperationsInput | boolean
    hasCommented?: BoolFieldUpdateOperationsInput | boolean
    dismissedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AssetFinalReviewTeamUpdateWithoutAssetInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneRequiredWithoutFinalReviewAssetsNestedInput
  }

  export type AssetFinalReviewTeamUncheckedUpdateWithoutAssetInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetFinalReviewTeamUncheckedUpdateManyWithoutAssetInput = {
    id?: IntFieldUpdateOperationsInput | number
    team_id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssetVoteCreateManyRevisionInput = {
    id?: number
    user_id: number
    vote: $Enums.VoteType
    phase: $Enums.VotePhase
    weight?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    asset_id?: number | null
  }

  export type RevisionCommentCreateManyRevisionInput = {
    id?: number
    user_id: number
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserAssetInteractionCreateManyRevisionInput = {
    id?: number
    user_id: number
    asset_id?: number | null
    hasVoted?: boolean
    hasCommented?: boolean
    dismissedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    gameId?: number | null
  }

  export type AssetVoteUpdateWithoutRevisionInput = {
    vote?: EnumVoteTypeFieldUpdateOperationsInput | $Enums.VoteType
    phase?: EnumVotePhaseFieldUpdateOperationsInput | $Enums.VotePhase
    weight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAssetVotesNestedInput
    asset?: AssetUpdateOneWithoutVotesNestedInput
  }

  export type AssetVoteUncheckedUpdateWithoutRevisionInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    vote?: EnumVoteTypeFieldUpdateOperationsInput | $Enums.VoteType
    phase?: EnumVotePhaseFieldUpdateOperationsInput | $Enums.VotePhase
    weight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AssetVoteUncheckedUpdateManyWithoutRevisionInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    vote?: EnumVoteTypeFieldUpdateOperationsInput | $Enums.VoteType
    phase?: EnumVotePhaseFieldUpdateOperationsInput | $Enums.VotePhase
    weight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    asset_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RevisionCommentUpdateWithoutRevisionInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRevisionCommentsNestedInput
  }

  export type RevisionCommentUncheckedUpdateWithoutRevisionInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RevisionCommentUncheckedUpdateManyWithoutRevisionInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAssetInteractionUpdateWithoutRevisionInput = {
    hasVoted?: BoolFieldUpdateOperationsInput | boolean
    hasCommented?: BoolFieldUpdateOperationsInput | boolean
    dismissedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAssetInteractionsNestedInput
    asset?: AssetUpdateOneWithoutUserInteractionsNestedInput
    Game?: GameUpdateOneWithoutUserInteractionsNestedInput
  }

  export type UserAssetInteractionUncheckedUpdateWithoutRevisionInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    asset_id?: NullableIntFieldUpdateOperationsInput | number | null
    hasVoted?: BoolFieldUpdateOperationsInput | boolean
    hasCommented?: BoolFieldUpdateOperationsInput | boolean
    dismissedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserAssetInteractionUncheckedUpdateManyWithoutRevisionInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    asset_id?: NullableIntFieldUpdateOperationsInput | number | null
    hasVoted?: BoolFieldUpdateOperationsInput | boolean
    hasCommented?: BoolFieldUpdateOperationsInput | boolean
    dismissedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameId?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}